<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dotnet/msbuild Pull Requests</title>
    <description>Pull Requests from https://github.com/dotnet/msbuild, generated by https://github.com/meziantou/IssuesToRss/</description>
    <managingEditor>meziantousite@outlook.com</managingEditor>
    <ttl>60</ttl>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/8002</guid>
      <link>https://github.com/dotnet/msbuild/pull/8002</link>
      <title>PR: Fix IsRidAgnostic fallback logic - @dsplaisted</title>
      <description>&lt;p&gt;Fixes #7995&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;#6924 changed how &lt;code&gt;IsRidAgnostic&lt;/code&gt; works.  Normally, the .NET SDK should set the &lt;code&gt;IsRidAgnostic&lt;/code&gt; property (added in https://github.com/dotnet/sdk/pull/21986).  But when using an older version of the .NET SDK, there is fallback logic in the GetTargetFrameworksWithPlatformForSingleTargetFramework target to replicate the previous logic.&lt;/p&gt;
&lt;p&gt;However, this fallback logic was incorrect, as it was setting item metadata, but reading from the property to determine whether to set it to the default value.  So if the property wasn't set, the &lt;code&gt;IsRidAgnostic&lt;/code&gt; metadata would always be &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;Manual testing&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 18:45:04 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/8000</guid>
      <link>https://github.com/dotnet/msbuild/pull/8000</link>
      <title>PR: Fallback when server launch fail due to create mutex error - @rokonec</title>
      <description>&lt;p&gt;Fixes #7993, https://github.com/dotnet/runtime/issues/75867&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;There were reported issues, when mutex logic failed with unhandled IOException.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;Extend TryLaunchServer try-catch scope to Include opening mutex and if it throws fallback to non-server behavior.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;Unit test, CI.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 11:57:23 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7999</guid>
      <link>https://github.com/dotnet/msbuild/pull/7999</link>
      <title>PR: Undeclared projects needs to be normalized and case insensitive so that the current project can be ignored properly - @erickulcyk</title>
      <description />
      <pubDate>Wed, 21 Sep 2022 21:08:25 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7998</guid>
      <link>https://github.com/dotnet/msbuild/pull/7998</link>
      <title>PR: Log each inner exception of an aggregate exception in TaskLoggingHelper.LogErrorFromException() - @jeffkl</title>
      <description>&lt;p&gt;Fixes #7985&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;TaskLoggingHelper.LogErrorFromException()&lt;/code&gt; does not currently take into account the relatively new &lt;code&gt;AggregateException&lt;/code&gt; which has inner exceptions but an outer exception with very little details.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;I've updated &lt;code&gt;TaskLoggingHelper.LogErrorFromException()&lt;/code&gt; to check if the specified exception is an &lt;code&gt;AggregateException&lt;/code&gt; and call the method again for each inner exception, respecting all of the arguments passed in around showing details or a stack trace.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;A unit test was added&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;Unfortunately, I can't add the other improvement around an &lt;code&gt;InvalidProjectFileException&lt;/code&gt; since &lt;code&gt;TaskLoggingHelper&lt;/code&gt; is compiled into &lt;code&gt;Microsoft.Build.Utilities.Core&lt;/code&gt; and that assembly does not reference &lt;code&gt;Microsoft.Build.dll&lt;/code&gt; so it doesn't have access to the &lt;code&gt;InvalidProjectFileException&lt;/code&gt; class &lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 20:19:37 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7997</guid>
      <link>https://github.com/dotnet/msbuild/pull/7997</link>
      <title>PR: Skip passing Satellite Assemblies to ResolveManifestFile in Single-File Mode of ClickOnce publish - @sujitnayak</title>
      <description>&lt;p&gt;Fixes &lt;a href="https://devdiv.visualstudio.com/0bdbc590-a062-4c3f-b0f6-9383f67865ee/_workitems/edit/1619029"&gt;AB#1619029&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;During Single-File publish, the satellite assemblies are embedded in the EXE. The ClickOnce manifest should exclude satellite assemblies in this mode but it is not doing so currently.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;Satellite Assemblies item group is now being conditionally populated when SF mode is false.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;Verified with repro provided by customer. Additional testing done by CTI team for all ClickOnce configurations.&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 19:28:50 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7992</guid>
      <link>https://github.com/dotnet/msbuild/pull/7992</link>
      <title>PR: Make ProjectShouldBuild public - @Forgind</title>
      <description>&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;NuGet wants to access whether a particular project was filtered out by a solution filter file. They had previously called SolutionFile.Parse. We have a ProjectShouldBuild method that can be called on a SolutionFile. This makes that method public, hence accessible.&lt;/p&gt;
</description>
      <pubDate>Tue, 20 Sep 2022 21:30:56 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7990</guid>
      <link>https://github.com/dotnet/msbuild/pull/7990</link>
      <title>PR: Move to Arcade 7 - @rainersigwald</title>
      <description>&lt;p&gt;Update to a recent Arcade, and fix fallout from updated xUnit analyzers and new Arcade TFMs.&lt;/p&gt;
</description>
      <pubDate>Tue, 20 Sep 2022 14:00:39 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7989</guid>
      <link>https://github.com/dotnet/msbuild/pull/7989</link>
      <title>PR: Fix issue 7828: enabling the binary logger adds console output - @fanhaipeng</title>
      <description>&lt;p&gt;Fixes #7828&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;Binary logger option overrides verbosity by diagnostic and prints a line even verbosity is set to quiet.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;The fix introduces a variable to store the original verbosity, if the &amp;quot;original verbosity&amp;quot; is quiet, it suppresses the console output when binary logger is requested.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Tue, 20 Sep 2022 03:09:23 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7980</guid>
      <link>https://github.com/dotnet/msbuild/pull/7980</link>
      <title>PR: Exp/new 6.0 sdk - @rainersigwald</title>
      <description>&lt;p&gt;Resolves a component governance alert related to building with the old SDK.&lt;/p&gt;
&lt;p&gt;Successful internal build: https://dev.azure.com/devdiv/DevDiv/_build/results?buildId=6697148&lt;/p&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 13:28:48 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7979</guid>
      <link>https://github.com/dotnet/msbuild/pull/7979</link>
      <title>PR: Support ItemDefinitionGroup in Choose/When - @JaynieBai</title>
      <description>&lt;p&gt;Fixes &lt;a href="https://github.com/dotnet/msbuild/issues/5436"&gt;#5436&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;There is a significant error in the original Constuctor ProjectItemDefinitionGroupElement(XmlElement xmlElement, ProjectRootElement parent, ProjectRootElement containingProject). The second parameter and third parameter types are the same. Fix the constructor bug and parse ItemDefinationGroup in when and otherwise.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;Add one test SupportItemDefinationGroupInWhenOtherwise()&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 08:14:56 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7975</guid>
      <link>https://github.com/dotnet/msbuild/pull/7975</link>
      <title>PR: ngen arm64 binaries as arm64 - @BenVillalobos</title>
      <description>&lt;p&gt;Fixes an issue we've had with our arm64 MSBuild binaries not being ngen'd for arm64.&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;This brought up a question, how does &lt;code&gt;ngen&lt;/code&gt; work cross-platform? Our msbuild binaries mostly reference what's in &lt;code&gt;bin/&lt;/code&gt;, but if we're on an arm64 machine and we reference what's in &lt;code&gt;bin/&lt;/code&gt;, don't those need to be ngen'd for arm64?&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 18:35:42 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7974</guid>
      <link>https://github.com/dotnet/msbuild/pull/7974</link>
      <title>PR: Change up-for-grabs to help wanted - @BenVillalobos</title>
      <description>&lt;p&gt;Fixes #7900&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;help wanted&lt;/code&gt; has better github integrations&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 18:34:28 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7973</guid>
      <link>https://github.com/dotnet/msbuild/pull/7973</link>
      <title>PR: Use old opt-prof data for main and exp branches. - @AR-May</title>
      <description>&lt;p&gt;This should temporarily fix our build pipeline.
All the branches except those which starts with &lt;code&gt;vs&lt;/code&gt; will use the latest good OptProf data from main branch (hardcoded).&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 16:43:40 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7968</guid>
      <link>https://github.com/dotnet/msbuild/pull/7968</link>
      <title>PR: Server shouldn't start during interactive build - @MichalPavlik</title>
      <description>&lt;p&gt;Fixes #7964&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;MSBuild server doesn't play well with interactive builds.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;Number of scenarios when server is not used, was extended.
I also moved &lt;code&gt;DebuggerLaunchCheck&lt;/code&gt; to start of &lt;code&gt;Main&lt;/code&gt; to improve debuggability of code before the check method is called.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;Func test added.&lt;/p&gt;
</description>
      <pubDate>Wed, 14 Sep 2022 11:56:21 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7965</guid>
      <link>https://github.com/dotnet/msbuild/pull/7965</link>
      <title>PR: Eliminate project string cache under a change wave. - @AR-May</title>
      <description>&lt;p&gt;Fixes #5444&lt;/p&gt;
&lt;p&gt;Context
The &lt;code&gt;ProjectStringCache&lt;/code&gt; does seem to have a memory leak problem when used from VS.
The reason of the leak is that it clears memory on the event from &lt;code&gt;ProjectRootElementCache&lt;/code&gt;, which is raised when project is moved out of the strong cache. The unproper use of &lt;code&gt;ProjectRootElementCache&lt;/code&gt; might lead to &lt;code&gt;ProjectStringCache&lt;/code&gt; not freeing memory.&lt;/p&gt;
&lt;p&gt;Also, there were doubts if this cache adds anything at all to performance. Experiments does not show significant difference for the two cases.&lt;/p&gt;
&lt;p&gt;We decided to remove &lt;code&gt;ProjectStringCache&lt;/code&gt; under a change wave.&lt;/p&gt;
&lt;p&gt;Changes Made&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Put usage of &lt;code&gt;ProjectStringCache&lt;/code&gt; under change waves below 17.4.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Testing
Unit tests
Experimental insertion&lt;/p&gt;
&lt;p&gt;Notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The previous PR (that eliminates the &lt;code&gt;ProjectStringCache&lt;/code&gt; altogether with the related code): #7952.&lt;/li&gt;
&lt;li&gt;Another option is to use string interning from &lt;code&gt;StringTools&lt;/code&gt; instead.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 12:58:57 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7962</guid>
      <link>https://github.com/dotnet/msbuild/pull/7962</link>
      <title>PR: Avoid stomping on SatelliteDllsProjectOutputGroupDependsOn - @AArnott</title>
      <description>&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;SatelliteDllsProjectOutputGroupDependsOn&lt;/code&gt; msbuild property is written unconditionally and without regard to its previous value.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;In this change, the targets we require are &lt;em&gt;appended&lt;/em&gt; to any prior value, thereby making extensibility easier.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;⛔None. What would you suggest?&lt;/p&gt;
&lt;p&gt;This &lt;em&gt;should&lt;/em&gt; theoretically be safe, since no one would reasonably set this value to anything above this point in msbuild evaluation since it would be clobbered. But if they did anyway, then it no longer being clobbered could theoretically break something. Although it seems more likely that it would &lt;em&gt;fix&lt;/em&gt; or guarantee target build order where it was broken before.&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 23:27:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7955</guid>
      <link>https://github.com/dotnet/msbuild/pull/7955</link>
      <title>PR: Support for Arm64 immutable directories fast file up to date check - @rokonec</title>
      <description>&lt;p&gt;Fixes #7951&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;During testing Arm64 MSBuild we detected regression caused by not considering some Arm64 known directories as immutable for files up to date check.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;Adding arm64 directories in file classifier.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;Local and Arm64 device.&lt;/p&gt;
</description>
      <pubDate>Fri, 09 Sep 2022 16:13:46 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7953</guid>
      <link>https://github.com/dotnet/msbuild/pull/7953</link>
      <title>PR: Patch 2 - @stan-sz</title>
      <description>&lt;p&gt;Fixes #7193&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;Enforce no unused usings in the code&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Fri, 09 Sep 2022 12:27:37 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7952</guid>
      <link>https://github.com/dotnet/msbuild/pull/7952</link>
      <title>PR: Eliminate project string cache - @AR-May</title>
      <description>&lt;p&gt;Fixes #5444&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;The ProjectStringCache does seem to have a memory leak problem when used from VS.
The reason of the leak is that it clears memory on the event from ProjectRootElementCache, which is raised when project is moved out of the strong cache. The unproper use of ProjectRootElementCache might lead to ProjectStringCache not freeing memory.&lt;/p&gt;
&lt;p&gt;Also, there were doubts if this cache adds anything at all to performance.&lt;/p&gt;
&lt;p&gt;I suggest replacing it with string interning using StringTools.&lt;br /&gt;
Besides fixing the leak it will also make the code much easier and consistent with other code in MSBuild.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Remove ProjectStringCache altogether with all related code.&lt;/li&gt;
&lt;li&gt;Use string interning from StringTools instead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Unit tests&lt;/li&gt;
&lt;li&gt;Experimental insertion&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;Another option is to drop it completely without any replacement.  We would like to test this using experimental insertions as well.&lt;/p&gt;
</description>
      <pubDate>Thu, 08 Sep 2022 16:26:06 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7947</guid>
      <link>https://github.com/dotnet/msbuild/pull/7947</link>
      <title>PR: Use targets from the .NET SDK - @Forgind</title>
      <description>&lt;p&gt;Fixes the MSBuild side of #7832&lt;/p&gt;
&lt;p&gt;Specifically, the plan is that Roslyn will restructure their nupkg to include framework bits in a standard location. The SDK will then xcopy those somewhere then set this path. MSBuild will see that path (if it's set) and know to use that specific version of the roslyn targets to avoid version mismatches.&lt;/p&gt;
&lt;p&gt;There isn't any required ordering between this part and the other two, and since it should have ~0 impact without the other two parts, I think it's fine to put it in now.&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Tue, 06 Sep 2022 22:10:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7945</guid>
      <link>https://github.com/dotnet/msbuild/pull/7945</link>
      <title>PR: Fix processor count on Windows for multiple processor groups - @dmex</title>
      <description>&lt;p&gt;Fixes #7943&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;MSBuild detects the wrong processor count on Windows when debugging processor groups&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;Replaces GetLogicalProcessorInformationEx with GetActiveProcessorCount and removes an incorrect check for &amp;gt;32 processors which is incompatible with Windows boot parameters for debugging processor groups.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Mon, 05 Sep 2022 22:44:53 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7939</guid>
      <link>https://github.com/dotnet/msbuild/pull/7939</link>
      <title>PR: Fix error in XML doc comment - @ghogen</title>
      <description>&lt;p&gt;Fixes https://github.com/dotnet/msbuild/issues/7938&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;Apparent copy and paste error in XML doc comment led to invalid param tag placement&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;Fixed by moving the param tag to its proper placement&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This is a comment-only change&lt;/strong&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 22:58:39 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7937</guid>
      <link>https://github.com/dotnet/msbuild/pull/7937</link>
      <title>PR: Prevent InternalError exceptions on BadImages - @Forgind</title>
      <description>&lt;p&gt;Fixes internally reported issue.&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;We currently skip resolving information about bad images, and that includes not setting whether they are CopyLocal. When we get to logging our results, we assume it's set, since it's set for all not-BadImages. This ensures we only access IsCopyLocal if it has been set.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;Check for IsBadImage before accessing IsCopyLocal.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 19:16:42 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7930</guid>
      <link>https://github.com/dotnet/msbuild/pull/7930</link>
      <title>PR: Update public pool names - @MattGal</title>
      <description>&lt;p&gt;This change is required to continue building PRs in the dotnet public repo.  The agents and images used in the new project / organization are identical and build regressions are not expected.  Updating files under eng/common is intentional to move as much as possible over to viable build agents (normally this is not done).&lt;/p&gt;
&lt;p&gt;For questions / concerns, please stop by the .NET Core Engineering Services &lt;a href="https://teams.microsoft.com/l/channel/19%3aafba3d1545dd45d7b79f34c1821f6055%40thread.skype/First%2520Responders?groupId=4d73664c-9f2f-450d-82a5-c2f02756606d&amp;amp;tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47"&gt;First Responders Teams Channel&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 00:58:59 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7929</guid>
      <link>https://github.com/dotnet/msbuild/pull/7929</link>
      <title>PR: Update public pool names - @MattGal</title>
      <description>&lt;p&gt;This change is required to continue building PRs in the dotnet public repo.  The agents and images used in the new project / organization are identical and build regressions are not expected.  Updating files under eng/common is intentional to move as much as possible over to viable build agents (normally this is not done).&lt;/p&gt;
&lt;p&gt;For questions / concerns, please stop by the .NET Core Engineering Services &lt;a href="https://teams.microsoft.com/l/channel/19%3aafba3d1545dd45d7b79f34c1821f6055%40thread.skype/First%2520Responders?groupId=4d73664c-9f2f-450d-82a5-c2f02756606d&amp;amp;tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47"&gt;First Responders Teams Channel&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 00:58:52 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7928</guid>
      <link>https://github.com/dotnet/msbuild/pull/7928</link>
      <title>PR: Exempt our env var Fixes #7922 - @Forgind</title>
      <description>&lt;p&gt;Fixes #7922&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;Although it's good to hide environment variables that may contain sensitive information, some variables seldom do and can be quite helpful in diagnosing build issues. This exempts environment variables that start with MSBUILD, COMPLUS_, and DOTNET_ from the normal filtering, even in the absence of MSBUILDLOGALLENVIRONMENTVARIABLES.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;Exempted certain environment variables. Also prevented any EnvironmentVariableReadEvents from firing if MSBUILDLOGALLENVIRONMENTVARIABLES is set.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;I built MSBuild.Dev.slnf and checked what its environment node contained.&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
&lt;p&gt;This will need a structured log viewer update to make it less confusing.&lt;/p&gt;
&lt;p&gt;~Confusing to me, this only almost works. Specifically, it filtered out all environment variables except the intended ones &lt;em&gt;plus&lt;/em&gt; OS, LOCALAPPDATA, and USERPROFILE. I don't know what made those special.~&lt;/p&gt;
</description>
      <pubDate>Wed, 31 Aug 2022 17:01:55 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7926</guid>
      <link>https://github.com/dotnet/msbuild/pull/7926</link>
      <title>PR: Deduplicate list of assemblies loaded in TypeLoader - @Forgind</title>
      <description>&lt;p&gt;Fixes #7920&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;When a task ships MSBuild assemblies, we try to load both those assemblies and the assemblies next to MSBuild. This confuses the MetadataLoadContext. We should just use the MSBuild that's actually building, since we'll binding redirect to that anyway.&lt;/p&gt;
&lt;p&gt;We also load MSBuild from the runtime, but that one isn't problematic here.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;Load MSBuild from one place only in TypeLoader.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Tue, 30 Aug 2022 16:50:11 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7924</guid>
      <link>https://github.com/dotnet/msbuild/pull/7924</link>
      <title>PR: Remove unused BuildManager.LoadSubmissionProjectIntoConfiguration - @dfederm</title>
      <description>&lt;p&gt;In #6468, the two callers of the method and the method itself were moved to &lt;code&gt;ProjectCacheService&lt;/code&gt;. However, the original method remained behind as dead code.&lt;/p&gt;
</description>
      <pubDate>Mon, 29 Aug 2022 21:59:21 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7917</guid>
      <link>https://github.com/dotnet/msbuild/pull/7917</link>
      <title>PR: Log error when build is aborted - @Forgind</title>
      <description>&lt;p&gt;Fixes #7287&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;Cancelling a build can lead to a failed build with 0 warnings and 0 errors.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;Ensured that we log an error when the build fails. From code inspection, this was at least one place where, if the build was cancelled, we might not log the error, though the build could still fail.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;We don't have a repro for #7287, so I could not test this properly.&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Thu, 25 Aug 2022 23:30:25 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7914</guid>
      <link>https://github.com/dotnet/msbuild/pull/7914</link>
      <title>PR: Generate SBOM for msbuild  - @epananth</title>
      <description>&lt;p&gt;Fixes #
Generation of SBOM for msbuild
Test: https://devdiv.visualstudio.com/DevDiv/_build/results?buildId=6597691&amp;amp;view=results&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Thu, 25 Aug 2022 20:47:45 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7909</guid>
      <link>https://github.com/dotnet/msbuild/pull/7909</link>
      <title>PR: Update Change Waves env var in docs - @AR-May</title>
      <description>&lt;p&gt;The MSBUILDDISABLEFEATURESFROMVERSION environment variable has different casing in the code and in the documentation. For Windows setting the variable according to the documentation works fine, but Linux is case-sensitive and so documentation in the current state leads to confusion. The error message and the comments are also fixed.&lt;/p&gt;
</description>
      <pubDate>Thu, 25 Aug 2022 05:27:58 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7908</guid>
      <link>https://github.com/dotnet/msbuild/pull/7908</link>
      <title>PR: Fix hang in VS due to EndBuild being called on a UI thread - @dfederm</title>
      <description>&lt;p&gt;This fixes a hang in VS caused by &lt;code&gt;BuildManager.EndBuild&lt;/code&gt; being called on a UI thread in some scenarios. &lt;code&gt;BuildManager.EndBuild&lt;/code&gt; calls &lt;code&gt;ProjectCacheService.DisposeAsync().AsTask()&lt;/code&gt;, which uses &lt;code&gt;await Task.WhenAll(...)&lt;/code&gt;. This simply adds a &lt;code&gt;.ConfigureAwait(false)&lt;/code&gt; to the &lt;code&gt;await Task.WhenAll(...)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;An alternate approach would be to change out &lt;code&gt;await Task.WhenAll(...)&lt;/code&gt; with &lt;code&gt;Task.WaitAll(...)&lt;/code&gt;, but I figured it'd be better to use &lt;code&gt;async/await&lt;/code&gt;.&lt;/p&gt;
</description>
      <pubDate>Wed, 24 Aug 2022 20:51:24 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7906</guid>
      <link>https://github.com/dotnet/msbuild/pull/7906</link>
      <title>PR: adding way to detemrine inner and outer build - @MIchaelRShea</title>
      <description>&lt;p&gt;Fixes #&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Tue, 23 Aug 2022 15:49:24 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7904</guid>
      <link>https://github.com/dotnet/msbuild/pull/7904</link>
      <title>PR: Update binding redirect for System.Reflection.Metadata to match referenced assembly version - @jkoritzinsky</title>
      <description>&lt;p&gt;Update the binding redirect for System.Reflection.Metadata to match the referenced version of the assembly from the current package reference.&lt;/p&gt;
&lt;p&gt;When this is out of date, it causes a lot of pain in consuming repos (in particular in dotnet/sdk and dotnet/runtime). It might be worth some tooling to ensure that this stays up to date.&lt;/p&gt;
&lt;p&gt;See https://github.com/dotnet/sdk/pull/27149 for some context.&lt;/p&gt;
&lt;p&gt;cc: @rainersigwald&lt;/p&gt;
</description>
      <pubDate>Tue, 23 Aug 2022 00:11:16 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7901</guid>
      <link>https://github.com/dotnet/msbuild/pull/7901</link>
      <title>PR: Added proper config file for task host - @MichalPavlik</title>
      <description>&lt;p&gt;Fixes #7793&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;While &lt;code&gt;MSBuildTaskHost.exe&lt;/code&gt; is compiling by NGEN, StringTools dependency is not found due using default &lt;code&gt;vsn.exe.config&lt;/code&gt; file.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;Added config file for task host to help NGEN find the dependency location.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;p&gt;We will see in the ngen logs :)&lt;/p&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Mon, 22 Aug 2022 12:13:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/pull/7897</guid>
      <link>https://github.com/dotnet/msbuild/pull/7897</link>
      <title>PR: Ensure diagnostic logger verbosity Fixes #7780 - @Forgind</title>
      <description>&lt;p&gt;Fixes #7780&lt;/p&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;When using MSBuildDebugEngine, we should log everything at diagnostic verbosity. If no loggers were attached in the normal way, we still set verbosity to diagnostic (for command line builds) and manually set both DetailedSummary and LogTaskInputs on the BuildParameters in BuildManager. I believe these are the only two variables set by binlogs that weren't being set by MSBuildDebugEngine.&lt;/p&gt;
&lt;h3&gt;Changes Made&lt;/h3&gt;
&lt;p&gt;This sets the verbosity to diagnostic in XMake and sets DetailedSummary and LogTaskInputs on BuildParameters.&lt;/p&gt;
&lt;h3&gt;Testing&lt;/h3&gt;
&lt;h3&gt;Notes&lt;/h3&gt;
</description>
      <pubDate>Thu, 18 Aug 2022 18:36:17 Z</pubDate>
    </item>
  </channel>
</rss>