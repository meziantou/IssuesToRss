<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dotnet/sdk Issues</title>
    <description>Issues from https://github.com/dotnet/sdk, generated by https://github.com/meziantou/IssuesToRss/</description>
    <managingEditor>meziantousite@outlook.com</managingEditor>
    <ttl>60</ttl>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28138</guid>
      <link>https://github.com/dotnet/sdk/issues/28138</link>
      <title>Issue: MSB1001: Unknown switch; Switch: --project - @Denovocto</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;When using the dotnet cli, using &lt;code&gt;dotnet run --project &amp;lt;project_name&amp;gt;&lt;/code&gt; and &lt;code&gt;dotnet build --project Bioportal.API&lt;/code&gt;,
MSBuild Fails with error:
&lt;code&gt;MSBUILD : error MSB1001: Unknown switch.&lt;/code&gt;. Sometimes it runs flawlessly without error and other times it says build failed.
I've tried starting new shell sessions, new terminal sessions, restoring projects, none seem to fix the error.&lt;/p&gt;
&lt;h3&gt;To Reproduce&lt;/h3&gt;
&lt;p&gt;Currently using &lt;code&gt;MSBuild version 17.4.0-preview-22428-01+14c24b2d3&lt;/code&gt; and &lt;code&gt;.NET 7.0.100-rc.1.22431.12&lt;/code&gt;.
The full default commandline flags are: &lt;code&gt;-maxcpucount&lt;/code&gt;, &lt;code&gt;verbosity:m&lt;/code&gt;, &lt;code&gt;-restore&lt;/code&gt;, &lt;code&gt;-consoleloggerparameters:Summary&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below that error, this information is shown:
Switches appended by response files:
Switch: --project`&lt;/p&gt;
&lt;h3&gt;Exceptions (if any)&lt;/h3&gt;
&lt;p&gt;MSB1001: Unknown switch&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;h4&gt;&lt;code&gt;dotnet --info&lt;/code&gt;&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;.NET SDK:
 Version:   7.0.100-rc.1.22431.12
 Commit:    f1cf61e1c0

Runtime Environment:
 OS Name:     fedora
 OS Version:  36
 OS Platform: Linux
 RID:         fedora.36-x64
 Base Path:   /usr/share/dotnet/sdk/7.0.100-rc.1.22431.12/

Host:
  Version:      7.0.0-rc.1.22426.10
  Architecture: x64
  Commit:       06aceb7015

.NET SDKs installed:
  7.0.100-rc.1.22431.12 [/usr/share/dotnet/sdk]

.NET runtimes installed:
  Microsoft.AspNetCore.App 7.0.0-rc.1.22427.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 7.0.0-rc.1.22426.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]

Other architectures found:
  None

Environment variables:
  Not set

global.json file:
  Not found

Learn more:
  https://aka.ms/dotnet/info

Download .NET:
  https://aka.ms/dotnet/download
&lt;/code&gt;&lt;/pre&gt;
&lt;h4&gt;IDE / Editor&lt;/h4&gt;
&lt;p&gt;Just using alacritty as terminal and zsh as shell. Error appears only in cli.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 16:19:41 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28118</guid>
      <link>https://github.com/dotnet/sdk/issues/28118</link>
      <title>Issue: `dotnet test --filter` appears to have a hidden character count limitation for tests with long names - @DrEsteban</title>
      <description>&lt;!--
Please keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.

If you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.
For other types of questions, consider using [StackOverflow](https://stackoverflow.com).

--&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;It's a bit hard to describe, but &lt;code&gt;dotnet test --filter&lt;/code&gt; seems to have a hidden max character length at which it will no longer match characters that make up the test name. Hopefully the repro steps below help clear it up.&lt;/p&gt;
&lt;p&gt;NOTE: The filter string examples below might look a little weird, but according to the docs you need to essentially URL-escape special characters in order for them to be interpreted.&lt;/p&gt;
&lt;h3&gt;To Reproduce&lt;/h3&gt;
&lt;!--
We ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo, Gist snippet, or other means to see the isolated behavior.

We may close this issue if:
- the repro project you share with us is complex. We can't investigate custom projects, so don't point us to such, please.
- if we will not be able to repro the behavior you're reporting
--&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Check-out my example repo: https://github.com/DrEsteban/dotnet-test-filter-bug-example&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Open a command prompt to the repo location&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute the following command, which &lt;strong&gt;works&lt;/strong&gt;:
&lt;code&gt;dotnet test --filter &amp;quot;(DisplayName~TestProject1.UnitTest1.ThisIsAnExtremelyLongTestName_SoICanDemonstrateAStrangeBehaviorInDotnetTest_Filter&amp;amp;DisplayName~string1%3a %221234567890%22%2c string2%3a %221234567890%22%2c string3%3a %221234567890%22%2c string4%3a %221234567890%22%2c string5%3a %221234567890%22%2c string6%3a %221234567890%22%2c string7%3a %221234567890%22%2c string8%3a %221234567890%22%2c string9%3a %221234567890%22%2c string10%3a %221234567890%22%2c string11%3a %221234567890%22%2c string12%3a %221234567890%22%2c string13%3a %221234567890%22%2c string14%3a %22123456%22%2c string15%3a %221234)&amp;quot;&lt;/code&gt;
&lt;img src="https://user-images.githubusercontent.com/1495037/191871072-3312bcd6-7b26-496c-b6dd-9930759e7263.png" alt="image" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Execute the following command, which &lt;strong&gt;does not work&lt;/strong&gt;:
&lt;code&gt;dotnet test --filter &amp;quot;(DisplayName~TestProject1.UnitTest1.ThisIsAnExtremelyLongTestName_SoICanDemonstrateAStrangeBehaviorInDotnetTest_Filter&amp;amp;DisplayName~string1%3a %221234567890%22%2c string2%3a %221234567890%22%2c string3%3a %221234567890%22%2c string4%3a %221234567890%22%2c string5%3a %221234567890%22%2c string6%3a %221234567890%22%2c string7%3a %221234567890%22%2c string8%3a %221234567890%22%2c string9%3a %221234567890%22%2c string10%3a %221234567890%22%2c string11%3a %221234567890%22%2c string12%3a %221234567890%22%2c string13%3a %221234567890%22%2c string14%3a %22123456%22%2c string15%3a %2212345)&amp;quot;&lt;/code&gt;
&lt;img src="https://user-images.githubusercontent.com/1495037/191871146-6033dca2-1711-48be-82aa-588ee93df217.png" alt="image" /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note the only difference between those 2 filter strings is the single character &lt;code&gt;5&lt;/code&gt; at the end. So, there seems to be a test name length at which the &lt;code&gt;--filter&lt;/code&gt; parameter &lt;em&gt;is no longer able to search against&lt;/em&gt;.  This is further evidenced by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Execute the following command, which &lt;strong&gt;does not work&lt;/strong&gt;:
&lt;code&gt;dotnet test --filter &amp;quot;(DisplayName~TestProject1.UnitTest1.ThisIsAnExtremelyLongTestName_SoICanDemonstrateAStrangeBehaviorInDotnetTest_Filter&amp;amp;DisplayName~string16%3a %221234567890%22)&amp;quot;&lt;/code&gt;
&lt;img src="https://user-images.githubusercontent.com/1495037/191871273-4f6512fc-a826-44c0-bf61-c9427e43d97e.png" alt="image" /&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This appears to ultimately indicate that the character limit doesn't exist on the &lt;em&gt;filter string&lt;/em&gt;, but rather &lt;em&gt;on the test name itself&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;E.g.
TestProject1.UnitTest1.ThisIsAnExtremelyLongTestName_SoICanDemonstrateAStrangeBehaviorInDotnetTest_Filter(string1: &amp;quot;1234567890&amp;quot;, string2: &amp;quot;1234567890&amp;quot;, string3: &amp;quot;1234567890&amp;quot;, string4: &amp;quot;1234567890&amp;quot;, string5: &amp;quot;1234567890&amp;quot;, string6: &amp;quot;1234567890&amp;quot;, string7: &amp;quot;1234567890&amp;quot;, string8: &amp;quot;1234567890&amp;quot;, string9: &amp;quot;1234567890&amp;quot;, string10: &amp;quot;1234567890&amp;quot;, string11: &amp;quot;1234567890&amp;quot;, string12: &amp;quot;1234567890&amp;quot;, string13: &amp;quot;1234567890&amp;quot;, string14: &amp;quot;123456&amp;quot;, string15: &amp;quot;1234~567890&amp;quot;, string16: &amp;quot;1234567890&amp;quot;)~&lt;/p&gt;
&lt;p&gt;^ None of the strikethrough portion above will match against the test name if used in the filter string.&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Include the output of &lt;code&gt;dotnet --info&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;.NET SDK (reflecting any global.json):
 Version:   6.0.203
 Commit:    a20feadf6d

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.22000
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\6.0.203\

global.json file:
  Not found

Host:
  Version:      6.0.9
  Architecture: x64
  Commit:       163a63591c

.NET SDKs installed:
  1.1.14 [C:\Program Files\dotnet\sdk]
  6.1.423 [C:\Program Files\dotnet\sdk]
  7.0.202 [C:\Program Files\dotnet\sdk]
  6.0.203 [C:\Program Files\dotnet\sdk]

.NET runtimes installed:
  Microsoft.AspNetCore.App 3.1.24 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.1.29 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 5.0.16 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 5.0.17 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 6.0.4 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 6.0.5 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 6.0.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 1.0.16 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 1.1.13 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.24 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.29 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 5.0.16 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 5.0.17 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 6.0.2 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 6.0.4 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 6.0.5 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 6.0.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.1.24 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 3.1.26 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 3.1.29 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 5.0.16 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 5.0.17 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 6.0.2 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 6.0.4 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 6.0.5 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 6.0.9 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]

Download .NET:
  https://aka.ms/dotnet-download

Learn about .NET Runtimes and SDKs:
  https://aka.ms/dotnet/runtimes-sdk-info
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 00:07:36 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28115</guid>
      <link>https://github.com/dotnet/sdk/issues/28115</link>
      <title>Issue: Assumption about relative path for project files - @sisomvanshi</title>
      <description>&lt;p&gt;Hi we're running into errors in building our Razor class library, related to scp.css files. We think it's related to the part highlighted below that assumes a relative path for the file during build. Can the code be updated to better accommodate use cases with absolute paths for files in the .csproj?&lt;/p&gt;
&lt;p&gt;https://github.com/dotnet/sdk/blob/7cc72cc116dc1fc8483076606fd79e78e1829116/src/RazorSdk/Tasks/ComputeCssScope.cs#L31&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 22:16:22 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28112</guid>
      <link>https://github.com/dotnet/sdk/issues/28112</link>
      <title>Issue: opencover does not work with .NET SDK 7.0.100-rc.1.22431.12 and TFM pointing to .NET 7 - @gimlichael</title>
      <description>&lt;!--
Please keep in mind that the GitHub issue tracker is not intended as a general support forum, but for reporting **non-security** bugs and feature requests.

If you believe you have an issue that affects the SECURITY of the platform, please do NOT create an issue and instead email your issue details to secure@microsoft.com. Your report may be eligible for our [bug bounty](https://www.microsoft.com/en-us/msrc/bounty-dot-net-core) but ONLY if it is reported through email.
For other types of questions, consider using [StackOverflow](https://stackoverflow.com).

--&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;After I have updated my project, https://github.com/gimlichael/Cuemon, I was trying to run the CI/CD flow.
Here, after careful diagnosticating, I noticed that&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Calculating coverage result...
  Generating report 'C:\Source\Github\Cuemon\test\Cuemon.Core.Tests\coverage.opencover.xml'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Was not to be found in the Azure DevOps console log, hence my reportgenerator would fail.&lt;/p&gt;
&lt;p&gt;I then tried the same on my local machine; same effect.&lt;/p&gt;
&lt;p&gt;When switching my branch back to Release (eg. no more TFM NET7), the problem is still there until adding a global.json with SDK target set to 6.0.401.&lt;/p&gt;
&lt;p&gt;If i do not add the global.json, same problem occurs, which lead to believe the error is related to TFM 7 and the NET 7 SDK.&lt;/p&gt;
&lt;h3&gt;To Reproduce&lt;/h3&gt;
&lt;!--
We ❤ code! Point us to a minimalistic repro project hosted in a GitHub repo, Gist snippet, or other means to see the isolated behavior.

We may close this issue if:
- the repro project you share with us is complex. We can't investigate custom projects, so don't point us to such, please.
- if we will not be able to repro the behavior you're reporting
--&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/gimlichael/Cuemon.git&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd Cuemon&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet test test/Cuemon.Extensions.Core.Tests/Cuemon.Extensions.Core.Tests.csproj --configuration Debug --verbosity quiet --collect:&amp;quot;XPlat Code Coverage&amp;quot; /p:CollectCoverage=true /p:CoverletOutputFormat=opencover&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/8550919/191840610-b4975ecc-6f73-406f-bc2f-b22452dbd28c.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git checkout release&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet test test/Cuemon.Extensions.Core.Tests/Cuemon.Extensions.Core.Tests.csproj --configuration Debug --verbosity quiet --collect:&amp;quot;XPlat Code Coverage&amp;quot; /p:CollectCoverage=true /p:CoverletOutputFormat=opencover&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/8550919/191840494-4e9f91e9-7cdb-4f70-9495-2d7df6320c59.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;Create a global.json file with this content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
    &amp;quot;sdk&amp;quot;: {
        &amp;quot;version&amp;quot;: &amp;quot;6.0.401&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Run this command again:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet test test/Cuemon.Extensions.Core.Tests/Cuemon.Extensions.Core.Tests.csproj --configuration Debug --verbosity quiet --collect:&amp;quot;XPlat Code Coverage&amp;quot; /p:CollectCoverage=true /p:CoverletOutputFormat=opencover&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/8550919/191840259-de4e7b91-5e76-48e4-9c4e-9b2e0b8de3dd.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;This is the expected result - regardless of SDK and TFM.&lt;/p&gt;
&lt;h3&gt;Exceptions (if any)&lt;/h3&gt;
&lt;!-- 
Include the exception you get when facing this issue
--&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Include the output of &lt;code&gt;dotnet --info&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;.NET SDK (reflecting any global.json):
Version:   6.0.401
Commit:    0906eae6f8&lt;/p&gt;
&lt;p&gt;Runtime Environment:
OS Name:     Windows
OS Version:  10.0.19044
OS Platform: Windows
RID:         win10-x64
Base Path:   C:\Program Files\dotnet\sdk\6.0.401\&lt;/p&gt;
&lt;p&gt;Host:
Version:      7.0.0-rc.1.22426.10
Architecture: x64
Commit:       06aceb7015&lt;/p&gt;
&lt;p&gt;.NET SDKs installed:
3.1.423 [C:\Program Files\dotnet\sdk]
5.0.202 [C:\Program Files\dotnet\sdk]
5.0.303 [C:\Program Files\dotnet\sdk]
5.0.408 [C:\Program Files\dotnet\sdk]
6.0.100 [C:\Program Files\dotnet\sdk]
6.0.109 [C:\Program Files\dotnet\sdk]
6.0.202 [C:\Program Files\dotnet\sdk]
6.0.203 [C:\Program Files\dotnet\sdk]
6.0.304 [C:\Program Files\dotnet\sdk]
6.0.401 [C:\Program Files\dotnet\sdk]
7.0.100-rc.1.22431.12 [C:\Program Files\dotnet\sdk]&lt;/p&gt;
&lt;p&gt;.NET runtimes installed:
Microsoft.AspNetCore.All 2.1.30 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
Microsoft.AspNetCore.App 2.1.30 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 3.1.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 3.1.29 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 5.0.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 5.0.10 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 5.0.12 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 5.0.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 5.0.17 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 6.0.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 6.0.5 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 6.0.9 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 7.0.0-rc.1.22427.2 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.NETCore.App 2.1.30 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 3.1.14 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 3.1.29 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 5.0.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 5.0.10 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 5.0.12 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 5.0.14 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 5.0.17 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 6.0.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 6.0.4 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 6.0.5 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 6.0.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 7.0.0-rc.1.22426.10 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.WindowsDesktop.App 3.1.14 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 3.1.29 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 5.0.9 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 5.0.10 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 5.0.12 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 5.0.14 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 5.0.17 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 6.0.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 6.0.4 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 6.0.5 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 6.0.9 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 7.0.0-rc.1.22427.1 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]&lt;/p&gt;
&lt;p&gt;Other architectures found:
arm64 [C:\Program Files\dotnet]
registered at [HKLM\SOFTWARE\dotnet\Setup\InstalledVersions\arm64\InstallLocation]
x86   [C:\Program Files (x86)\dotnet]
registered at [HKLM\SOFTWARE\dotnet\Setup\InstalledVersions\x86\InstallLocation]&lt;/p&gt;
&lt;p&gt;Environment variables:
Not set&lt;/p&gt;
&lt;p&gt;global.json file:
C:\Source\GithubIssue\Cuemon\global.json&lt;/p&gt;
&lt;p&gt;Learn more:
https://aka.ms/dotnet/info&lt;/p&gt;
&lt;p&gt;Download .NET:
https://aka.ms/dotnet/download&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The IDE (VS / VS Code/ VS4Mac) you're running on, and its version&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Visual Studio 2022 and Visual Studio 2022 PREVIEW (both Enterprise)
Visual Studio Code&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 20:07:44 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28131</guid>
      <link>https://github.com/dotnet/sdk/issues/28131</link>
      <title>Issue: Passing properties with multiple values stops woring with net7 RC1 - 7.0.100-rc.1.22431.12 - @noxe</title>
      <description>&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;Hi - in our csproj files use use custom properties for additional AssemblySearchPaths, see below where we added $(ReferencePath).&lt;/p&gt;
&lt;p&gt;&lt;AssemblySearchPaths&gt;$(AssemblySearchPaths);&lt;strong&gt;$(ReferencePath)&lt;/strong&gt;;$(OutputPath);$(OutputPath)\Server&lt;/AssemblySearchPaths&gt;&lt;/p&gt;
&lt;p&gt;Now we start a build an pass in the ReferencePath:&lt;/p&gt;
&lt;p&gt;dotnet.exe build test.sln --configuration Release /property:ReferencePath=&amp;quot;C:\123;C:\456&amp;quot;&lt;/p&gt;
&lt;p&gt;with NET6 - when doing an verbose build - we get this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     SearchPaths:
         {CandidateAssemblyFiles}
         {HintPathFromItem}
         {TargetFrameworkDirectory}
         {RawFileName}
         C:\123
         C:\456
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;now with NET7 RC1 SDK - we get this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     SearchPaths:
         {CandidateAssemblyFiles}
         {HintPathFromItem}
         {TargetFrameworkDirectory}
         {RawFileName}
         C:\123;C:\456
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;See the values are not split anymore - and the paths are not working? Any info about this behaviour?&lt;/p&gt;
&lt;p&gt;thx&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 18:40:51 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28107</guid>
      <link>https://github.com/dotnet/sdk/issues/28107</link>
      <title>Issue: [6.0.10x] NuGet version incoherency between sdk and templating - @uweigand</title>
      <description>&lt;p&gt;When building .NET SDK 6.0.107 or 6.0.108 on s390x (which uses Mono as the default runtime), every &lt;code&gt;dotnet new&lt;/code&gt; immediately fails with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Could not load type of field 'Microsoft.TemplateEngine.Edge.Installers.NuGet.NuGetApiPackageManager:_nugetLogger' (1) due to: Could not load file or assembly 'NuGet.Common, Version=6.0.0.280, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies.
   at Microsoft.TemplateEngine.Edge.Installers.NuGet.NuGetInstallerFactory.CreateInstaller(IEngineEnvironmentSettings settings, String installPath)
   at Microsoft.TemplateEngine.Edge.BuiltInManagedProvider.GlobalSettingsTemplatePackageProvider..ctor(GlobalSettingsTemplatePackageProviderFactory factory, IEngineEnvironmentSettings settings)
   at Microsoft.TemplateEngine.Edge.BuiltInManagedProvider.GlobalSettingsTemplatePackageProviderFactory.CreateProvider(IEngineEnvironmentSettings settings)
   at Microsoft.TemplateEngine.Edge.Settings.TemplatePackageManager.&amp;lt;EnsureProvidersLoaded&amp;gt;b__21_0(ITemplatePackageProviderFactory f)
   at System.Linq.Enumerable.SelectEnumerableIterator`2[[Microsoft.TemplateEngine.Abstractions.TemplatePackage.ITemplatePackageProviderFactory, Microsoft.TemplateEngine.Abstractions, Version=6.0.108.0, Culture=neutral, PublicKeyToken=adb9793829ddae60],[Microsoft.TemplateEngine.Abstractions.TemplatePackage.ITemplatePackageProvider, Microsoft.TemplateEngine.Abstractions, Version=6.0.108.0, Culture=neutral, PublicKeyToken=adb9793829ddae60]].MoveNext()
   at Microsoft.TemplateEngine.Edge.Settings.TemplatePackageManager.EnsureProvidersLoaded()
   at Microsoft.TemplateEngine.Edge.Settings.TemplatePackageManager.GetTemplatePackagesAsync(Boolean force, CancellationToken cancellationToken)
   at Microsoft.TemplateEngine.Edge.Settings.TemplatePackageManager.UpdateTemplateCacheAsync(Boolean needsRebuild, CancellationToken cancellationToken)
   at Microsoft.TemplateEngine.Edge.Settings.TemplatePackageManager.GetTemplatesAsync(CancellationToken cancellationToken)
   at Microsoft.TemplateEngine.Cli.TemplateResolution.BaseTemplateResolver.GetTemplateGroupsAsync(CancellationToken cancellationToken)
   at Microsoft.TemplateEngine.Cli.TemplateResolution.InstantiateTemplateResolver.ResolveTemplatesAsync(INewCommandInput commandInput, String defaultLanguage, CancellationToken cancellationToken)
   at Microsoft.TemplateEngine.Cli.TemplateInvocationCoordinator.CoordinateInvocationAsync(INewCommandInput commandInput, CancellationToken cancellationToken)
   at Microsoft.TemplateEngine.Cli.New3Command.EnterTemplateManipulationFlowAsync(INewCommandInput commandInput)
   at Microsoft.TemplateEngine.Cli.New3Command.ExecuteAsync(INewCommandInput commandInput)
   at Microsoft.TemplateEngine.Cli.New3Command.ActualRun(String commandName, ITemplateEngineHost host, ITelemetryLogger telemetryLogger, New3Callbacks callbacks, String[] args, String hivePath)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It turns out this is because the &lt;code&gt;Microsoft.TemplateEngine.Edge.dll&lt;/code&gt; provided with SDK 6.0.108 has a reference to version 6.0.0 of &lt;code&gt;NuGet.Common.dll&lt;/code&gt;, while SDK 6.0.108 actually provides version 6.0.2-rc5.&lt;/p&gt;
&lt;p&gt;https://github.com/dotnet/templating/blob/733440663a189f4c4de64f53bab82fd9382b9a3a/eng/Version.Details.xml#L42&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;Dependency Name=&amp;quot;NuGet.Credentials&amp;quot; Version=&amp;quot;6.0.0&amp;quot;&amp;gt;
      &amp;lt;Uri&amp;gt;https://github.com/nuget/nuget.client&amp;lt;/Uri&amp;gt;
      &amp;lt;Sha&amp;gt;078701b97eeef2283c1f4605032b5bcf55a80653&amp;lt;/Sha&amp;gt;
    &amp;lt;/Dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;https://github.com/dotnet/sdk/blob/17ea4a71a1adac805a17c272977139ddc6200bf9/eng/Version.Details.xml#L124&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;Dependency Name=&amp;quot;NuGet.Build.Tasks&amp;quot; Version=&amp;quot;6.0.2-rc.5&amp;quot;&amp;gt;
      &amp;lt;Uri&amp;gt;https://github.com/nuget/nuget.client&amp;lt;/Uri&amp;gt;
      &amp;lt;Sha&amp;gt;75551652b352f860ea0b29095b64fa63715dd672&amp;lt;/Sha&amp;gt;
    &amp;lt;/Dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This doesn't seem to be caused by a problem in our builds; the assemblies contained in the official &lt;code&gt;dotnet-sdk-6.0.108-linux-x64.tar.gz&lt;/code&gt; tarball have the same issue, where &lt;code&gt;Microsoft.TemplateEngine.Edge.dll&lt;/code&gt; has a dependency on &lt;code&gt;NuGet.Common.dll&lt;/code&gt; with assembly version 6.0.0.208, but the provided &lt;code&gt;NuGet.Common.dll&lt;/code&gt; has assembly version 6.0.2.5.&lt;/p&gt;
&lt;p&gt;I assume the reason we're not seeing the symptom on x86 is once again the difference in loader behavior between CoreCLR and Mono that we've run into in the past (e.g. https://github.com/dotnet/runtime/issues/60550): if the type of a struct/class field is defined in some other assembly, CoreCLR will only try to load that assembly when that field is accessed, but Mono will already try to load the assembly when the struct/class type is constructed in the first place.&lt;/p&gt;
&lt;p&gt;The use of a 6.0.2-rc version of NuGet was introduced here initially: https://github.com/dotnet/sdk/commit/5d63f71c200563163e0fcff8f4a77c9e60b428f1
Should the &lt;code&gt;templating&lt;/code&gt; repository now match that to ensure version coherency across the SDK?&lt;/p&gt;
&lt;p&gt;CC @erdembayar @mmitche @omajid&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 16:12:46 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28083</guid>
      <link>https://github.com/dotnet/sdk/issues/28083</link>
      <title>Issue: apicompat/tool: log message to explain how to generate suppressions - @smasher164</title>
      <description>&lt;p&gt;When the APICompat CLI tool produces a list of diagnostics, log a message explaining how to re-run it with the \p:GenerateCompatibilitySuppressions flag.&lt;/p&gt;
&lt;p&gt;/cc @ViktorHofer&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 17:06:01 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28075</guid>
      <link>https://github.com/dotnet/sdk/issues/28075</link>
      <title>Issue: [cli] install exact version of a package - @jiangying000</title>
      <description>&lt;h3&gt;Is your feature request related to a problem? Please describe.&lt;/h3&gt;
&lt;p&gt;I can not downgrade a package automatically (or easily)&lt;/p&gt;
&lt;h3&gt;Describe the solution you'd like&lt;/h3&gt;
&lt;p&gt;Example: &lt;code&gt;dotnet tool install --tool-path ~/.dotnet/tools Boogie --version 2.9.12 --exact&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;for example add an &lt;code&gt;exact&lt;/code&gt; flag, make dotnet tool uninstall boogie if the one installed is not exactly 2.9.12, and not install anything if there is not this version&lt;/p&gt;
&lt;h3&gt;Additional context&lt;/h3&gt;
&lt;p&gt;Add any other context or screenshots about the feature request here.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 13:21:17 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28070</guid>
      <link>https://github.com/dotnet/sdk/issues/28070</link>
      <title>Issue: Remove obsolete suppressions when re-generating suppression files - @ViktorHofer</title>
      <description>&lt;p&gt;When an existing suppression file is re-generated, its content is read, deserialized into a set of suppressions and then stored in a list. When then at a later point, the suppressions are serialized to disk (because the ´--generate-suppression-file` flag is provided), the existing deserialized suppressions plus the new ones are written to disk. Therefore, obsolete suppressions which don't apply anymore are preserved and never get trimmed out.&lt;/p&gt;
&lt;p&gt;It would be good to offer a flag to trim out such obsolete suppressions, similar to the one that the legacy APICompat tooling already offers: https://github.com/dotnet/arcade/blob/025103bcaefad81506465eeb7bb09b107b20f32d/src/Microsoft.DotNet.ApiCompat/src/ApiCompatRunner.cs#L45&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 11:58:08 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28069</guid>
      <link>https://github.com/dotnet/sdk/issues/28069</link>
      <title>Issue: Preserve xml comments when re-generating the suppression file - @ViktorHofer</title>
      <description>&lt;p&gt;Today, when a suppression file already exists and is regenerated via the &lt;code&gt;--generate-suppression-file&lt;/code&gt; or &lt;code&gt;/p:GenerateSuppressionFile=true&lt;/code&gt; flag, xml comments applied to elements are lost. In dotnet/runtime we have comments encoded in suppression files to explain why certain suppressions are necessary.&lt;/p&gt;
&lt;p&gt;We should explore if we can change the XmlSerializer currently used to preserve xml comments. Alternatively we could discuss if we want to support an additional output format like JSON. That would have the advantage of in-built code comment support when using a library like System.Text.Json, and the availability of a source generator which remove the dependency on reflection during serialization/deserialization.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 11:50:23 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28068</guid>
      <link>https://github.com/dotnet/sdk/issues/28068</link>
      <title>Issue: [NetSDKE2E][Loc]With version17.4.0 preview 3.0  + .net7 rc2 SDK installed on locale OS, some template names are unlocalized after running "dotnet new --list" in CLI . - @v-ainigao</title>
      <description>&lt;p&gt;Steps:
1.install it on locale OS Version 17.4.0 preview 3.0[32920.363.main] + .net7 rc2 SDK
2.Below workloads are installed in vs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;.NET desktop development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ASP.NET and web development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Universal Windows Platform development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Visual Studio extension development&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;.NET Multi-platform App Ul development--check Xamarin&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.Run “dotnet new --list” in CLI&lt;/p&gt;
&lt;p&gt;4.Check if output contents are localized well.&lt;/p&gt;
&lt;p&gt;Expected result:
Template names are localized.
Actual Result:
Some template names are not localized.&lt;/p&gt;
&lt;p&gt;e.g
TK:
&lt;img src="https://user-images.githubusercontent.com/106054229/191471708-b2914e06-3b84-466f-98a8-58c692c31e18.png" alt="Unbenannt" /&gt;&lt;/p&gt;
&lt;p&gt;SC：
&lt;img src="https://user-images.githubusercontent.com/106054229/191472400-dd4874e9-5268-4b5c-9a50-0925a090c3e4.png" alt="MicrosoftTeams-image (6)" /&gt;&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 09:45:15 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28084</guid>
      <link>https://github.com/dotnet/sdk/issues/28084</link>
      <title>Issue: Breaking change in linebreak handling in 7.0 RC1 - @SteveSandersonMS</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;I'm unsure if this is an issue in &lt;code&gt;dotnet run&lt;/code&gt; or in the underlying runtime/libraries, so please redirect elsewhere if needed. Also, I don't know if this is a deliberate change.&lt;/p&gt;
&lt;h3&gt;Customer impact&lt;/h3&gt;
&lt;p&gt;The impact of this change is that existing code that renders to the console produces corrupt output. It seems to be that, in the past, a Unix-style &lt;code&gt;\n&lt;/code&gt; was enough to produce normal newline behaviors, whereas this has changed and now it only works on Windows if you output &lt;code&gt;\r\n&lt;/code&gt;. Our cross-platform compatibility has been reduced.&lt;/p&gt;
&lt;h3&gt;Reproduction Steps&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a new console app (&lt;code&gt;dotnet new console&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Change the contents of &lt;code&gt;Program.cs&lt;/code&gt; to be &lt;code&gt;Console.WriteLine(&amp;quot;Line1\nLine2&amp;quot;);&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run it on Windows in either the &lt;em&gt;Terminal&lt;/em&gt; app or the old-school console (i.e., &lt;code&gt;cmd.exe&lt;/code&gt;) using the command &lt;code&gt;dotnet run&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;In 7.0 preview 7 (I tried 7.0.100-preview.7.22377.5) and earlier, the output is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Line1
Line2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the expected and desired output&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;Starting from 7.0 RC1 and still happening with RC2 builds, you get:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Line1
     Line2
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Regression?&lt;/h3&gt;
&lt;p&gt;Yes, worked in 7.0.100-preview.7.22377.5&lt;/p&gt;
&lt;h3&gt;Known Workarounds&lt;/h3&gt;
&lt;p&gt;None&lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;Windows 11 x64
Works in 7.0.100-preview.7.22377.5
Fails in 7.0.100-rc.1.22431.12 and 7.0.100-rc.2.22463.6&lt;/p&gt;
&lt;h3&gt;Other information&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 08:55:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28113</guid>
      <link>https://github.com/dotnet/sdk/issues/28113</link>
      <title>Issue: Debugging not working with self-contained single file .NET6 assemblies - @Pyrdacor</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;When I publish a .NET assembly with the following command, there are no debug symbols available in VS2022. And trying to load the PDB manually leads to &amp;quot;image mismatch&amp;quot; errors or &amp;quot;can't find matching debug symbols&amp;quot;.&lt;/p&gt;
&lt;p&gt;This is the publish command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet publish -c Debug ./path/to/project.csproj -p:PublishSingleFile=true -p:IncludeAllContentForSelfExtract=true -r win-x64 --nologo --self-contained -o ./path/to/output&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;However if I set self-contained to false, it just works: &lt;code&gt;--self-contained=false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The problem occurs regardless if the debug symbols are embedded or stored as a PDB file.&lt;/p&gt;
&lt;p&gt;I hope this is the right place. I know VS2022 is the one which can't load the debug symbols but I am pretty sure it's about the debug symbol creation/connection and not the loading. But I might be wrong.&lt;/p&gt;
&lt;p&gt;Others seem to have the same problems. Look here: https://stackoverflow.com/questions/64897623/no-symbols-when-attaching-to-net-core-program-single-file/73796666#73796666.&lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;dotnet 6 (but seems to be a problem since netcore already)&lt;/li&gt;
&lt;li&gt;tested on Win7 x64 but I guess the OS doesn't matter here&lt;/li&gt;
&lt;li&gt;x64 in this case&lt;/li&gt;
&lt;li&gt;Debug config of course&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 07:22:54 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28063</guid>
      <link>https://github.com/dotnet/sdk/issues/28063</link>
      <title>Issue: The DynamicMethod.CreateDelegate throws InvalidProgramException - @alexdi220</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;Hello, we've faced a critical issue with our emitted code in the .Net 7. It works for .Net Framework and .Net 6 - you can change the target framework of my sample to .Net 6 for checking.
The call DynamicMethod.CreateDelegate throws InvalidProgramException &lt;em&gt;Common Language Runtime detected an invalid program&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;It's a showstopper, so our customers can't move to .Net 7&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;To Reproduce&lt;/h3&gt;
&lt;p&gt;I've attached a sample project. Please take a look at this. The code is just for a sample but reproduces the test case we caught.
The &lt;code&gt;Helper&lt;/code&gt; class does some emits and creates a delegate via &lt;code&gt;DynamicMethod.CreateDelegate&lt;/code&gt;. The main thing is that it works for 2 parameters but not for 3 (use the argument &lt;code&gt;useThreeParams&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/sdk/files/9613775/ConsoleApp1.zip"&gt;ConsoleApp1.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Program.cs&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using ConsoleApp1;

//var d = Helper.CreateDelegate(false); // works
var d = Helper.CreateDelegate(true); // throws an exception

Console.WriteLine(d.GetHashCode());
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Helper.cs&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    internal static class Helper {
        static MethodInfo IEnumerable_GetEnumerator = typeof(IEnumerable).GetMethod(&amp;quot;GetEnumerator&amp;quot;);
        static MethodInfo IEnumerator_MoveNext = typeof(IEnumerator).GetMethod(&amp;quot;MoveNext&amp;quot;);
        static MethodInfo IEnumerator_get_Current = typeof(IEnumerator).GetMethod(&amp;quot;get_Current&amp;quot;);


        public static Delegate CreateDelegate(bool useThreeParams) {

            var delegateReturnType = typeof(object);
            var delegateParameters = new[] { typeof(IEnumerable) };
            var targetType = typeof(TestClass);
            var delegateType = typeof(Func&amp;lt;IEnumerable, object&amp;gt;);
            var ctorParameters = useThreeParams
                ? new[] { typeof(object), typeof(object), typeof(object) }
                : new[] { typeof(object), typeof(object) };
            var ctorInfo = targetType.GetConstructors(BindingFlags.Public | BindingFlags.Instance)
                .Where(x =&amp;gt; x.GetParameters().Length == ctorParameters.Length)
                .First();

            var dm = new DynamicMethod(string.Empty, delegateReturnType, delegateParameters, true);
            var ig = dm.GetILGenerator();
            var enumeratorVariable = ig.DeclareLocal(typeof(IEnumerator));

            ig.Emit(OpCodes.Ldarg_0);
            ig.Emit(OpCodes.Callvirt, IEnumerable_GetEnumerator);
            ig.Emit(OpCodes.Stloc, enumeratorVariable);
            for (int i = 0; i &amp;lt; ctorParameters.Length; i++) {
                ig.Emit(OpCodes.Ldloc, enumeratorVariable);
                ig.Emit(OpCodes.Callvirt, IEnumerator_MoveNext);
                ig.Emit(OpCodes.Ldc_I4_0);
                ig.Emit(OpCodes.Ceq);
                ig.Emit(OpCodes.Brfalse_S, (sbyte)(OpCodes.Newobj.Size + sizeof(int) + OpCodes.Throw.Size));
                ig.ThrowException(typeof(ArgumentOutOfRangeException));
                ig.Emit(OpCodes.Ldloc, enumeratorVariable);
                ig.Emit(OpCodes.Callvirt, IEnumerator_get_Current);
            }

            ig.Emit(OpCodes.Newobj, ctorInfo);
            ig.Emit(OpCodes.Castclass, delegateReturnType);
            ig.Emit(OpCodes.Ret);

            return dm.CreateDelegate(delegateType);
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Exceptions (if any)&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/47348109/191432802-6ea865d8-1d6c-4f4b-b1f4-e18f53963bab.png" alt="image" /&gt;&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio 2022\2022 Preview&lt;/li&gt;
&lt;li&gt;donnet info&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-.NET"&gt; Version:   7.0.100-rc.1.22431.12
 Commit:    f1cf61e1c0

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.22000
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\7.0.100-rc.1.22431.12\

Host:
  Version:      7.0.0-rc.1.22426.10
  Architecture: x64
  Commit:       06aceb7015

.NET SDKs installed:
  6.0.100 [C:\Program Files\dotnet\sdk]
  6.0.400 [C:\Program Files\dotnet\sdk]
  7.0.100-preview.7.22377.5 [C:\Program Files\dotnet\sdk]
  7.0.100-rc.1.22431.12 [C:\Program Files\dotnet\sdk]

.NET runtimes installed:
  Microsoft.AspNetCore.App 6.0.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 6.0.8 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 7.0.0-preview.7.22376.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 7.0.0-rc.1.22427.2 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 6.0.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 6.0.8 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 7.0.0-preview.7.22375.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 7.0.0-rc.1.22426.10 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 6.0.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 6.0.8 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 7.0.0-preview.7.22377.1 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
  Microsoft.WindowsDesktop.App 7.0.0-rc.1.22427.1 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]

Other architectures found:
  x86   [C:\Program Files (x86)\dotnet]

Environment variables:
  Not set

global.json file:
  Not found
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 06:56:15 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28058</guid>
      <link>https://github.com/dotnet/sdk/issues/28058</link>
      <title>Issue: Invalid and unknown locale warnings for package assets should be gated on TFM - @baronfel</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;In https://github.com/dotnet/sdk/pull/26729 we introduced a new warning to .NET 7 SDKs, but we did not gate that warning on a TFM change. This means that users that work on case-insensitive file systems are very likely to start hitting the new warning on an SDK update, instead of a TFM update. We want to not do that so that we encourage folks to update SDKs as soon as they come out.&lt;/p&gt;
</description>
      <pubDate>Tue, 20 Sep 2022 22:14:18 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28055</guid>
      <link>https://github.com/dotnet/sdk/issues/28055</link>
      <title>Issue: Opt-in for providing basic Hardware Information - @tannergooding</title>
      <description>&lt;p&gt;As per the discussion that started on https://twitter.com/xoofx/status/1572286062315311104?s=20&amp;amp;t=vlg_eVRuF3LDg3C-4_W-og&lt;/p&gt;
&lt;p&gt;It might be beneficial for there to be an opt-in for users to provide basic hardware information as part of telemetry collection. It may likewise be beneficial for .NET to do semi-annual surveys in which users can self-report this information to help gather additional datapoints.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://store.steampowered.com/hwsurvey"&gt;Steam Hardware Survey&lt;/a&gt; publishes monthly and contains a wealth of information. However, that information is really centered around the gaming industry and doesn't necessarily correlate to .NET developers.&lt;/p&gt;
&lt;p&gt;Almost all of the metrics that Steam collects could be beneficial to help drive decisions both for .NET itself and for the community developing on .NET. Thus I would suggest that the data be provided as available alongside the existing telemetry: https://dotnet.microsoft.com/en-us/platform/telemetry. It might be further beneficial for the hardware data to be represented in a more friendly user manner like it is for Steam.&lt;/p&gt;
&lt;p&gt;For the purposes of the runtime, the most interesting information is likely:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CPU Count (both Physical and Logical)&lt;/li&gt;
&lt;li&gt;CPU Features (namely which optional ISAs are supported)&lt;/li&gt;
&lt;li&gt;CPU Cache Sizes (I don't believe Steam collects this one)&lt;/li&gt;
&lt;li&gt;CPU Speed and RAM amount may also be good information&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These can be used to better tune where optimizations are focused and help further fine-tune specific scenarios like thread-pool sizes and concurrency primitives.&lt;/p&gt;
</description>
      <pubDate>Tue, 20 Sep 2022 20:36:13 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28052</guid>
      <link>https://github.com/dotnet/sdk/issues/28052</link>
      <title>Issue: Improve PR build reliability from Razor file copy - @marcpopMSFT</title>
      <description>&lt;p&gt;&lt;a href="https://dev.azure.com/dnceng-public/public/_build/results?buildId=22372&amp;amp;view=logs&amp;amp;j=adc369b2-ee17-52c3-72b2-7129c9e8cda1&amp;amp;t=78acff75-e3a6-582d-ecc2-9f0bf523e0bc&amp;amp;s=6884a131-87da-5381-61f3-d7acc3b91d76"&gt;this build&lt;/a&gt; has some failures in the Razor build because of a file copy. From looking at the code and binlong, Daniel and I think it's because that csproj multi-targets AND has a copy step that copies to the same folder.&lt;/p&gt;
&lt;p&gt;So the two different framework builds run in parallel but that copy step overwrites (sometimes locking the files based on timing).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fix options&lt;/strong&gt;
Copy the files into a TFM specific folder
Only do the copy in one of the TFM legs (you'd need to determine if the other TFM would require those files to be present)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Failing target&lt;/strong&gt;
https://github.com/dotnet/sdk/blob/bcfe2a350a4d161d3cac953c417159dbabcc3432/src/RazorSdk/Tasks/Microsoft.NET.Sdk.Razor.Tasks.csproj#L107&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Failure details&lt;/strong&gt;
D:\a\1\s\src\RazorSdk\Tasks\Microsoft.NET.Sdk.Razor.Tasks.csproj(107,5): error MSB3026: Could not copy &amp;quot;D:\a\1\s\src\RazorSdk\Targets\Microsoft.NET.Sdk.Razor.Component.targets&amp;quot; to &amp;quot;D:\a\1\s\artifacts\bin\Debug\Sdks\Microsoft.NET.Sdk.Razor\targets\Microsoft.NET.Sdk.Razor.Component.targets&amp;quot;. Beginning retry 1 in 1000ms. The process cannot access the file 'D:\a\1\s\artifacts\bin\Debug\Sdks\Microsoft.NET.Sdk.Razor\targets\Microsoft.NET.Sdk.Razor.Component.targets' because it is being used by another process. [TargetFramework=net7.0]&lt;/p&gt;
&lt;p&gt;##[error]src\RazorSdk\Tasks\Microsoft.NET.Sdk.Razor.Tasks.csproj(107,5): error MSB3026: (NETCORE_ENGINEERING_TELEMETRY=Build) Could not copy &amp;quot;D:\a\1\s\src\RazorSdk\Targets\Microsoft.NET.Sdk.Razor.Component.targets&amp;quot; to &amp;quot;D:\a\1\s\artifacts\bin\Debug\Sdks\Microsoft.NET.Sdk.Razor\targets\Microsoft.NET.Sdk.Razor.Component.targets&amp;quot;. Beginning retry 1 in 1000ms. The process cannot access the file 'D:\a\1\s\artifacts\bin\Debug\Sdks\Microsoft.NET.Sdk.Razor\targets\Microsoft.NET.Sdk.Razor.Component.targets' because it is being used by another process.&lt;/p&gt;
</description>
      <pubDate>Tue, 20 Sep 2022 19:09:20 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/sdk/issues/28048</guid>
      <link>https://github.com/dotnet/sdk/issues/28048</link>
      <title>Issue: Code Coverage for RuntimeIdentifiers - @nagilson</title>
      <description>&lt;p&gt;Based on https://github.com/dotnet/sdk/issues/27985 which was resolved by https://github.com/dotnet/sdk/pull/28006, it would be helpful if we had a regression test with projects that leverage RuntimeIdentifiers but not a RuntimeIdentifier. In addition, we may be able to provide a better patch in the long-term now that the other builds are presumably unblocked. In discussion with @dsplaisted, we should likely move it to another task/target.&lt;/p&gt;
</description>
      <pubDate>Tue, 20 Sep 2022 18:16:14 Z</pubDate>
    </item>
  </channel>
</rss>