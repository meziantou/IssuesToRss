<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dotnet/msbuild Issues</title>
    <description>Issues from https://github.com/dotnet/msbuild, generated by https://github.com/meziantou/IssuesToRss/</description>
    <managingEditor>meziantousite@outlook.com</managingEditor>
    <ttl>60</ttl>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/8003</guid>
      <link>https://github.com/dotnet/msbuild/issues/8003</link>
      <title>Issue: Could not copy the file "XXXX\apphost.exe" because it was not found - @MichalStrehovsky</title>
      <description>&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;Running dotnet publish after deleting obj and bin directories fails until I taskkill the dotnet process.&lt;/p&gt;
&lt;h3&gt;Steps to Reproduce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Download the latest SDK installer build (I'm using 7.0.100-rtm.22470.23)&lt;/li&gt;
&lt;li&gt;Unzip it to e.g. C:\dotnet7 and then run the following exact steps:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;cd c:\dotnet7
set path=%cd%;%path%
dotnet new console -o test
cd test
dotnet publish -r win-x64 -c Release
rmdir /S /Q obj
rmdir /S /Q bin
dotnet publish -r win-x64 -c Release
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected Behavior&lt;/h3&gt;
&lt;p&gt;The second publish succeeds, same as the first.&lt;/p&gt;
&lt;h3&gt;Actual Behavior&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;C:\dotnet7\sdk\7.0.100-rtm.22470.23\Microsoft.Common.CurrentVersion.targets(5145,5): error MSB3030: Could not copy the
file &amp;quot;C:\dotnet7\test\obj\Release\net7.0\win-x64\apphost.exe&amp;quot; because it was not found. [C:\dotnet7\test\test.csproj]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;p&gt;Something with the dotnet.exe process that hangs around after the first publish. If I &lt;code&gt;taskkill /im dotnet.exe /f&lt;/code&gt; before the second publish, it works. It took a while to figure that out.&lt;/p&gt;
&lt;p&gt;Here's the binlog from the failed attempt:
&lt;a href="https://github.com/dotnet/msbuild/files/9630415/msbuild.zip"&gt;msbuild.zip&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Versions &amp;amp; Configurations&lt;/h3&gt;
&lt;p&gt;7.0.100-rtm.22470.23&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 02:37:33 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7996</guid>
      <link>https://github.com/dotnet/msbuild/issues/7996</link>
      <title>Issue: Help Make MSBuild Better! - @BenVillalobos</title>
      <description>&lt;p&gt;If you've ever struggled with using MSBuild, we want to hear from YOU!&lt;/p&gt;
&lt;p&gt;Prioritizing &lt;strong&gt;over one-thousand&lt;/strong&gt; issues is a never-ending challenge. We're hoping this survey will give us a big picture look at what
developers want and need from us.&lt;/p&gt;
&lt;p&gt;Help us out by &lt;a href="https://forms.office.com/r/Rghh3w3tnY"&gt;&lt;strong&gt;taking this 4 minute survey&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Thanks ❤️&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 19:00:03 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7995</guid>
      <link>https://github.com/dotnet/msbuild/issues/7995</link>
      <title>Issue: Update vs to Version 17.4.0 Preview 2.0 from PREVIEW 1 cause errors in publish worker service - @danies8</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;I updated vs to Version 17.4.0 Preview 2.0 from PREVIEW 1 cause errors
When I publish worker service i got error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Build started...
1&amp;gt;------ Build started: Project: AutomationClient.API, Configuration: Release Any CPU ------
2&amp;gt;------ Build started: Project: AutomationClient.Shared, Configuration: Release Any CPU ------
3&amp;gt;------ Publish started: Project: AutomationClient.WorkerService, Configuration: Release Any CPU ------
3&amp;gt;Determining projects to restore...
3&amp;gt;Restored C:\Users\danis\Desktop\1\AutomationClient\AutomationClient.Shared\AutomationClient.Shared.csproj (in 795 ms).
3&amp;gt;Restored C:\Users\danis\Desktop\1\AutomationClient\AutomationClient.API\AutomationClient.API.csproj (in 795 ms).
3&amp;gt;1 of 3 projects are up-to-date for restore.
3&amp;gt;C:\Program Files\Microsoft Visual Studio\2022\Preview\MSBuild\Current\Bin\Roslyn\csc.exe /noconfig /unsafe- /checked- /nowarn:1701,1702,1701,1702,2008 /fullpaths /nostdlib+ /platform:x64 /errorreport:prompt /warn:6 /define:TRACE;RELEASE;NET;NET6_0;NETCOREAPP;NET5_0_OR_GREATER;NET6_0_OR_GREATER;NETCOREAPP1_0_OR_GREATER;NETCOREAPP1_1_OR_GREATER;NETCOREAPP2_0_OR_GREATER;NETCOREAPP2_1_OR_GREATER;NETCOREAPP2_2_OR_GREATER;NETCOREAPP3_0_OR_GREATER;NETCOREAPP3_1_OR_GREATER /errorendlocation /preferreduilang:en-US /highentropyva+ /nullable:enable /reference:C:\Users\danis.nuget\packages\autofac\6.3.0\lib\net5.0\Autofac.dll /reference:C:\Users\danis\Desktop\1\AutomationClient\AutomationClient.API\obj\Release\net6.0\win-x64\ref\AutomationClient.API.dll /reference:C:\Users\danis\Desktop\1\AutomationClient\AutomationClient.Shared\obj\Release\net6.0\win-x64\ref\AutomationClient.Shared.dll /reference:C:\Users\danis.nuget\packages\componentpro.common\7.2.238\lib\netstandard1.5\ComponentPro.Common.NetCore.dll /reference:C:\Users\danis.nuget\packages\componentpro.filesystem\7.2.238\lib\netstandard1.5\ComponentPro.FileSystem.NetCore.dll /reference:C:\Users\danis.nuget\packages\componentpro.ftp\7.2.238\lib\netstandard1.5\ComponentPro.Ftp.NetCore.dll /reference:C:\Users\danis.nuget\packages\componentpro.network\7.2.238\lib\netstandard1.5\ComponentPro.Network.NetCore.dll /reference:C:\Users\danis.nuget\packages\componentpro.sftp\7.2.238\lib\netstandard1.5\ComponentPro.Sftp.NetCore.dll /reference:C:\Users\danis.nuget\packages\dnsclient\1.4.0\lib\netstandard2.1\DnsClient.dll /reference:C:\Users\danis.nuget\packages\log4net\2.0.14\lib\netstandard2.0\log4net.dll /reference:C:\Users\danis.nuget\packages\microsoft.bcl.asyncinterfaces\5.0.0\lib\netstandard2.1\Microsoft.Bcl.AsyncInterfaces.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\Microsoft.CSharp.dll&amp;quot; /reference:C:\Users\danis.nuget\packages\microsoft.extensions.configuration.abstractions\6.0.0\lib\netstandard2.0\Microsoft.Extensions.Configuration.Abstractions.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.configuration.binder\6.0.0\lib\netstandard2.0\Microsoft.Extensions.Configuration.Binder.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.configuration.commandline\6.0.0\lib\netstandard2.0\Microsoft.Extensions.Configuration.CommandLine.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.configuration\6.0.0\lib\netstandard2.0\Microsoft.Extensions.Configuration.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.configuration.environmentvariables\6.0.1\lib\netstandard2.0\Microsoft.Extensions.Configuration.EnvironmentVariables.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.configuration.fileextensions\6.0.0\lib\netstandard2.0\Microsoft.Extensions.Configuration.FileExtensions.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.configuration.json\6.0.0\lib\netstandard2.1\Microsoft.Extensions.Configuration.Json.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.configuration.usersecrets\6.0.1\lib\netstandard2.0\Microsoft.Extensions.Configuration.UserSecrets.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.dependencyinjection.abstractions\6.0.0\lib\net6.0\Microsoft.Extensions.DependencyInjection.Abstractions.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.dependencyinjection\6.0.0\lib\net6.0\Microsoft.Extensions.DependencyInjection.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.fileproviders.abstractions\6.0.0\lib\net6.0\Microsoft.Extensions.FileProviders.Abstractions.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.fileproviders.physical\6.0.0\lib\net6.0\Microsoft.Extensions.FileProviders.Physical.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.filesystemglobbing\6.0.0\lib\net6.0\Microsoft.Extensions.FileSystemGlobbing.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.hosting.abstractions\6.0.0\lib\netstandard2.1\Microsoft.Extensions.Hosting.Abstractions.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.hosting\6.0.1\lib\net6.0\Microsoft.Extensions.Hosting.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.hosting.systemd\5.0.1\lib\netstandard2.1\Microsoft.Extensions.Hosting.Systemd.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.hosting.windowsservices\5.0.1\lib\netstandard2.1\Microsoft.Extensions.Hosting.WindowsServices.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.logging.abstractions\6.0.0\lib\net6.0\Microsoft.Extensions.Logging.Abstractions.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.logging.configuration\6.0.0\lib\netstandard2.0\Microsoft.Extensions.Logging.Configuration.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.logging.console\6.0.0\lib\net6.0\Microsoft.Extensions.Logging.Console.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.logging.debug\6.0.0\lib\netstandard2.0\Microsoft.Extensions.Logging.Debug.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.logging\6.0.0\lib\netstandard2.1\Microsoft.Extensions.Logging.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.logging.eventlog\6.0.0\lib\netstandard2.0\Microsoft.Extensions.Logging.EventLog.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.logging.eventsource\6.0.0\lib\net6.0\Microsoft.Extensions.Logging.EventSource.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.logging.log4net.aspnetcore\6.1.0\lib\net6.0\Microsoft.Extensions.Logging.Log4Net.AspNetCore.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.objectpool\5.0.10\lib\net5.0\Microsoft.Extensions.ObjectPool.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.options.configurationextensions\6.0.0\lib\netstandard2.0\Microsoft.Extensions.Options.ConfigurationExtensions.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.options\6.0.0\lib\netstandard2.1\Microsoft.Extensions.Options.dll /reference:C:\Users\danis.nuget\packages\microsoft.extensions.primitives\6.0.0\lib\net6.0\Microsoft.Extensions.Primitives.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\Microsoft.VisualBasic.Core.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\Microsoft.VisualBasic.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\Microsoft.Win32.Primitives.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\Microsoft.Win32.Registry.dll&amp;quot; /reference:C:\Users\danis.nuget\packages\mongodb.bson\2.14.1\lib\netstandard2.1\MongoDB.Bson.dll /reference:C:\Users\danis.nuget\packages\mongodb.driver.core\2.14.1\lib\netstandard2.1\MongoDB.Driver.Core.dll /reference:C:\Users\danis.nuget\packages\mongodb.driver\2.14.1\lib\netstandard2.1\MongoDB.Driver.dll /reference:C:\Users\danis.nuget\packages\mongocsharpdriver\2.14.1\lib\netstandard2.1\MongoDB.Driver.Legacy.dll /reference:C:\Users\danis.nuget\packages\mongodb.libmongocrypt\1.3.0\lib\netstandard2.1\MongoDB.Libmongocrypt.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\mscorlib.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\netstandard.dll&amp;quot; /reference:C:\Users\danis.nuget\packages\newtonsoft.json\13.0.1\lib\netstandard2.0\Newtonsoft.Json.dll /reference:C:\Users\danis.nuget\packages\quartz\3.3.3\lib\netstandard2.0\Quartz.dll /reference:C:\Users\danis.nuget\packages\sharpcompress\0.30.1\lib\net5.0\SharpCompress.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.AppContext.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Buffers.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Collections.Concurrent.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Collections.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Collections.Immutable.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Collections.NonGeneric.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Collections.Specialized.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.ComponentModel.Annotations.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.ComponentModel.DataAnnotations.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.ComponentModel.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.ComponentModel.EventBasedAsync.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.ComponentModel.Primitives.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.ComponentModel.TypeConverter.dll&amp;quot; /reference:C:\Users\danis.nuget\packages\system.configuration.configurationmanager\4.7.0\ref\netstandard2.0\System.Configuration.ConfigurationManager.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Configuration.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Console.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Core.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Data.Common.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Data.DataSetExtensions.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Data.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Diagnostics.Contracts.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Diagnostics.Debug.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Diagnostics.DiagnosticSource.dll&amp;quot; /reference:C:\Users\danis.nuget\packages\system.diagnostics.eventlog\6.0.0\lib\net6.0\System.Diagnostics.EventLog.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Diagnostics.FileVersionInfo.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Diagnostics.Process.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Diagnostics.StackTrace.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Diagnostics.TextWriterTraceListener.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Diagnostics.Tools.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Diagnostics.TraceSource.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Diagnostics.Tracing.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.dll&amp;quot; /reference:C:\Users\danis.nuget\packages\system.drawing.common\5.0.0\ref\netcoreapp3.0\System.Drawing.Common.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Drawing.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Drawing.Primitives.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Dynamic.Runtime.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Formats.Asn1.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Globalization.Calendars.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Globalization.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Globalization.Extensions.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.Compression.Brotli.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.Compression.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.Compression.FileSystem.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.Compression.ZipFile.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.FileSystem.AccessControl.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.FileSystem.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.FileSystem.DriveInfo.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.FileSystem.Primitives.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.FileSystem.Watcher.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.IsolatedStorage.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.MemoryMappedFiles.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.Pipes.AccessControl.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.Pipes.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.IO.UnmanagedMemoryStream.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Linq.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Linq.Expressions.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Linq.Parallel.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Linq.Queryable.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Memory.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.Http.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.Http.Json.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.HttpListener.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.Mail.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.NameResolution.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.NetworkInformation.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.Ping.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.Primitives.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.Requests.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.Security.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.ServicePoint.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.Sockets.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.WebClient.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.WebHeaderCollection.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.WebProxy.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.WebSockets.Client.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Net.WebSockets.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Numerics.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Numerics.Vectors.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.ObjectModel.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Reflection.DispatchProxy.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Reflection.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Reflection.Emit.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Reflection.Emit.ILGeneration.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Reflection.Emit.Lightweight.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Reflection.Extensions.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Reflection.Metadata.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Reflection.Primitives.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Reflection.TypeExtensions.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Resources.Reader.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Resources.ResourceManager.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Resources.Writer.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.CompilerServices.Unsafe.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.CompilerServices.VisualC.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.Extensions.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.Handles.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.InteropServices.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.InteropServices.RuntimeInformation.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.Intrinsics.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.Loader.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.Numerics.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.Serialization.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.Serialization.Formatters.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.Serialization.Json.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.Serialization.Primitives.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Runtime.Serialization.Xml.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.AccessControl.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.Claims.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.Cryptography.Algorithms.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.Cryptography.Cng.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.Cryptography.Csp.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.Cryptography.Encoding.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.Cryptography.OpenSsl.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.Cryptography.Primitives.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.Cryptography.X509Certificates.dll&amp;quot; /reference:C:\Users\danis.nuget\packages\system.security.cryptography.xml\5.0.0\ref\netstandard2.0\System.Security.Cryptography.Xml.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.dll&amp;quot; /reference:C:\Users\danis.nuget\packages\system.security.permissions\5.0.0\ref\net5.0\System.Security.Permissions.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.Principal.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.Principal.Windows.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Security.SecureString.dll&amp;quot; /reference:C:\Users\danis.nuget\packages\system.servicemodel.primitives\4.9.0\ref\net6.0\System.ServiceModel.dll /reference:C:\Users\danis.nuget\packages\system.servicemodel.primitives\4.9.0\ref\net6.0\System.ServiceModel.Primitives.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.ServiceModel.Web.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.ServiceProcess.dll&amp;quot; /reference:C:\Users\danis.nuget\packages\system.serviceprocess.servicecontroller\6.0.0\lib\net6.0\System.ServiceProcess.ServiceController.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Text.Encoding.CodePages.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Text.Encoding.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Text.Encoding.Extensions.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Text.Encodings.Web.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Text.Json.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Text.RegularExpressions.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Threading.Channels.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Threading.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Threading.Overlapped.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Threading.Tasks.Dataflow.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Threading.Tasks.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Threading.Tasks.Extensions.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Threading.Tasks.Parallel.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Threading.Thread.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Threading.ThreadPool.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Threading.Timer.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Transactions.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Transactions.Local.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.ValueTuple.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Web.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Web.HttpUtility.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Windows.dll&amp;quot; /reference:C:\Users\danis.nuget\packages\system.windows.extensions\5.0.0\ref\netcoreapp3.0\System.Windows.Extensions.dll /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Xml.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Xml.Linq.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Xml.ReaderWriter.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Xml.Serialization.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Xml.XDocument.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Xml.XmlDocument.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Xml.XmlSerializer.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Xml.XPath.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\System.Xml.XPath.XDocument.dll&amp;quot; /reference:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\ref\net6.0\WindowsBase.dll&amp;quot; /debug+ /debug:portable /filealign:512 /optimize+ /out:obj\Release\net6.0\win-x64\AutomationClient.WorkerService.dll /refout:obj\Release\net6.0\win-x64\refint\AutomationClient.WorkerService.dll /target:exe /warnaserror- /utf8output /deterministic+ /langversion:10.0 /analyzerconfig:obj\Release\net6.0\win-x64\AutomationClient.WorkerService.GeneratedMSBuildEditorConfig.editorconfig /analyzerconfig:&amp;quot;C:\Program Files\dotnet\sdk\6.0.400\Sdks\Microsoft.NET.Sdk\analyzers\build\config\analysislevel_6_default.editorconfig&amp;quot; /analyzer:&amp;quot;C:\Program Files\dotnet\sdk\6.0.400\Sdks\Microsoft.NET.Sdk\targets..\analyzers\Microsoft.CodeAnalysis.CSharp.NetAnalyzers.dll&amp;quot; /analyzer:&amp;quot;C:\Program Files\dotnet\sdk\6.0.400\Sdks\Microsoft.NET.Sdk\targets..\analyzers\Microsoft.CodeAnalysis.NetAnalyzers.dll&amp;quot; /analyzer:C:\Users\danis.nuget\packages\microsoft.extensions.logging.abstractions\6.0.0\analyzers\dotnet\roslyn4.0\cs\Microsoft.Extensions.Logging.Generators.dll /analyzer:&amp;quot;C:\Program Files\dotnet\packs\Microsoft.NETCore.App.Ref\6.0.8\analyzers/dotnet/cs/System.Text.Json.SourceGeneration.dll&amp;quot; Program.cs Worker.cs WorkerHelper.cs obj\Release\net6.0\win-x64\AutomationClient.WorkerService.GlobalUsings.g.cs &amp;quot;obj\Release\net6.0\win-x64.NETCoreApp,Version=v6.0.AssemblyAttributes.cs&amp;quot; obj\Release\net6.0\win-x64\AutomationClient.WorkerService.AssemblyInfo.cs /warnaserror+:NU1605
3&amp;gt;Metadata file 'C:\Users\danis\Desktop\1\AutomationClient\AutomationClient.API\obj\Release\net6.0\win-x64\ref\AutomationClient.API.dll' could not be found
3&amp;gt;Metadata file 'C:\Users\danis\Desktop\1\AutomationClient\AutomationClient.Shared\obj\Release\net6.0\win-x64\ref\AutomationClient.Shared.dll' could not be found
========== Build: 2 succeeded, 0 failed, 1 up-to-date, 0 skipped ==========
========== Elapsed 00:06.733 ==========
========== Publish: 0 succeeded, 1 failed, 0 skipped ==========
========== Elapsed 00:06.733 ==========
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Added screencast:&lt;/p&gt;
&lt;p&gt;https://user-images.githubusercontent.com/1079689/191520498-2283a492-0327-4fd0-b39f-2c03609b5f24.mp4&lt;/p&gt;
&lt;h3&gt;Reproduction Steps&lt;/h3&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;publish correctly the service.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;I attached video and error.&lt;/p&gt;
&lt;h3&gt;Regression?&lt;/h3&gt;
&lt;p&gt;Yes it work before upgrade.&lt;/p&gt;
&lt;h3&gt;Known Workarounds&lt;/h3&gt;
&lt;p&gt;See video and error.&lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;.....&lt;/p&gt;
&lt;h3&gt;Other information&lt;/h3&gt;
&lt;p&gt;....&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 13:46:50 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7994</guid>
      <link>https://github.com/dotnet/msbuild/issues/7994</link>
      <title>Issue: -targets flag doesn't list targets, seems to be trying to do a complete compile - @DerekSMorin</title>
      <description>&lt;p&gt;The -targets flag doesn't list targets, seems to be trying to do a complete compile&lt;/p&gt;
&lt;p&gt;msbuild Reliability.sln -targets&lt;/p&gt;
&lt;p&gt;Expect a list of targets, but it starts compiling everything.&lt;/p&gt;
&lt;p&gt;MSBuild version 17.3.1+2badb37d1 for .NET Framework
17.3.1.41501&lt;/p&gt;
&lt;p&gt;I'm talking about this flag:&lt;/p&gt;
&lt;p&gt;-targets[:file]
Prints a list of available targets without executing the
actual build process. By default the output is written to
the console window. If the path to an output file
is provided that will be used instead.
(Short form: -ts)
Example:
-ts:out.txt&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 13:04:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7993</guid>
      <link>https://github.com/dotnet/msbuild/issues/7993</link>
      <title>Issue: MSBuild Server fallback mechanism doesn't work when Mutex throws exception - @MichalPavlik</title>
      <description>&lt;p&gt;The &lt;code&gt;MSBuildClientApp.TryLaunchServer&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt; in case server node couldn't be started (and build is then done without server). However, there was reported issue, when mutex logic failed with unhandled IOException.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unhandled exception: System.IO.IOException: Connection timed out : 'Global\msbuild-server-launch-BSVTwDRbqiZ8pAK9bysU7lvA2UC4yhR_+Bc8sTbm8Jw'
         at System.Threading.Mutex.CreateMutexCore(Boolean initiallyOwned, String name, Boolean&amp;amp; createdNew)
         at Microsoft.Build.Experimental.MSBuildClient.TryLaunchServer()
         at Microsoft.Build.Experimental.MSBuildClient.Execute(CancellationToken cancellationToken)
         at Microsoft.Build.CommandLine.MSBuildClientApp.Execute(String[] commandLine, String msbuildLocation, CancellationToken cancellationToken)
         at Microsoft.Build.CommandLine.MSBuildApp.Main(String[] args)
         at Microsoft.DotNet.Cli.Utils.MSBuildForwardingAppWithoutLogging.ExecuteInProc(String[] arguments)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hotfix should be easy - insert mutex logic to existing &lt;code&gt;try/catch&lt;/code&gt; block. We should also find out why is it time-outing.&lt;/p&gt;
&lt;p&gt;https://github.com/dotnet/runtime/issues/75391
https://github.com/dotnet/runtime/issues/75867&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 08:58:54 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7988</guid>
      <link>https://github.com/dotnet/msbuild/issues/7988</link>
      <title>Issue: Bootstrap MSBuild unable to build console projects: unable to resolve workload SDKs - @KirillOsenkov</title>
      <description>&lt;p&gt;Prep a bootstrap MSBuild layout using &lt;code&gt;build /p:CreateBootstrap=true&lt;/code&gt;
or download the one I used from:
https://kirillosenkovfiles.blob.core.windows.net/kirillosenkovblob/msbuild.17.3.1.zip&lt;/p&gt;
&lt;p&gt;Be on an empty Windows machine, such as Windows Sandbox VM&lt;/p&gt;
&lt;p&gt;Create and build a new C# console app targeting net472&lt;/p&gt;
&lt;p&gt;Expected: builds successfully&lt;/p&gt;
&lt;p&gt;Actual:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Build FAILED.

  C:\Users\WDAGUtilityAccount\AppData\Local\Bootstrap\MSBuild\Sdks\Microsoft.NET.Sdk\targets\Mic
rosoft.NET.Sdk.ImportWorkloads.props(14,3): error : Unable to locate the .NET SDK. Check that it is installed and that
the version specified in global.json (if any) matches the installed version.
  C:\Users\WDAGUtilityAccount\AppData\Local\Bootstrap\MSBuild\Sdks\Microsoft.NET.Sdk\targets\Mic
rosoft.NET.Sdk.ImportWorkloads.targets(16,3): error : Unable to locate the .NET SDK. Check that it is installed and tha
t the version specified in global.json (if any) matches the installed version.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two SDKs it can't resolve:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Resolving SDK 'Microsoft.NET.SDK.WorkloadAutoImportPropsLocator'...
Resolving SDK 'Microsoft.NET.SDK.WorkloadManifestTargetsLocator'...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First off, the error messages are inadequate - they don't mention the SDK reference that failed to resolve.&lt;/p&gt;
&lt;p&gt;Both of these are supposed to resolve from:
https://github.com/dotnet/sdk/blob/3dc5e528fffc050cace4cff8bc32954eb33f0455/src/Resolvers/Microsoft.NET.Sdk.WorkloadMSBuildSdkResolver/CachingWorkloadResolver.cs#L121-L136&lt;/p&gt;
&lt;p&gt;However on an empty machine with just the xcopied MSBuild something goes awry apparently and it fails with the obscure messages above.&lt;/p&gt;
&lt;p&gt;Until recently, the bootstrap MSBuild was xcopyable, meaning it used to build desktop-targeting projects on a completely empty Windows machine.&lt;/p&gt;
&lt;p&gt;At some point this regressed. It is crucial that we continue to be able to have xcopyable MSBuild and we should move towards making MSBuild more portable, not less.&lt;/p&gt;
</description>
      <pubDate>Tue, 20 Sep 2022 03:08:10 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7987</guid>
      <link>https://github.com/dotnet/msbuild/issues/7987</link>
      <title>Issue: PublishDir global property making it's way down into dependent ProjectReferences - @wasabii</title>
      <description>&lt;p&gt;So, this isn't a regression, as far as I can tell. But it is a potential performance issue that might be able to be improved.&lt;/p&gt;
&lt;p&gt;During a Publish target, generally the PublishDir property is passed. This property seems to make it down into the evaluation of the ProjectReferences. As such, combining it with other builds results in double evaluation of projects where I don't think it has to.&lt;/p&gt;
&lt;p&gt;For instance, if the following command is executed: &lt;code&gt;msbuild /t:ProjectA;ProjectA:Publish ProjectA.csproj /p:PublishDir&lt;/code&gt;, and ProjectA depends on a graph, containing, say, ProjectB, then ProjectB is invoked from the evaluation of ProjectA:Build as well as ProjectA:Publish, but the PublishDir property flows down into both. So though ProjectB isn't the one publishing, it ends up getting the property, and evaluating twice, once for each path.&lt;/p&gt;
&lt;p&gt;I am suffering from this issue, I believe, because I have numerous projects which publish the output of the same project into different directories, in different ways. For instance, it might publish it for RID win7 and RID linux. Publishing it twice. But that only matters for ProjectA, not ProjectB. RuntimeIdentifier is removed. But the PublishDir property flows down. And of course I'm outputing win7 and linux into different output paths.&lt;/p&gt;
&lt;p&gt;It might make sense to add PublishDir to GlobalPropertiesToRemove.&lt;/p&gt;
&lt;p&gt;It looks like `Microsoft.NET.Sdk.Publish does something similar with &amp;quot;WebPublishProfileFile&amp;quot;.&lt;/p&gt;
</description>
      <pubDate>Tue, 20 Sep 2022 00:45:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7986</guid>
      <link>https://github.com/dotnet/msbuild/issues/7986</link>
      <title>Issue: Understanding CopyLocal, ReferenceOutputAssembly, &amp; Private on  - @BenVillalobos</title>
      <description>&lt;p&gt;On ProjectReferences and PackageReferences.&lt;/p&gt;
&lt;p&gt;We gotta start unifying this between MSBuild, the SDK, and NuGet.&lt;/p&gt;
&lt;h2&gt;Lingering Questions&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;What does CopyLocal default to?&lt;/li&gt;
&lt;li&gt;What's the logic behind &lt;code&gt;Private=true&lt;/code&gt; meaning &amp;quot;copy my stuff over&amp;quot;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Private&lt;/code&gt; (MSBuild) flows through items, does that change the behavior in RAR? Or only the &amp;quot;output&amp;quot; behavior?&lt;/li&gt;
&lt;li&gt;Projects need to be able to tell things that reference it: Don't copy this item
&lt;ul&gt;
&lt;li&gt;What controls this?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CopyLocal &amp;amp; Private are equivalent but exist in different systems.
CopyLocal (NuGet) &amp;lt;==&amp;gt; Private (MSBuild)&lt;/p&gt;
&lt;h3&gt;Private (MSBuild)&lt;/h3&gt;
&lt;p&gt;Private (MSBuild): Controls copying the output. Doesn't affect referencing.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Flows to references, flows to RAR.&lt;/li&gt;
&lt;li&gt;Same as &lt;code&gt;ExcludeAssets=runtime&lt;/code&gt;
&lt;strong&gt;False&lt;/strong&gt;: &amp;quot;Don't copy &lt;em&gt;anything&lt;/em&gt; to the output directory&amp;quot;
&lt;strong&gt;True&lt;/strong&gt; (default): Let stuff copy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Private&lt;/code&gt; flows to new &lt;code&gt;Reference&lt;/code&gt; items, and flows to &lt;code&gt;ResolveAssemblyReferences&lt;/code&gt;.
Same as &lt;code&gt;ExcludeAssets=runtime&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;CopyLocal (NuGet)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Do I take the thing and put it in the output folder?&amp;quot;&lt;/em&gt;
&lt;strong&gt;True&lt;/strong&gt;: Let stuff copy
&lt;strong&gt;False&lt;/strong&gt;: Don't copy anything to outdir.&lt;/p&gt;
&lt;h3&gt;ReferenceOutputAssembly (MSBuild)&lt;/h3&gt;
&lt;p&gt;True: Pass references to the compiler. Include that in output.
Ultimately decides if the dll gets copied, even when &lt;code&gt;Private=true&lt;/code&gt;
False: Don't pass reference to compiler, don't include in output.
Does this override &lt;code&gt;Private=true&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;[LEGACY] &lt;code&gt;ReferenceOutputAssembly&lt;/code&gt; is equivalent to excludeassets=all. Its referenced, but nothing happens.&lt;/p&gt;
&lt;h3&gt;ExcludeAssets (NuGet)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Do I reference compile, do I copy runtime?&lt;/em&gt;
This needs a better quote, not sure I captured this.
&lt;code&gt;all&lt;/code&gt;: Don't reference and don't copy it out.&lt;/p&gt;
&lt;h3&gt;PrivateAssets (NuGet)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;What flows through me to my references?&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The goal here is probably to create &lt;code&gt;ExcludeAssets&lt;/code&gt;/&lt;code&gt;PrivateAssets&lt;/code&gt; equivalents in MSBuild.&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 22:14:10 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7985</guid>
      <link>https://github.com/dotnet/msbuild/issues/7985</link>
      <title>Issue: Consider updating LogErrorFromException to take into account AggregateExceptions - @jeffkl</title>
      <description>&lt;p&gt;The &lt;code&gt;TaskLoggingHelper.LogErrorFromException()&lt;/code&gt; method should probably take into account an &lt;code&gt;AggregateException&lt;/code&gt; and call itself multiple times for each inner exception.&lt;/p&gt;
&lt;p&gt;https://github.com/dotnet/msbuild/blob/cc3db358d34ad4cd1ec0c67e17582d7ca2a15040/src/Shared/TaskLoggingHelper.cs#L920&lt;/p&gt;
&lt;p&gt;It could also take into account special exceptions like &lt;code&gt;InvalidProjectFileException&lt;/code&gt; which have project file information.&lt;/p&gt;
&lt;p&gt;Here's what we did in NuGet to get a better experience when MSBuild APIs throw exceptions:&lt;/p&gt;
&lt;p&gt;https://github.com/NuGet/NuGet.Client/pull/4809/files#diff-a1e0e948fb5d1439e0368357d8587e83fafe5d5bb1a4f3fad40b040b3b9bf022R1042-R1073&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 21:49:06 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7983</guid>
      <link>https://github.com/dotnet/msbuild/issues/7983</link>
      <title>Issue: Recommended way to handle WriteCodeFragment task for Custom Language - @RobertvanderHulst</title>
      <description>&lt;p&gt;The default WriteCodeFragment task inside Microsoft.Build.Tasks.Core tries to retrieve the CodeDomProvider through the System.CodeDom.Compiler.CodeDomProvider.CreateProvider method.
That method, inside System.CodeDom only supports the Microsoft Languages C# and VB.
We have registered our custom language inside Machine.Config, in the  right location.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &amp;lt;system.codedom&amp;gt;
    &amp;lt;compilers&amp;gt;
      &amp;lt;compiler language=&amp;quot;XSharp&amp;quot; extension=&amp;quot;.prg&amp;quot; type=&amp;quot;XSharp.CodeDom.XSharpCodeDomProvider,XSharpCodeDomProvider, Version=2.13.2.2, Culture=neutral, PublicKeyToken=ed555a0467764586, ProcessorArchitecture=MSIL&amp;quot; /&amp;gt;
    &amp;lt;/compilers&amp;gt;
  &amp;lt;/system.codedom&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This location works for the WPF code generation, but somehow it does not work for the WriteCodeFragment task.
I checked the System.Codedom class&lt;/p&gt;
&lt;p&gt;What is the recommended way to get WriteCodeFragment to generate the source code for a custom language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write our own WriteCodeFragment task (I think FSharp does that) ?&lt;/li&gt;
&lt;li&gt;Another method ?&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 13:48:33 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7978</guid>
      <link>https://github.com/dotnet/msbuild/issues/7978</link>
      <title>Issue: VS 2022 - Only JSON files are copied to the bin folder after Solution build - @argelj289</title>
      <description>&lt;!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. --&gt;
&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;!--
* Please include a clear and concise description of the problem.
--&gt;
&lt;p&gt;Is there a reason why the project build don't include the other files generated by Angular CLI's ng build?&lt;/p&gt;
&lt;p&gt;it only includes JSON files but the other files e.g. JS files are not included on the BIN folder&lt;/p&gt;
&lt;p&gt;Refer to related link below:&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/73717625/asp-net-razor-pages-angular-dist-files-not-copying-to-bin-folder?noredirect=1#comment130193108_73717625&lt;/p&gt;
&lt;p&gt;https://stackoverflow.com/questions/73699810/asp-net-razor-pages-dist-folder-getting-removed-during-build&lt;/p&gt;
&lt;h3&gt;Steps to Reproduce&lt;/h3&gt;
&lt;!--
* Include as much of the following as possible:

* A minimal sample project that reproduces the issue.
* Your zipped project.
* IDE / CLI steps to create the project and reproduce the behaviour.
* Your command line invocation

If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
--&gt;
&lt;p&gt;Steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Open project in VS 2022 preview&lt;/li&gt;
&lt;li&gt;execute Solution build so that the csproj that contains NPM commands will generate the Angular 14 build files&lt;/li&gt;
&lt;li&gt;Wait for build to finish&lt;/li&gt;
&lt;li&gt;Check bin folder&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I tried this sample below and changed the &lt;targetframework&gt; value of it to net6.0 and just removed the target named &amp;quot;CopyPartials&amp;quot; from the csproj upon pulling the source code:
https://github.com/AlahmadiQ8/RazorPagesAngular&lt;/p&gt;
&lt;h3&gt;Expected Behavior&lt;/h3&gt;
&lt;!--
* The expected output or behavior.
--&gt;
&lt;p&gt;Angular 14 build files to be included on ASP.NET Razor Pages build files&lt;/p&gt;
&lt;h3&gt;Actual Behavior&lt;/h3&gt;
&lt;!--
* The actual output or behavior.
--&gt;
&lt;p&gt;Angular 14 build files not included on ASP.NET Razor Pages build files and only sees JSON files on the BIN folder&lt;/p&gt;
&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;!--
* If you have an idea where the problem might lie, let us know that here.
* Please include any pointers to code, relevant changes, or related issues you know of.
--&gt;
&lt;p&gt;I don't know where the fault is. its beyond my knowledge&lt;/p&gt;
&lt;h3&gt;Versions &amp;amp; Configurations&lt;/h3&gt;
&lt;!--
* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.
* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):

* Post any other relevant configuration settings here.
*   OS, architecture, etc.
--&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 05:09:05 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7977</guid>
      <link>https://github.com/dotnet/msbuild/issues/7977</link>
      <title>Issue: support unix/dotnet style switches - @danmoseley</title>
      <description>&lt;p&gt;Probably there's existing discussion/ a dupe that I didn't find. https://github.com/dotnet/msbuild/issues/5714 seems somewhat related.&lt;/p&gt;
&lt;p&gt;MSBuild switch syntax was not created with Unix ways in mind, and this has become more obvious in recent years on Unix, and also on Windows when using tools like dotnet.exe on Windows that prefer Unix conventions and aggregate MSBuild switches. For example. &lt;code&gt;build.cmd -ci -arch x64 -os windows -s clr.aot+libs -rc Release -lc Release  /p:CrossBuild=false &lt;/code&gt; (an example of a command to build dotnet/runtime) and &lt;code&gt;dotnet build -c debug /t:test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Ideally I could write &lt;code&gt;build.cmd -ci -arch x64 -os windows -s clr.aot+libs -rc Release -lc Release  -p CrossBuild=false &lt;/code&gt; and &lt;code&gt;dotnet build -c debug -t test&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;MSBuild already accepts &lt;code&gt;--XXX&lt;/code&gt; for multi character switches and &lt;code&gt;-X&lt;/code&gt; for single character ones. It also does not reject &lt;code&gt;--&lt;/code&gt; but does not respect it either -- for example &lt;code&gt;nonexistent.csproj --&lt;/code&gt; produces &amp;quot;Project file does not exist&amp;quot; even though I'd expect it to look like an invalid flag rather than a file. To be fully consistent it would need to (I think):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Allow &amp;quot;valued&amp;quot; switches to use space rather than colon&lt;/li&gt;
&lt;li&gt;Ideally respect &amp;quot;--&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I'm wondering whether this could be possible without generally breaking existing scripts. If I have &lt;code&gt;dotnet build -c debug -t:test -p:configuration=debug my.csproj&lt;/code&gt; and now write &lt;code&gt;dotnet build -c debug -t test -p configuration=debug my.csproj&lt;/code&gt;, it should still be possible to unambiguously that the project was &lt;code&gt;my.csproj&lt;/code&gt; and not &lt;code&gt;test&lt;/code&gt;. However, optional-valued switches may be a problem. If &lt;code&gt;-m:4&lt;/code&gt; becomes &lt;code&gt;-m 4&lt;/code&gt;, is the 4 the project name or should it continue to implicitly build a project in the working directory?&lt;/p&gt;
&lt;p&gt;Just curious whether there's been discussion about this, as the mixture of colon and space style is a bit ugly.&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 21:50:51 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7976</guid>
      <link>https://github.com/dotnet/msbuild/issues/7976</link>
      <title>Issue: dotnet publish profile silently continues even if you give an invalid publish profile path - @nagilson</title>
      <description>&lt;p&gt;When using a publish profile, there is no warning or error message for using an incorrect publish profile that doesn't exist.
Current behavior:
&lt;code&gt;dotnet new console&lt;/code&gt; &lt;code&gt;dotnet publish -p:PublishProfile=TotallyNonexistentButRadPublishProfileFile -bl&lt;/code&gt;. Will silently publish, binlog shows &lt;code&gt;PublishProfileImported=false&lt;/code&gt; and &lt;code&gt;PublishProfile=TotallyNonexistentButRadPublishProfileFile &lt;/code&gt;.
Expected / Desired Behavior:
MSBuild produces a warning akin to &lt;code&gt;A publish profile was provided with the name TotallyNonexistentButRadPublishProfileFile but could not be found in ./Properties/PublishProfiles/. &lt;/code&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 19:05:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7972</guid>
      <link>https://github.com/dotnet/msbuild/issues/7972</link>
      <title>Issue: dotnet publish uses debug configuration even if publishprofile has config=release - @vpenades</title>
      <description>&lt;!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. --&gt;
&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;When publishing a project that has a publsh profile using Release, the program is being compiled in debug mode.&lt;/p&gt;
&lt;h3&gt;Steps to Reproduce&lt;/h3&gt;
&lt;p&gt;I have a project that has this publish profile:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;Configuration&amp;gt;Release&amp;lt;/Configuration&amp;gt;
    &amp;lt;Platform&amp;gt;Any CPU&amp;lt;/Platform&amp;gt;
    &amp;lt;PublishDir&amp;gt;bin\Publish&amp;lt;/PublishDir&amp;gt;
    &amp;lt;PublishProtocol&amp;gt;FileSystem&amp;lt;/PublishProtocol&amp;gt;
    &amp;lt;_TargetId&amp;gt;Folder&amp;lt;/_TargetId&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net6.0-windows&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;RuntimeIdentifier&amp;gt;win-x64&amp;lt;/RuntimeIdentifier&amp;gt;
    &amp;lt;SelfContained&amp;gt;false&amp;lt;/SelfContained&amp;gt;
    &amp;lt;PublishSingleFile&amp;gt;true&amp;lt;/PublishSingleFile&amp;gt;
    &amp;lt;PublishReadyToRun&amp;gt;false&amp;lt;/PublishReadyToRun&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And I publish the project using command line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet publish -p:PublishProfile=FolderProfile project.csproj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I assumed that, because the publish profile has RELEASE configuration, it's the configuration used for building the project.&lt;/p&gt;
&lt;p&gt;but I have this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;#if DEBUG
Console.WriteLine(&amp;quot;Running in DEBUG&amp;quot;);
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is, &lt;em&gt;unexpectedly&lt;/em&gt;, executed when I run the program.&lt;/p&gt;
&lt;p&gt;If I publish the project using this command line:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet publish -p:PublishProfile=FolderProfile -c:Release project.csproj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Everything is fine.&lt;/p&gt;
&lt;p&gt;So, what I don't understand is why, if the publish profile already has a Release configuration, why it's also needed by the command line.&lt;/p&gt;
&lt;h3&gt;Expected Behavior&lt;/h3&gt;
&lt;p&gt;Having Release configuration in the publish profile should be enough for dotnet to run a Release build.&lt;/p&gt;
&lt;h3&gt;Actual Behavior&lt;/h3&gt;
&lt;p&gt;If the command line does not have '-c:Release' even if publish profile already has it, the program is built using Debug mode.&lt;/p&gt;
&lt;h3&gt;Versions &amp;amp; Configurations&lt;/h3&gt;
&lt;p&gt;SBuild version 17.3.1+2badb37d1 for .NET Framework
17.3.1.41501&lt;/p&gt;
&lt;p&gt;dotnet --info
.NET SDK (reflecting any global.json):
Version:   6.0.401
Commit:    0906eae6f8&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 09:12:46 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7971</guid>
      <link>https://github.com/dotnet/msbuild/issues/7971</link>
      <title>Issue: Referencing Microsoft.Net.Compilers.Toolset v4.4.0-1.final does not use the compiler in the package. - @JeremyMorton</title>
      <description>&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;When using the 4.4.0-1.final version of the &lt;code&gt;Microsoft.Net.Compilers.Toolset&lt;/code&gt; package, MSBuild does not use the csc.exe included in that package to compile.&lt;/p&gt;
&lt;h3&gt;Steps to Reproduce&lt;/h3&gt;
&lt;p&gt;A default console app, with the compiler package added:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net7.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
    &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.Net.Compilers.Toolset&amp;quot; Version=&amp;quot;4.4.0-1.final&amp;quot;&amp;gt;
      &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
      &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers&amp;lt;/IncludeAssets&amp;gt;
    &amp;lt;/PackageReference&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/msbuild/files/9570561/ConsoleApp7.zip"&gt;ConsoleApp7.zip&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Expected Behavior&lt;/h3&gt;
&lt;p&gt;I expect something like the output of using the 4.3.0 version of the package, where the csc.exe invoked comes from the package &lt;code&gt;C:\Users\jmorton\.nuget\packages\microsoft.net.compilers.toolset\4.3.0\tasks\net472\csc.exe&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E:\projects\ConsoleApp7&amp;gt;&amp;quot;C:\Program Files\Microsoft Visual Studio\2022\Preview\MSBuild\Current\Bin\MSBuild.exe&amp;quot; /t:Rebuild
MSBuild version 17.4.0-preview-22428-01+14c24b2d3 for .NET Framework
Building the projects in this solution one at a time. To enable parallel build, please add the &amp;quot;-m&amp;quot; switch.
Build started 9/14/2022 4:17:07 PM.
Project &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7.sln&amp;quot; on node 1 (Rebuild target(s)).
ValidateSolutionConfiguration:
  Building solution configuration &amp;quot;Debug|Any CPU&amp;quot;.
Project &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7.sln&amp;quot; (1) is building &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\ConsoleApp7.csproj&amp;quot; (2) on node 1 (Rebuild target(s)).
_CheckForNETCoreSdkIsPreview:
C:\Program Files\dotnet\sdk\7.0.100-rc.1.22431.12\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.RuntimeIdentifierInference.targets(219,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [E:\projects\ConsoleApp7\ConsoleApp7\C
onsoleApp7.csproj]
CoreClean:
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\bin\Debug\net7.0\ConsoleApp7.exe&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\bin\Debug\net7.0\ConsoleApp7.deps.json&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\bin\Debug\net7.0\ConsoleApp7.runtimeconfig.json&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\bin\Debug\net7.0\ConsoleApp7.dll&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\bin\Debug\net7.0\ConsoleApp7.pdb&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.csproj.AssemblyReference.cache&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.GeneratedMSBuildEditorConfig.editorconfig&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.AssemblyInfoInputs.cache&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.AssemblyInfo.cs&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.csproj.CoreCompileInputs.cache&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.dll&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\refint\ConsoleApp7.dll&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.pdb&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.genruntimeconfig.cache&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ref\ConsoleApp7.dll&amp;quot;.
GenerateTargetFrameworkMonikerAttribute:
Skipping target &amp;quot;GenerateTargetFrameworkMonikerAttribute&amp;quot; because all output files are up-to-date with respect to the input files.
CoreCompile:
  C:\Users\jmorton\.nuget\packages\microsoft.net.compilers.toolset\4.3.0\tasks\net472\csc.exe /noconfig /unsafe- /checked- [...]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Actual Behavior&lt;/h3&gt;
&lt;p&gt;The csc.exe invoked does not come from the package &lt;code&gt;C:\Program Files\Microsoft Visual Studio\2022\Preview\MSBuild\Current\Bin\Roslyn\csc.exe&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;E:\projects\ConsoleApp7&amp;gt;&amp;quot;C:\Program Files\Microsoft Visual Studio\2022\Preview\MSBuild\Current\Bin\MSBuild.exe&amp;quot; /t:Rebuild
MSBuild version 17.4.0-preview-22428-01+14c24b2d3 for .NET Framework
Building the projects in this solution one at a time. To enable parallel build, please add the &amp;quot;-m&amp;quot; switch.
Build started 9/14/2022 4:09:09 PM.
Project &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7.sln&amp;quot; on node 1 (Rebuild target(s)).
ValidateSolutionConfiguration:
  Building solution configuration &amp;quot;Debug|Any CPU&amp;quot;.
Project &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7.sln&amp;quot; (1) is building &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\ConsoleApp7.csproj&amp;quot; (2) on node 1 (Rebuild target(s)).
_CheckForNETCoreSdkIsPreview:
C:\Program Files\dotnet\sdk\7.0.100-rc.1.22431.12\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.RuntimeIdentifierInference.targets(219,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [E:\projects\ConsoleApp7\ConsoleApp7\C
onsoleApp7.csproj]
CoreClean:
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\bin\Debug\net7.0\ConsoleApp7.exe&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\bin\Debug\net7.0\ConsoleApp7.deps.json&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\bin\Debug\net7.0\ConsoleApp7.runtimeconfig.json&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\bin\Debug\net7.0\ConsoleApp7.dll&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\bin\Debug\net7.0\ConsoleApp7.pdb&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.csproj.AssemblyReference.cache&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.GeneratedMSBuildEditorConfig.editorconfig&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.AssemblyInfoInputs.cache&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.AssemblyInfo.cs&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.csproj.CoreCompileInputs.cache&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.dll&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\refint\ConsoleApp7.dll&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.pdb&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ConsoleApp7.genruntimeconfig.cache&amp;quot;.
  Deleting file &amp;quot;E:\projects\ConsoleApp7\ConsoleApp7\obj\Debug\net7.0\ref\ConsoleApp7.dll&amp;quot;.
GenerateTargetFrameworkMonikerAttribute:
Skipping target &amp;quot;GenerateTargetFrameworkMonikerAttribute&amp;quot; because all output files are up-to-date with respect to the input files.
CoreCompile:
  C:\Program Files\Microsoft Visual Studio\2022\Preview\MSBuild\Current\Bin\Roslyn\csc.exe /noconfig /unsafe- /checked- [...]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Versions &amp;amp; Configurations&lt;/h3&gt;
&lt;p&gt;C:\Program Files\Microsoft Visual Studio\2022\Preview&amp;gt;msbuild -version
MSBuild version 17.4.0-preview-22428-01+14c24b2d3 for .NET Framework
17.4.0.42801&lt;/p&gt;
</description>
      <pubDate>Wed, 14 Sep 2022 23:25:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7970</guid>
      <link>https://github.com/dotnet/msbuild/issues/7970</link>
      <title>Issue: Proposal: Add CustomIgnoreRegularExpression to Exec Task - @am11</title>
      <description>&lt;p&gt;Similar to &lt;code&gt;CustomWarningRegularExpression&lt;/code&gt;, there are opposite use-cases which require filtering out a specific error/warning on stderr. While &lt;code&gt;IgnoreStandardErrorWarningFormat=true&lt;/code&gt; prevents all errors and warnings from being emitted on stderr, the proposed &lt;code&gt;CustomIgnoreRegularExpression=pattern&lt;/code&gt; will prevent the specific patterns, when &lt;code&gt;IgnoreStandardErrorWarningFormat&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;i.e. the &lt;code&gt;else if&lt;/code&gt; on line 399 https://github.com/dotnet/msbuild/blob/3ade6423189769545ddff2ffeeed37010ec57f4d/src/Tasks/Exec.cs#L395-L404&lt;/p&gt;
&lt;p&gt;to be &lt;code&gt;else if (IgnoreStandardErrorWarningFormat || OutputMatchesRegex(singleLine, ref _customIgnoreRegex))&lt;/code&gt;, so that if the stderr message matches the pattern, it is printed on stdout regardless of &lt;code&gt;IgnoreStandardErrorWarningFormat&lt;/code&gt;.&lt;/p&gt;
</description>
      <pubDate>Wed, 14 Sep 2022 14:01:16 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7966</guid>
      <link>https://github.com/dotnet/msbuild/issues/7966</link>
      <title>Issue: In VS2022 Extension VSIX project why is the '.vsix' file Not getting created (and also some warnings) - @garevaul</title>
      <description>&lt;p&gt;Hi @rainersigwald,&lt;/p&gt;
&lt;p&gt;In this .Net6.0-Windows VS2022 VSIX Extension Project which I have given the Link below, when I build the project, the '.vsix' file is not getting created. Only the project's '.dll' file is getting created.&lt;/p&gt;
&lt;p&gt;https://1drv.ms/u/s!AjNAB3KpbqsEkW5cDsD_kQ4hBKsN?e=OnRqMd&lt;/p&gt;
&lt;p&gt;PLEASE NOTE :: I have used Uprade-Assistant on my old VSIX project and got this project. Is that the correct way?&lt;/p&gt;
&lt;p&gt;Also in addition to the issue above, when we compile it, then in the Visual Studio Output Window (the last few lines), we get warnings like this one::&lt;/p&gt;
&lt;p&gt;1&amp;gt;D:\Goodbyte VSIX\GoodbyteHelperExtension\GoodbyteHelperExtension.csproj : warning NU1701: Package 'Microsoft.VisualStudio.Editor 17.0.491' &lt;strong&gt;was restored using '.NETFramework,Version=v4.6.1,&lt;/strong&gt; .NETFramework,Version=v4.6.2, .NETFramework,Version=v4.7, .NETFramework,Version=v4.7.1, .NETFramework,Version=v4.7.2, .NETFramework,Version=v4.8, .NETFramework,Version=v4.8.1' &lt;strong&gt;instead of the project target framework 'net6.0-windows7.0'. This package may not be fully compatible with your project&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Regards
Garevaul&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 13:35:16 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7964</guid>
      <link>https://github.com/dotnet/msbuild/issues/7964</link>
      <title>Issue: Disable MSBuild Server for interactive builds - @MichalPavlik</title>
      <description>&lt;p&gt;There is a reported issue: https://github.com/dotnet/sdk/issues/27597&lt;/p&gt;
&lt;p&gt;We should disable MSBuild Server behavior when we detect &lt;code&gt;interactive&lt;/code&gt; switch.&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 11:49:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7963</guid>
      <link>https://github.com/dotnet/msbuild/issues/7963</link>
      <title>Issue: Set Property: _DebugSymbolsProduced=false - @greengumby</title>
      <description>&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;I am using VS2022 and with my MSTest project no matter how I set the debugtype properties I cannot seem to generate a symbol file (.PDB)&lt;/p&gt;
&lt;p&gt;Looking through the verbose logs the property _DebugSymbolsProduced is true up until the following&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1&amp;gt;Target &amp;quot;_CheckForCompileOutputs&amp;quot; in file &amp;quot;C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\amd64\Microsoft.Common.CurrentVersion.targets&amp;quot;: 1&amp;gt;  Added Item(s): FileWrites=obj\Debug\net6.0\Test.Common.dll 1&amp;gt;  Added Item(s): FileWrites=obj\Debug\net6.0\refint\Test.Common.dll 1&amp;gt;  Set Property: _DocumentationFileProduced=false 1&amp;gt;  Set Property: _DebugSymbolsProduced=false&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I cannot figure out what is causing this.&lt;/p&gt;
&lt;h3&gt;Versions &amp;amp; Configurations&lt;/h3&gt;
&lt;p&gt;MSBuildVersion                 = 17.3.0&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 03:49:30 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7960</guid>
      <link>https://github.com/dotnet/msbuild/issues/7960</link>
      <title>Issue: Even After Adding MSBuild Nuget (DotNet 6) it gives MSBuild 15.1.0 File Missing - @garevaul</title>
      <description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;Even After Adding MSBuild Nuget (DotNet 6) it gives MSBuild 15.1.0 File Missing.&lt;/p&gt;
&lt;p&gt;I have the sample project giving the Error here::
https://1drv.ms/u/s!AjNAB3KpbqsEkWzAsH4oAKjhLxNx?e=HxUZFa&lt;/p&gt;
&lt;p&gt;Just click on the Form Button (in F5 Debugging), and you will get the Error.&lt;/p&gt;
&lt;p&gt;Regards
Garevaul&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 19:00:14 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7959</guid>
      <link>https://github.com/dotnet/msbuild/issues/7959</link>
      <title>Issue: Collect traces for MAUI build - @MichalPavlik</title>
      <description>&lt;p&gt;Get the recommended project/solution to collect and analyze traces.&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 14:43:24 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7958</guid>
      <link>https://github.com/dotnet/msbuild/issues/7958</link>
      <title>Issue: "DotNet Clean" and "DotNet Build" are not working on THESE projects .Net 6 projects on the CSPROJ files or SLN file. - @garevaul</title>
      <description>&lt;p&gt;Hi,&lt;/p&gt;
&lt;p&gt;&amp;quot;DotNet Clean&amp;quot; and &amp;quot;DotNet Build&amp;quot; are not working on these projects' CSPROJ files and the SLN file.&lt;/p&gt;
&lt;p&gt;The Command I tried in Powershell is
&lt;code&gt;dotnet clean &amp;quot;I:\Goodbyte Net Framework DLL Projects\GoodbyteOurDllsAndCoderMaster\GoodbyteOurDllsAndCoderMaster.sln&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet clean -c debug &amp;quot;I:\Goodbyte Net Framework DLL Projects\GoodbyteOurDllsAndCoderMaster\GoodbyteOurDllsAndCoderMaster.sln&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet clean -c release &amp;quot;I:\Goodbyte Net Framework DLL Projects\GoodbyteOurDllsAndCoderMaster\GoodbyteOurDllsAndCoderMaster.sln&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dotnet build &amp;quot;I:\Goodbyte Net Framework DLL Projects\GoodbyteOurDllsAndCoderMaster\GoodbyteOurDllsAndCoderMaster.sln&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The Projects Folders are here::
https://1drv.ms/u/s!AjNAB3KpbqsEkWos0AMsJbvDcAef?e=DqCvie&lt;/p&gt;
&lt;p&gt;Just Copy the Entire Folder to let's says i-drive, like &amp;quot;I:\Goodbyte Net Framework DLL Projects&amp;quot; or to any Root of the Drive of your choice and Run the Powershell Command.&lt;/p&gt;
&lt;p&gt;The Assemblies DO NOT get Cleaned or Build &lt;strong&gt;(IN These Projects SITUATION)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Regards&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 14:07:10 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7956</guid>
      <link>https://github.com/dotnet/msbuild/issues/7956</link>
      <title>Issue: MSBuildFileSystemBase is partialy honoured when used to load imports - @shlomiassaf</title>
      <description>&lt;!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. --&gt;
&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;!--
* Please include a clear and concise description of the problem.
--&gt;
&lt;p&gt;When creating a &lt;code&gt;Project&lt;/code&gt; we can pass a custom file system implementation (&lt;code&gt;MSBuildFileSystemBase&lt;/code&gt;) through the &lt;code&gt;EvaluationContext&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The file system is used internally, among other things, to check for file existence and load references.&lt;/p&gt;
&lt;p&gt;When checking for file existence the custom file system is indeed used:&lt;/p&gt;
&lt;p&gt;https://github.com/dotnet/msbuild/blob/a3b647d766676a735211a42aa0726d1d940ed13d/src/Build/Evaluation/Evaluator.cs#L2074&lt;/p&gt;
&lt;p&gt;However, when loading the nested referenced project:&lt;/p&gt;
&lt;p&gt;https://github.com/dotnet/msbuild/blob/a3b647d766676a735211a42aa0726d1d940ed13d/src/Build/Evaluation/Evaluator.cs#L2191-L2198&lt;/p&gt;
&lt;p&gt;There's no use of the file system to load the project which will cause an exception as it will use the default file system.&lt;/p&gt;
&lt;p&gt;Note that we use the custom filesystem to check if the file exists &lt;strong&gt;but use a different file system&lt;/strong&gt; to load it!&lt;/p&gt;
&lt;h3&gt;Expected Behavior&lt;/h3&gt;
&lt;!--
* The expected output or behavior.
--&gt;
&lt;p&gt;&lt;code&gt;Project&lt;/code&gt; should use the &lt;code&gt;MSBuildFileSystemBase&lt;/code&gt; provided to it in the &lt;code&gt;EvaluationContext&lt;/code&gt; to access the file system.&lt;/p&gt;
&lt;h3&gt;Actual Behavior&lt;/h3&gt;
&lt;!--
* The actual output or behavior.
--&gt;
&lt;p&gt;&lt;code&gt;Project&lt;/code&gt; use the &lt;code&gt;MSBuildFileSystemBase&lt;/code&gt; provided to it in the &lt;code&gt;EvaluationContext&lt;/code&gt; to check if files exists but it will load the files using the default file systme.&lt;/p&gt;
&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;!--
* If you have an idea where the problem might lie, let us know that here.
* Please include any pointers to code, relevant changes, or related issues you know of.
--&gt;
&lt;p&gt;It's clear that &lt;code&gt;ProjectRootElement&lt;/code&gt; or any project element does not resolve imports so it does not care about the FS.&lt;/p&gt;
&lt;p&gt;However, the evaluator should not load the project with a path, instead it should load using a provided &lt;code&gt;ProjectRootElement&lt;/code&gt; directly.  (I.E create the project from &lt;code&gt;ProjectRootElement&lt;/code&gt; and not from the path)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;An alternative is to  accept an handler to load it if it's not in the &lt;code&gt;projectRootElementCache&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is should be straight forward:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;               // fs: MSBuildFileSystemBase
               var projectCollection = new ProjectCollection();
                
                using var reader = new XmlTextReader(fs.GetFileStream(pathToFile, FileMode.Open, FileAccess.Read, FileShare.None));
                var projectRootElement = ProjectRootElement.Create(reader, projectCollection);

                 // We must re-set the location so internal imports will follow the right path.
                //  The default in this cause is the main process directory (`PWD`)
                 projectRootElement.FullPath = pathToFile;

                return Project.FromProjectRootElement(projectRootElement, new ProjectOptions
                {
                    LoadSettings = ProjectLoadSettings.Default,
                    ProjectCollection = projectCollection,
                    EvaluationContext = EvaluationContext.Create(EvaluationContext.SharingPolicy.Shared, fs),
                });
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Versions &amp;amp; Configurations&lt;/h3&gt;
&lt;!--
* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.
* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):

* Post any other relevant configuration settings here.
*   OS, architecture, etc.
--&gt;
&lt;p&gt;Checked with 17.2 (net6). Code implies its the same form 16.9 (net5.0) and for &lt;code&gt;main&lt;/code&gt; branch.&lt;/p&gt;
</description>
      <pubDate>Sat, 10 Sep 2022 21:08:44 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7951</guid>
      <link>https://github.com/dotnet/msbuild/issues/7951</link>
      <title>Issue: Fix aggressive caching of immutable files for ARM64 architecture - @AR-May</title>
      <description>&lt;p&gt;The aggressive caching of immutable files (introduced in #6974) does not work for arm64 scenarios because locations of immutable files for this architecture are different. So, we do not benefit from this optimization in arm64 scenarios. We want to revisit PR #6974 and more specifically the &lt;a href="https://github.com/dotnet/msbuild/blob/518c041f4511a6bc23eb40703b69a94ea46c65fd/src/Framework/FileClassifier.cs"&gt;FileClassifier.cs&lt;/a&gt; to fix that.&lt;/p&gt;
</description>
      <pubDate>Thu, 08 Sep 2022 13:19:26 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7948</guid>
      <link>https://github.com/dotnet/msbuild/issues/7948</link>
      <title>Issue: LogErrorFromException could preserve Exception.HelpLink - @rainersigwald</title>
      <description>&lt;p&gt;By the way, I assumed that LogErrorFromException would read &lt;a href="https://docs.microsoft.com/dotnet/api/system.exception.helplink?view=netstandard-2.0"&gt;Exception.HelpLink&lt;/a&gt;, but it doesn't seem to do that.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted by @KalleOlaviNiemitalo in https://github.com/dotnet/msbuild/issues/5493#issuecomment-1238926812&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Wed, 07 Sep 2022 10:45:44 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7944</guid>
      <link>https://github.com/dotnet/msbuild/issues/7944</link>
      <title>Issue: MSBuild task for creating Tar files - @stan-sz</title>
      <description>&lt;p&gt;With .Net 7 support for &lt;a href="https://devblogs.microsoft.com/dotnet/announcing-dotnet-7-preview-4/#added-new-tar-apis"&gt;tar apis&lt;/a&gt;, is it feasible to create an equivalent of (&lt;a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/unzip-task?view=vs-2022"&gt;Un&lt;/a&gt;)&lt;a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/zipdirectory-task?view=vs-2022"&gt;ZipDirectory&lt;/a&gt; tasks for handling &lt;code&gt;.tar&lt;/code&gt; files in the upcoming MSBuild release?&lt;/p&gt;
</description>
      <pubDate>Mon, 05 Sep 2022 17:41:13 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7943</guid>
      <link>https://github.com/dotnet/msbuild/issues/7943</link>
      <title>Issue: MSBuild detects wrong processor count on Windows when debugging processor groups - @dmex</title>
      <description>&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;MSBuild detects the wrong processor count on Windows when debugging processor groups and the bug was introduced with PR: https://github.com/dotnet/msbuild/pull/5625&lt;/p&gt;
&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;p&gt;The comments in PR 5625 mentioned various ongoing issues testing processor group support on Windows due to the lack of hardware:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I don't have a machine with &amp;gt; 32 cores to actually test this.
I'm trying to pull some strings internally to borrow a machine big enough to test it on&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The lack of hardware should never have been an issue. Windows has special boot parameters to enable virtual processor groups specially designed for developers to write and debug processor group support on Windows without requiring physical hardware with &amp;gt;64 processors. &lt;/p&gt;
&lt;p&gt;The MSDN documentation is aimed at driver developers however the same steps are required for testing and debugging usermode applications: https://docs.microsoft.com/en-us/windows-hardware/drivers/devtest/boot-parameters-to-test-drivers-for-multiple-processor-group-support&lt;/p&gt;
&lt;p&gt;For example:
&lt;code&gt;bcdedit.exe /set groupsize 2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you have 16 processors this will create 8 processor groups with 2 processors in each group and simulate a machine with &amp;gt; 64 processors. Usermode functions such as GetSystemInfo (and the .NET framework which is not group aware) will now only report 2 processors and this includes MSBuild because of two issues:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;This check for &lt;code&gt;&amp;gt;= 32&lt;/code&gt; is incompatible with the groupsize boot paramater and must be removed:
https://github.com/dotnet/msbuild/blob/65c50fb73faefec0ef2ce8256b802f50cc8236f0/src/Framework/NativeMethods.cs#L516&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MSBuild is using a custom enumerator with GetLogicalProcessorInformationEx which is incorrect:
https://github.com/dotnet/msbuild/blob/65c50fb73faefec0ef2ce8256b802f50cc8236f0/src/Framework/NativeMethods.cs#L538-L575&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Starting Windows 7 usermode applications are supposed to call &lt;a href="https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getactiveprocessorcount"&gt;GetActiveProcessorCount&lt;/a&gt; and kernel drivers &lt;a href="https://docs.microsoft.com/en-us/windows-hardware/drivers/ddi/wdm/nf-wdm-kequeryactiveprocessorcountex"&gt;KeQueryActiveProcessorCountEx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;GetLogicalCoreCountOnWindows&lt;/code&gt; function MSBuild is using should be removed and all the code be replaced with a single line:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;int numberOfProcessors = GetActiveProcessorCount(ALL_PROCESSOR_GROUPS);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Typedefs:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;const ushort ALL_PROCESSOR_GROUPS = 0xFFFF;

[DllImport(&amp;quot;kernel32.dll&amp;quot;)]
public static extern int GetActiveProcessorCount(ushort GroupNumber);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Steps to Reproduce&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Open command prompt as Administrator&lt;/li&gt;
&lt;li&gt;Execute &lt;code&gt;bcdedit.exe /set groupsize 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Reboot&lt;/li&gt;
&lt;li&gt;MsBuild is now limited to 2 processors (on a 16 processor machine).&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Expected Behavior&lt;/h3&gt;
&lt;p&gt;MSBuild support for multiple processor groups.&lt;/p&gt;
&lt;h3&gt;Actual Behavior&lt;/h3&gt;
&lt;p&gt;MSBuild is limited to 2 processors making testing/debugging applications significantly slower.&lt;/p&gt;
</description>
      <pubDate>Mon, 05 Sep 2022 17:26:24 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7942</guid>
      <link>https://github.com/dotnet/msbuild/issues/7942</link>
      <title>Issue: DotNet 6.0 MSBuild (amd64 dlls) gave this unhandled Exception when Building a DotNet 6.0-Windows Project from my code - @garevaul</title>
      <description>&lt;p&gt;I am building a Project from my code using all required .Net 6.0 MSBuild (amd64) dlls.  I am getting this error when I run the build project code.&lt;/p&gt;
&lt;p&gt;Also, I do not know why in this error it is mentioning &lt;strong&gt;..\tools\net472\Microsoft.NET.Build.Tasks.dll&lt;/strong&gt; when I am not referencing Net472 at all.&lt;/p&gt;
&lt;p&gt;Regards
Garry&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;Error Stack......&lt;/h2&gt;
&lt;p&gt;Project &amp;quot;GoodbyteOurDllsAndCoderMaster.csproj&amp;quot; (Rebuild target(s)):
: ERROR C:\Program Files\dotnet\sdk\6.0.400\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets(120,5): The &amp;quot;AllowEmptyTelemetry&amp;quot; task could not be instantiated from &amp;quot;C:\Program Files\dotnet\sdk\6.0.400\Sdks\Microsoft.NET.Sdk\targets..\tools\net472\Microsoft.NET.Build.Tasks.dll&amp;quot;. Method not found: 'Byte[] System.AppDomainSetup.GetConfigurationBytes()'.
: ERROR C:\Program Files\dotnet\sdk\6.0.400\Sdks\Microsoft.NET.Sdk\targets\Microsoft.NET.TargetFrameworkInference.targets(120,5): The &amp;quot;AllowEmptyTelemetry&amp;quot; task has been declared or used incorrectly, or failed during construction. Check the spelling of the task name and the assembly name.
: ERROR (0,0): This is an unhandled exception in MSBuild -- PLEASE UPVOTE AN EXISTING ISSUE OR FILE A NEW ONE AT https://aka.ms/msbuild/unhandled.
System.TypeLoadException: Could not load type 'System.Runtime.Remoting.RemotingServices' from assembly 'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.
at Microsoft.Build.BackEnd.TaskExecutionHost.Dispose(Boolean disposing)
at Microsoft.Build.BackEnd.TaskExecutionHost.Dispose()
at Microsoft.Build.BackEnd.TaskBuilder.ShutdownComponent()
at Microsoft.Build.BackEnd.TargetBuilder.BuildTargets(ProjectLoggingContext loggingContext, BuildRequestEntry entry, IRequestBuilderCallback callback, String[] targetNames, Lookup baseLookup, CancellationToken cancellationToken)
at Microsoft.Build.BackEnd.RequestBuilder.BuildProject()
at Microsoft.Build.BackEnd.RequestBuilder.BuildAndReport()
Done building project &amp;quot;GoodbyteOurDllsAndCoderMaster.csproj&amp;quot; -- FAILED.&lt;/p&gt;
</description>
      <pubDate>Sun, 04 Sep 2022 13:10:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7941</guid>
      <link>https://github.com/dotnet/msbuild/issues/7941</link>
      <title>Issue: DOTNET_SYSTEM_GLOBALIZATION_INVARIANT is not working on linux-alpine base images - @mahmoud-syr</title>
      <description>&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;When running &lt;code&gt;.net 6&lt;/code&gt; docker containers in debug mode with &lt;code&gt;DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false&lt;/code&gt;, when the base image is &lt;code&gt;6.0-alpine&lt;/code&gt;, container crashes with exit code &lt;code&gt;4294967295&lt;/code&gt; and VS shows the message:
&amp;quot;One or more error occurred.
Failed to launch debug adapter. Additional information may be available in the output window.
The Operation was cancelled&amp;quot;&lt;/p&gt;
&lt;p&gt;The output window only shows the following line:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;The program '' has exited with code 4294967295 (0xffffffff).&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Steps to Reproduce&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create new console project&lt;/li&gt;
&lt;li&gt;Add docker support&lt;/li&gt;
&lt;li&gt;Change docker base image to &lt;code&gt;6.0-alpine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;code&gt;ENV DOTNET_SYSTEM_GLOBALIZATION_INVARIANT=false&lt;/code&gt; to the docker file&lt;/li&gt;
&lt;li&gt;Run the console app in docker configuration&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Expected Behavior&lt;/h3&gt;
&lt;p&gt;It should work, I think? , I mean I just want to install multiple languages/cultures, do I need the full linux image for this?&lt;/p&gt;
&lt;h3&gt;Actual Behavior&lt;/h3&gt;
&lt;p&gt;It is crashing all the times.&lt;/p&gt;
&lt;h3&gt;Versions &amp;amp; Configurations&lt;/h3&gt;
&lt;p&gt;MSBuild version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Microsoft (R) Build Engine version 17.2.1+52cd2da31 for .NET Framework
Copyright (C) Microsoft Corporation. All rights reserved.

17.2.1.25201
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Visual studio 2022 community 17.2.3
Dotnet version &lt;code&gt;6.0.303&lt;/code&gt;&lt;/p&gt;
</description>
      <pubDate>Sun, 04 Sep 2022 11:25:01 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7940</guid>
      <link>https://github.com/dotnet/msbuild/issues/7940</link>
      <title>Issue: what's the cause of this error  NU1301: netstandard2.0 doesn't exist - @PrestigeDevop</title>
      <description>&lt;p&gt;Hello,  I'm kinda confused  when I try to build Electron apps using Electron .net wrapper I got this error :&lt;/p&gt;
&lt;p&gt;Start Electron Desktop Application...
Arguments:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet publish -r win-x64 -c &amp;quot;Debug&amp;quot; --output &amp;quot;F:\New folder\BlazorApp-main\BlazorApp-main\obj\Host\bin&amp;quot; /p:PublishReadyToRun=true /p:PublishSingleFile=true --no-self-contained
MSBuild version 17.3.0-preview-22329-01+77c72dd0f for .NET
  Determining projects to restore...
F:\New folder\BlazorApp-main\BlazorApp-main\BlazorApp.csproj : error NU1301: The local source 'C:\Users\hi\Desktop\New folder\netstandard2.0' doesn't exist.
F:\New folder\BlazorApp-main\BlazorApp-main\BlazorApp.csproj : error NU1301: The local source 'C:\Users\hi\Desktop\New folder\netstandard2.0' doesn't exist.
  Failed to restore F:\New folder\BlazorApp-main\BlazorApp-main\BlazorApp.csproj (in 194 ms).

Error occurred during dotnet publish: 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Any idea why this occur ?
I've other project that works just fine&lt;/p&gt;
&lt;p&gt;here's my sdk and runtime :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`C:\Users\hi&amp;gt;dotnet --list-sdks
5.0.100-rc.2.20479.15 [C:\Program Files\dotnet\sdk]
5.0.408 [C:\Program Files\dotnet\sdk]
6.0.400 [C:\Program Files\dotnet\sdk]
7.0.100-preview.6.22352.1 [C:\Program Files\dotnet\sdk]
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;
C:\Users\hi&amp;gt;dotnet --list-runtimes
Microsoft.AspNetCore.App 3.1.28 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 5.0.0-rc.2.20475.17 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 5.0.17 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 6.0.8 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.AspNetCore.App 7.0.0-preview.6.22330.3 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
Microsoft.NETCore.App 3.1.28 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 5.0.0-rc.2.20475.5 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 5.0.17 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 6.0.7 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 6.0.8 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.NETCore.App 7.0.0-preview.6.22324.4 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
Microsoft.WindowsDesktop.App 3.1.28 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 5.0.0-rc.2.20475.6 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 5.0.17 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 6.0.7 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 6.0.8 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
Microsoft.WindowsDesktop.App 7.0.0-preview.6.22351.3 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]

&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Sat, 03 Sep 2022 15:30:30 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7938</guid>
      <link>https://github.com/dotnet/msbuild/issues/7938</link>
      <title>Issue: XML doc build thows warning on invalid XML doc comment format - @ghogen</title>
      <description>&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;XML doc build generated warning - invalid param tag in ToolLocationHelper XML doc comments (comes from ToolLocationHelper.cs).
Doc build is in the MSBuild API doc repo PR https://github.com/dotnet/msbuild-api-docs/pull/13&lt;/p&gt;
&lt;p&gt;Looks like a simple copy and paste error where a new param entry was added in the wrong place.&lt;/p&gt;
&lt;p&gt;Error was thrown by this line in the XML generated from the ToolLocationHelper.cs xml comments:
https://github.com/dotnet/msbuild-api-docs/blob/ed4df45ee3bb64b1a1fb89db1dc4556e7ac69500/msbuild-api-docs/xml/Microsoft.Build.Utilities/ToolLocationHelper.xml#L1585&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 22:56:40 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7936</guid>
      <link>https://github.com/dotnet/msbuild/issues/7936</link>
      <title>Issue: TFM trimming, and elimination of net4* targeting in Linux source-build - @mmitche</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;Trim away unneeded TFMs, and conditionalize away non-applicable TFMs for Linux source build.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requires&lt;/strong&gt; https://github.com/dotnet/source-build/issues/3013. source-build net4* targeting elimination required https://github.com/dotnet/source-build/issues/2974&lt;/p&gt;
&lt;p&gt;The purpose of this operation is twofold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Reduce the number of TFMs present overall in .NET's build, potentially improving build time.&lt;/li&gt;
&lt;li&gt;[ ] Eliminate framework TFMs, drastically reducing the size of the source build repository size.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When TFMs other than the latest .NET Core TFM are targeted in source-build, the reference assets for that TFM must be provided via a source build reference package. This is a 'text only' package that is assembled from IL at the beginning of the build to satisfy the required reference assets. In Microsoft's build, these would be restored from the internet, but in source build this is not allowed.&lt;/p&gt;
&lt;p&gt;These SBRPs are large. All told, the total size contribution for just the netframework 4* TFMs is around 3GB. Not only does this have a significant contribution to the source build repo size, but it also affects build time. For Linux source build, we spend large amounts of time building assets that are simply thrown away at the end.&lt;/p&gt;
&lt;p&gt;An 'ideal' would be a single TFM used throughout all of the .NET build, source build or otherwise. This is not possible. There are legitimate reasons to target older TFMs, especially netstandard. However, we should be able to justify each additional TFM.&lt;/p&gt;
&lt;p&gt;To complete this work, repositories will use the tooling provided via https://github.com/dotnet/source-build/issues/2901 to identify the TFMs in use in their repository. For each TFM, they should do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] If the TFM can be eliminated, or upgraded to latest (e.g. target the latest netcore explicitly, or use net472), do so. netframework TFM removal for tools and internal code is likely low hanging fruit.&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Requires https://github.com/dotnet/source-build/issues/2974&lt;/strong&gt; If the TFM is a framework TFM, it should be conditionalized out in source build for Linux.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is a goal that the form of this conditionalization remain consistent across projects, and used relatively sparingly. How this conditionalization should be done will be designed in https://github.com/dotnet/source-build/issues/2974. Once that is done, this issue will be updated with implementation details.&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 18:36:17 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7927</guid>
      <link>https://github.com/dotnet/msbuild/issues/7927</link>
      <title>Issue: SdkResolverService throws "System.InvalidOperationException: Collection was modified" occasionally - @dfederm</title>
      <description>&lt;p&gt;I'm occasionally seeing the following exception:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.InvalidOperationException: Collection was modified; enumeration operation may not execute.
   at System.Collections.Generic.List`1.Enumerator.MoveNextRare()
   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.GetResolvers(IList`1 resolversManifests, LoggingContext loggingContext, ElementLocation sdkReferenceLocation)
   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.ResolveSdkUsingResolversWithPatternsFirst(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio)
   at Microsoft.Build.BackEnd.SdkResolution.SdkResolverService.ResolveSdk(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio)
   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.&amp;lt;&amp;gt;n__0(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio)
   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.&amp;lt;&amp;gt;c__DisplayClass3_0.&amp;lt;ResolveSdk&amp;gt;b__2()
   at System.Lazy`1.ViaFactory(LazyThreadSafetyMode mode)
--- End of stack trace from previous location ---
   at System.Lazy`1.CreateValue()
   at Microsoft.Build.BackEnd.SdkResolution.CachingSdkResolverService.ResolveSdk(Int32 submissionId, SdkReference sdk, LoggingContext loggingContext, ElementLocation sdkReferenceLocation, String solutionPath, String projectPath, Boolean interactive, Boolean isRunningInVisualStudio)
   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImportsFromUnescapedImportExpressionConditioned(String directoryOfImportingFile, ProjectImportElement importElement, List`1&amp;amp; projects, SdkResult&amp;amp; sdkResult, Boolean throwOnFileNotExistsError)
   at Microsoft.Build.Evaluation.Evaluator`4.ExpandAndLoadImports(String directoryOfImportingFile, ProjectImportElement importElement, SdkResult&amp;amp; sdkResult)
   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)
   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)
   at Microsoft.Build.Evaluation.Evaluator`4.EvaluateImportElement(String directoryOfImportingFile, ProjectImportElement importElement)
   at Microsoft.Build.Evaluation.Evaluator`4.PerformDepthFirstPass(ProjectRootElement currentProjectOrImport)
   at Microsoft.Build.Evaluation.Evaluator`4.Evaluate()
   at Microsoft.Build.Evaluation.Project.ProjectImpl.Reevaluate(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)
   at Microsoft.Build.Evaluation.Project.ProjectImpl.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)
   at Microsoft.Build.Evaluation.Project.ProjectImpl.ReevaluateIfNecessary(ILoggingService loggingServiceForEvaluation, EvaluationContext evaluationContext)
   at Microsoft.Build.Evaluation.Project.ProjectImpl.ReevaluateIfNecessary(EvaluationContext evaluationContext)
   at Microsoft.Build.Evaluation.Project.ProjectImpl.Initialize(IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext)
   at Microsoft.Build.Evaluation.Project..ctor(ProjectRootElement xml, IDictionary`2 globalProperties, String toolsVersion, String subToolsetVersion, ProjectCollection projectCollection, ProjectLoadSettings loadSettings, EvaluationContext evaluationContext, IDirectoryCacheFactory directoryCacheFactory)
   at Microsoft.Build.Evaluation.Project.FromProjectRootElement(ProjectRootElement rootElement, ProjectOptions options)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Seems like there is a race condition in &lt;code&gt;SdkResolverService&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;MSBuild version: 17.4.0-preview-22416-02 (pretty close to head of main as of this writing)&lt;/p&gt;
</description>
      <pubDate>Wed, 31 Aug 2022 05:01:48 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7925</guid>
      <link>https://github.com/dotnet/msbuild/issues/7925</link>
      <title>Issue: Source-build behavior control update - @mmitche</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;This issue is dependent on https://github.com/dotnet/source-build/issues/2974 and is a placeholder for .NET 8 required work in product repositories.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instructions for implementation will be updated once https://github.com/dotnet/source-build/issues/2974 but will likely be a mechanical shift of properties in this repo. In a general sense, this is scaffolding work for expanding the set of source-built platforms beyond Linux.&lt;/p&gt;
</description>
      <pubDate>Tue, 30 Aug 2022 15:58:58 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7923</guid>
      <link>https://github.com/dotnet/msbuild/issues/7923</link>
      <title>Issue: Providing -pp will suppress errors and fail silently  - @nagilson</title>
      <description>&lt;p&gt;To reproduce, do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a new console project with &lt;code&gt;dotnet new console&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Open the &lt;code&gt;foo.csproj&lt;/code&gt; or project file created by new console. Edit it to be like this:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
  &amp;lt;Message&amp;gt;Blah&amp;lt;/Message&amp;gt;
  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net7.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
    &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;run &lt;code&gt;dotnet msbuild --pp&lt;/code&gt; and observe that no error is produced and msbuild is silent, but without &lt;code&gt;--pp&lt;/code&gt; it will raise an error.&lt;/p&gt;
</description>
      <pubDate>Mon, 29 Aug 2022 20:48:24 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7922</guid>
      <link>https://github.com/dotnet/msbuild/issues/7922</link>
      <title>Issue: DOTNET/COMPlus/MSBUILD environment variables should be logged by default - @baronfel</title>
      <description>&lt;blockquote&gt;
&lt;p&gt;At the moment, I don't have a good guess because &lt;code&gt;DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER&lt;/code&gt; isn't mentioned in any .binlog from the build that I checked. It feels like environment variables that aren't directly used in the build (e.g. &lt;code&gt;COMPlus_DbgEnableMiniDump&lt;/code&gt; in our other jobs) aren't logged anymore. That leaves me w/ insufficient information to debug the problem.&lt;/p&gt;
&lt;p&gt;The suggestion in Structured Log viewer is to&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Define a value for MSBUILDLOGALLENVIRONMENTVARIABLES to log all environment variables. Only those used in evaluating properties are currently logged.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but that's very time-consuming when it takes a CI build to reproduce the problem. This feels like a regression @rainersigwald.&lt;/p&gt;
&lt;p&gt;Should we unconditionally add &lt;code&gt;MSBUILDLOGALLENVIRONMENTVARIABLES: true&lt;/code&gt; in all CI jobs that may produce binary logs❔&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We should add an allowlist for &lt;code&gt;MSBUILD*&lt;/code&gt;, &lt;code&gt;COMPlus_*&lt;/code&gt;, and &lt;code&gt;DOTNET_*&lt;/code&gt; variables at the bare minimum. (&lt;code&gt;DOTNET_*&lt;/code&gt; is a synonym for &lt;code&gt;COMPLUS_*&lt;/code&gt; now).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted by @rainersigwald in https://github.com/dotnet/aspnetcore/issues/43028#issuecomment-1230617069&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Mon, 29 Aug 2022 17:53:04 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7921</guid>
      <link>https://github.com/dotnet/msbuild/issues/7921</link>
      <title>Issue: Specify all source-built dependencies and ensure they are regularly updated - @mmitche</title>
      <description>&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Source-build works today by building a repository, gathering the versions of the outputs, and creating a property file with those versions. This property file is then fed to downstream repositories, which import it after their &lt;code&gt;eng/Versions.props&lt;/code&gt;. The resulting behavior is that the downstream repo overrides all dependency versions specified in &lt;code&gt;eng/Versions.props&lt;/code&gt; with the versions built from source. This behavior is &lt;strong&gt;not&lt;/strong&gt; the same as the Maestro dependency-flow based approach. Maestro only updates properties for dependencies that are specified in &lt;code&gt;eng/Version.Details.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This causes the following difference: Say that dotnet/aspnetcore has a &lt;code&gt;Microsoft.Net.Compilers.Toolset&lt;/code&gt; dependency. It codes a property for that dependency's version in &lt;code&gt;eng/Versions.props&lt;/code&gt; as &lt;code&gt;MicrosoftNetCompilersToolsetVersion&lt;/code&gt;, with an older version of the package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When building via source-build, roslyn builds first, and aspnetcore will pick up the new version of Microsoft.Net.Compilers.Toolset, even though it doesn't want to.&lt;/li&gt;
&lt;li&gt;When building officially, the non-latest version will be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This difference tends to cause build breaks in source-build. The version bump may be significant and require repo reaction. This is not ideal and not sustainable.&lt;/p&gt;
&lt;p&gt;One option would be to only override those versions that are specified in &lt;code&gt;eng/Version.Details.xml&lt;/code&gt;. This would more closely align the source-build and current official builds. The huge downside is that this will cause an explosion of ref packs. And in some cases, we would be building against old versions but actually executing against newer ones. Non-ideal.&lt;/p&gt;
&lt;p&gt;In summary, the goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce source-build build breaks&lt;/li&gt;
&lt;li&gt;Avoid a large increase in ref packs.&lt;/li&gt;
&lt;li&gt;Ensure that it is possible to freeze on old versions of a specific component if absolutely necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Work Required&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;This work is dependent on https://github.com/dotnet/source-build/issues/2982&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this repo, do the following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Obtain a report of un-specified dependencies in this repo. This issue will be updated with instructions on how to do so after https://github.com/dotnet/source-build/issues/2982 is complete.&lt;/li&gt;
&lt;li&gt;[ ] Specify all dependencies classified as missing in the report in the &lt;code&gt;eng/Version.Details.xml&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;[ ] Upgrade dependencies regularly via Maestro dependency flow mechanisms, or pin dependencies that should stay the same, with justification.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 29 Aug 2022 16:36:46 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7920</guid>
      <link>https://github.com/dotnet/msbuild/issues/7920</link>
      <title>Issue: MSB4062 when a TaskHost task ships MSBuild assemblies - @rainersigwald</title>
      <description>&lt;p&gt;Reported internally over email in a thread titled &lt;code&gt;Need help with investigation MSBuild Task load problem&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If a task ships MSBuild assemblies in its folder, the new MLC code can cause errors like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;error MSB4062: The &amp;quot;SOMETHING&amp;quot; task could not be loaded from the assembly PATH. 
The assembly 'Microsoft.Build.Utilities.Core, Version=15.1.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' has already loaded been loaded into this MetadataLoadContext. 
Confirm that the &amp;lt;UsingTask&amp;gt; declaration is correct, that the assembly and all its dependencies are available, and that the task contains a public class that implements Microsoft.Build.Framework.ITask. 
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Mon, 29 Aug 2022 15:45:12 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7919</guid>
      <link>https://github.com/dotnet/msbuild/issues/7919</link>
      <title>Issue: Break down MAUI build process - @MichalPavlik</title>
      <description />
      <pubDate>Mon, 29 Aug 2022 14:57:26 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7918</guid>
      <link>https://github.com/dotnet/msbuild/issues/7918</link>
      <title>Issue: MSBuild c++ error link1112 - @VEGAXS</title>
      <description>&lt;h3&gt;Is there an existing issue for this?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;[X] I have searched the existing issues&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;I am making a blueprint compiler, I am going to try to use MSBUILD to compile and test, running the compilation in the default x64 output folder of vs is 100% working, but when I migrate to the desktop, the error of Link1112 appears, I don't understand, why Migrating to other places will not work. The way I compile is to get the folder below the root directory of the output exe and automatically add the path to the system variable
&lt;img src="https://user-images.githubusercontent.com/92320290/187067266-fdbd2e11-f288-4e05-8a02-757908ba8322.png" alt="image" /&gt;
&lt;img src="https://user-images.githubusercontent.com/92320290/187067269-66d10bb9-e771-4d82-b141-bf9b6550a2d4.png" alt="image" /&gt;
&lt;img src="https://user-images.githubusercontent.com/92320290/187067273-a55c0030-dbc9-49f0-ba82-36f7784585b1.png" alt="image" /&gt;
&lt;img src="https://user-images.githubusercontent.com/92320290/187067276-77b286fd-9865-4353-a83d-93d652984215.png" alt="image" /&gt;
&lt;img src="https://user-images.githubusercontent.com/92320290/187067280-279077ee-1467-42c8-ba7d-976728ddc091.png" alt="image" /&gt;
&lt;img src="https://user-images.githubusercontent.com/92320290/187067292-cdefae7e-ebec-4a6b-98ea-0659f2a7182c.png" alt="image" /&gt;
work
&lt;img src="https://user-images.githubusercontent.com/92320290/187067295-d6790201-1a95-44e1-946f-c57af1cbe384.png" alt="image" /&gt;
error
&lt;img src="https://user-images.githubusercontent.com/92320290/187067312-9ab65f95-82bf-41f6-ab8e-aefb13df35aa.png" alt="image" /&gt;&lt;/p&gt;
&lt;h3&gt;Expected Behavior&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Exceptions (if any)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;.NET Version&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Anything else?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Sun, 28 Aug 2022 09:29:23 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7913</guid>
      <link>https://github.com/dotnet/msbuild/issues/7913</link>
      <title>Issue: MSBuild Server - breaking change detected - custom task runs child process - @rokonec</title>
      <description>&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;When custom task runs child process, such as here https://github.com/dotnet/arcade/blob/258a37cd6a7884f771d0f991d9f24d29e292abd0/src/Microsoft.DotNet.Arcade.Sdk/src/InstallDotNetCore.cs#L137-L142 , such processes started from task running at MSBuild server node or worker node will be unattached from stdout/err pipe and outputs from such processes will not make it to target device (console, terminal, file, etc...).&lt;/p&gt;
&lt;p&gt;In some circumstances, such process can even fail, like it did in linux on https://github.com/dotnet/aspnetcore/pull/43028&lt;/p&gt;
&lt;p&gt;It can break customers whom:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have custom tasks which start child process without outputs redirection.&lt;/li&gt;
&lt;li&gt;And, need outputs from such child processes to be redirected to current process outputs.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Steps to Reproduce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;TODO: I will try to create mini repro.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Workaround&lt;/h3&gt;
&lt;p&gt;a) opt-out from msbuild server (env var DOTNET_CLI_DO_NOT_USE_MSBUILD_SERVER=1 or build argument /nr:false)
b) change custom tasks to execute process with output redirected and capture those outputs
c) use MSBuild Exec task to run other processes and tools - it has b) already implemented&lt;/p&gt;
</description>
      <pubDate>Thu, 25 Aug 2022 16:18:33 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7911</guid>
      <link>https://github.com/dotnet/msbuild/issues/7911</link>
      <title>Issue: Dependent project does not generate nuget package when multiple TFMs - @odalet</title>
      <description>&lt;!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. --&gt;
&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;Consider this scenario:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lib1.csproj multi-targets &lt;code&gt;net48&lt;/code&gt; and &lt;code&gt;net6.0&lt;/code&gt; and has &lt;code&gt;GeneratePackageOnBuild&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Lib2.csproj does the same&lt;/li&gt;
&lt;li&gt;Lib1.csproj references Lib2.csproj (both are part of the same solution)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now, let's &lt;code&gt;dotnet build Lib1.csproj&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It generates Lib2 assemblies (one for each target),&lt;/li&gt;
&lt;li&gt;It genrates Lib1 assemblies (one for each target)&lt;/li&gt;
&lt;li&gt;It generates Lib1 &lt;code&gt;nupkg&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;It does not generate Lib2 &lt;code&gt;nupkg&lt;/code&gt; though&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;NB: this does not happen when building the solution in VS&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Steps to Reproduce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;See attached solution: &lt;a href="https://github.com/dotnet/msbuild/files/9423338/MultipleTfmsNugetRepro.zip"&gt;MultipleTfmsNugetRepro.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Then:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-sh"&gt;cd .....\Lib1
dotnet build
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Lib1.nupkg&lt;/code&gt; is created in &lt;code&gt;Lib1\bin\Debug&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Lib2.nupkg&lt;/code&gt; is not &lt;code&gt;Lib2\bin\Debug&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also attached the corresponding binlog (build in release configuration this time): &lt;a href="https://github.com/dotnet/msbuild/files/9423334/binlog.zip"&gt;binlog.zip&lt;/a&gt;&lt;/p&gt;
&lt;!--
* Include as much of the following as possible:

* A minimal sample project that reproduces the issue.
* Your zipped project.
* IDE / CLI steps to create the project and reproduce the behavior.
* Your command line invocation

If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
--&gt;
&lt;h3&gt;Expected Behavior&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Lib2.nupkg&lt;/code&gt; should be generated&lt;/p&gt;
&lt;h3&gt;Actual Behavior&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Lib2.nupkg&lt;/code&gt; is not generated&lt;/p&gt;
&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;p&gt;I've skimmed through the binlog and I think it boils down to &lt;code&gt;IsInnerBuild = true&lt;/code&gt;preventing Lib2's nuget package from being generated. Here is what I guess happens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Because Lib1 is a multi-targeting project, it is split into 2 pseudo-projects: one for each TFM&lt;/li&gt;
&lt;li&gt;Thanks to the project reference, each one of these pseudo-projects transitively builds Lib2 (only for the TFM it is compatible with) in &lt;code&gt;IsInnerBuild = true&lt;/code&gt; mode.
&lt;ul&gt;
&lt;li&gt;This gives us Lib2 assemblies both for &lt;code&gt;net48&lt;/code&gt; and &lt;code&gt;net6.0&lt;/code&gt; targets&lt;/li&gt;
&lt;li&gt;And obviously Lib1 assemblies as well for both targets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Back to Lib1, the root project goes on with building the nuget package and it is generated (and as expected references &lt;code&gt;Lib1.nupkg&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;However, because Lib2 is never built with &lt;code&gt;IsInnerBuild = false&lt;/code&gt;, its package is never generated.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Versions &amp;amp; Configurations&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Visual Studio v17.2.2&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet --version&lt;/code&gt;: 6.0.303&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Thu, 25 Aug 2022 09:29:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7905</guid>
      <link>https://github.com/dotnet/msbuild/issues/7905</link>
      <title>Issue: [Localization] Incorrect build completion msg in Chinese - @anchurcn</title>
      <description>&lt;p&gt;[Build: 0 succeeded, 0 failed, 1 up-to-date, 0 skipped]
should be
“生成”: 0 成功，0 失败，1 最新，0 跳过
not
“生成”: 0 成功，0 失败，1 更新，0 已跳过&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On my vs2022 17.2.5&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <pubDate>Tue, 23 Aug 2022 02:57:01 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7903</guid>
      <link>https://github.com/dotnet/msbuild/issues/7903</link>
      <title>Issue: Roslyn API Analyzers Build Errors In Net7.0 - @BenVillalobos</title>
      <description>&lt;!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. --&gt;
&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/msbuild/pull/7790"&gt;Transitioning MSBuild to net7.0&lt;/a&gt; has raised strange issues from roslyn api analyzers. RS0016 and RS0017 come up as issues but the issues don't seem to make sense. The complaints are about API's not existing (despite them existing). Maybe I'm missing something.&lt;/p&gt;
</description>
      <pubDate>Mon, 22 Aug 2022 18:50:27 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7902</guid>
      <link>https://github.com/dotnet/msbuild/issues/7902</link>
      <title>Issue: Refactor code around obsolete AssemblyName members - @BenVillalobos</title>
      <description>&lt;!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. --&gt;
&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/msbuild/pull/7790"&gt;Porting MSBuild to net7.0&lt;/a&gt; unfortunately runs into &lt;a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/syslib-diagnostics/syslib0037"&gt;deprecated AssemblyName members&lt;/a&gt; errors. It looks like resolving these newly-obsolete members is going to be an involved change. @Forgind has started a thread asking about how we can get a dll's processor architecture in a safe .net sort of way: https://github.com/dotnet/runtime/issues/74040&lt;/p&gt;
</description>
      <pubDate>Mon, 22 Aug 2022 17:53:00 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7900</guid>
      <link>https://github.com/dotnet/msbuild/issues/7900</link>
      <title>Issue: Consider renaming "up-for-grabs" label to "help wanted" - @danmoseley</title>
      <description>&lt;p&gt;It is specially recognized by Github. See context https://github.com/dotnet/runtime/issues/71496&lt;/p&gt;
&lt;p&gt;You'll want to make sure you update upforgrabs.net if necessary, with a PR like https://github.com/up-for-grabs/up-for-grabs.net/pull/3320&lt;/p&gt;
&lt;p&gt;cc @mairaw&lt;/p&gt;
</description>
      <pubDate>Fri, 19 Aug 2022 22:17:45 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7899</guid>
      <link>https://github.com/dotnet/msbuild/issues/7899</link>
      <title>Issue: Refactor How MSBuild Finds its Family - @BenVillalobos</title>
      <description>&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;This entire function should be rewritten to be simpler.&lt;/p&gt;
&lt;p&gt;https://github.com/dotnet/msbuild/blob/b8d947fbe9e0fe1daed2cc06fa9d9c9344a51e61/src/Shared/BuildEnvironmentHelper.cs#L504&lt;/p&gt;
</description>
      <pubDate>Fri, 19 Aug 2022 19:49:58 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/msbuild/issues/7898</guid>
      <link>https://github.com/dotnet/msbuild/issues/7898</link>
      <title>Issue: Assembly manifest issues when building with OutputPath - @ptsoccer</title>
      <description>&lt;!-- This is a template that helps us provide quicker feedback. Please use any relevant sections and delete anything you don't need. --&gt;
&lt;h3&gt;Issue Description&lt;/h3&gt;
&lt;p&gt;I have a solution that has a mix of EXEs and DLLs that I want to build to a single folder to deploy. I use the OutputPath property in msbuild to accomplish this. The issue I'm having is, when there different nuget packages referencing different versions of the same DLL, it likely ends up with one EXE ending up in a situation crashing at runtime because the assembly version doesn't match what it is expecting. Normally binding redirects are automatically added to fix this, but that only works when there is a versioning conflict in  the references of a single EXE. To illistrate, consider 3 files: EXE1, DLL A, and DLL B:&lt;/p&gt;
&lt;p&gt;EXE1 references A v2.0.0
EXE1 references B v3.0.0 references A v3.0.0&lt;/p&gt;
&lt;p&gt;EXE1 will end up with a binding redirect pointing to A v3.0.0 and all is fine.&lt;/p&gt;
&lt;p&gt;However introducing EXE2:&lt;/p&gt;
&lt;p&gt;EXE2 references A v2.0.0
EXE1 references A v2.0.0
EXE1 references B v3.0.0 references A v3.0.0&lt;/p&gt;
&lt;p&gt;EXE1 redirects to A v3.0.0, but EXE2 is still expecting A v2.0.0. Normally this is fine if the EXEs are built to separate folders, but combined into one folder, now there's an issue. If EXE1 is copied last, it will copy A v3.0.0, and EXE2 will crash because it was expecting A v2.0.0. A similar issue would happen if they are copied in reverse.&lt;/p&gt;
&lt;h3&gt;Steps to Reproduce&lt;/h3&gt;
&lt;!--

* Include as much of the following as possible:

* A minimal sample project that reproduces the issue.
* Your zipped project.
* IDE / CLI steps to create the project and reproduce the behaviour.
* Your command line invocation

If providing steps to reproduce the issue proves difficult, consider attaching a binlog:
[Details on sharing binary logs](https://aka.ms/msbuild/binlog)
[More information on binary logs](https://github.com/dotnet/msbuild/blob/main/documentation/wiki/Binary-Log.md)
NOTE: Binary logs capture environment information. Ensure it does not include any information you don't want to be public before you attach one.
If you want to share one just with Microsoft, you can [report a problem through Visual Studio](https://developercommunity.visualstudio.com/report) and share it privately with Microsoft.
--&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/msbuild/files/9383520/ProjectBuildOrderProblem.zip"&gt;ProjectBuildOrderProblem.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The reproduction (attached) is pretty simple. I have 2 &amp;gt;NET Framework 4.6.2 EXEs
EXE ProjectBuildOrderProblem uses System.Runtime.CompilerServices.Unsafe, Version=4.0.4.1 because seemingly that's the default for 4.6.2
EXE ProjectBuildOrderProblem2 uses System.Runtime.CompilerServices.Unsafe, Version=6.0.0.0 because it references System.Collections.Immutable, Version=6.0.0.0 which references System.Runtime.CompilerServices.Unsafe, Version=6.0.0.0&lt;/p&gt;
&lt;p&gt;To build:
msbuild /restore ProjectBuildOrderProblem.sln /p:OutDir=&amp;quot;&amp;lt;pathtoextractedzip&amp;gt;\Output&amp;quot;
Note that &amp;lt;pathtoextractedzip&amp;gt; needs to be replaced with the path to where the zip is extracted.&lt;/p&gt;
&lt;p&gt;After that, just run ProjectBuildOrderProblem.exe and it should crash.&lt;/p&gt;
&lt;h3&gt;Expected Behavior&lt;/h3&gt;
&lt;p&gt;Ideally, a binding redirect would be inserted for ProjectBuildOrderProblem that points to System.Runtime.CompilerServices.Unsafe, Version=6.0.0.0. A compile error explaining the conflict would be acceptable. A runtime error isn't great because it will only be thrown when the reference is actually needed, so even simply opening the EXEs wouldn't be enough to detect the issue in a real project.&lt;/p&gt;
&lt;h3&gt;Actual Behavior&lt;/h3&gt;
&lt;p&gt;The runtime error&lt;/p&gt;
&lt;p&gt;&lt;code&gt;System.IO.FileLoadException: Could not load file or assembly 'System.Runtime.CompilerServices.Unsafe, Version=4.0.4.1, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;is raised.&lt;/p&gt;
&lt;h3&gt;Analysis&lt;/h3&gt;
&lt;!--
* If you have an idea where the problem might lie, let us know that here.
* Please include any pointers to code, relevant changes, or related issues you know of.
--&gt;
&lt;h3&gt;Versions &amp;amp; Configurations&lt;/h3&gt;
&lt;!--
* In a Visual Studio developer command prompt, run `msbuild -version` and paste the output here.
* If applicable, include the version of the tool that invokes MSBuild (Visual Studio, dotnet CLI, etc):

* Post any other relevant configuration settings here.
*   OS, architecture, etc.
--&gt;
&lt;p&gt;MSBuild version&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-Microsoft"&gt;Copyright (C) Microsoft Corporation. All rights reserved.

17.2.1.25201
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Fri, 19 Aug 2022 16:16:06 Z</pubDate>
    </item>
  </channel>
</rss>