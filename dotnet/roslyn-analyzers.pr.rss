<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dotnet/roslyn-analyzers Pull Requests</title>
    <description>Pull Requests from https://github.com/dotnet/roslyn-analyzers, generated by https://github.com/meziantou/IssuesToRss/</description>
    <managingEditor>meziantousite@outlook.com</managingEditor>
    <ttl>60</ttl>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6173</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6173</link>
      <title>PR: CA2213: Fix false positive on disposable field - @Evangelink</title>
      <description>&lt;p&gt;Fixes #6172&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 07:56:05 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6168</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6168</link>
      <title>PR: GM interfaces implementations can be self constrained - @buyaa-n</title>
      <description>&lt;p&gt;Fix bug found in https://github.com/dotnet/runtime/pull/75675&lt;/p&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 00:10:36 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6166</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6166</link>
      <title>PR: `IsDisposable` now also allows value types to be considered disposable - @myblindy</title>
      <description>&lt;!--

Make sure you have read the contribution guidelines: 
- https://docs.microsoft.com/contribute/dotnet/dotnet-contribute-code-analysis#contribute-docs-for-caxxxx-rules
- https://github.com/dotnet/roslyn-analyzers/blob/main/GuidelinesForNewRules.md

If your Pull Request is doing one of the following:

- Adding a new diagnostic analyzer or a code fix
- Adding or updating resource strings used by analyzers and code fixes
- Updating analyzer package versions in [Versions.props](../eng/Versions.props)

Then, make sure to run `msbuild /t:pack /v:m` in the repository root; otherwise, the CI build will fail.

- This command must be run from a Visual Studio Developer Command Prompt
- Alternatively, `dotnet msbuild RoslynAnalyzers.sln -t:pack -v:m` can be used from a standard terminal window

Note: Consider merging the PR base branch (`2.9.x`, `main`, or `release/*`) into your branch before you run the pack command to reduce merge conflicts.

--&gt;
&lt;p&gt;Closes #6151&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 17:46:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6160</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6160</link>
      <title>PR: Add support for detecting and tracking internal APIs - @333fred</title>
      <description>&lt;p&gt;Closes https://github.com/dotnet/roslyn-analyzers/issues/6156. I took the approach of refactoring the analyzer implementation to understand both public and internal, which are tracked in separate files (the new one is InternalAPI.(Un)Shipped.txt). I've also refactored the tests to run on both public and internal, with a few marginal baseline changes to account for some subtle differences between public and internal. Separated out into two commits to ensure that the test modification is correctly detected as a rename and modify, not a new file.&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 23:20:27 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6153</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6153</link>
      <title>PR: New Analyzer: Prevent behavioral change in built-in operators for IntPtr and UIntPtr - @buyaa-n</title>
      <description>&lt;p&gt;Fixes https://github.com/dotnet/runtime/issues/74022&lt;/p&gt;
&lt;p&gt;With &lt;a href="https://github.com/dotnet/csharplang/issues/6065"&gt;numeric IntPtr feature&lt;/a&gt;, System.IntPtr and System.UIntPtr gained some built-in operators (conversions, unary and binary). Those now might throw when overflowing within checked context or not throw in unchecked context compared to the previous &amp;quot;user-defined&amp;quot; operators , which is causing behavioral change in .NET 7.&lt;/p&gt;
&lt;p&gt;This PR only includes the analyzer, fixer is not planned in 7.0 and also the preferred fix might be: &lt;a href="https://github.com/dotnet/roslyn/issues/63421"&gt;IDE0049 should be updated to suggest converting IntPtr to nint and UIntPtr to nuint&lt;/a&gt;. So fixer need to be added after it added to IDE0049&lt;/p&gt;
&lt;p&gt;Detect places where the behavioral changes would be happening and war, scenarios:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For &lt;code&gt;IntPtr&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator +(IntPtr, int)&lt;/code&gt;: Unchecked: same behavior; Checked: may overflow now when it didn't before;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator -(IntPtr, int)&lt;/code&gt;: Unchecked: same behavior; Checked: may overflow now when it didn't before;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit operator IntPtr(long)&lt;/code&gt;: Checked: same behavior; Unchecked: will not throw an overflow exception when it could have before in 32-bit contexts;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit operator void*(IntPtr)&lt;/code&gt;: Unchecked: same behavior; Checked: may overflow now when it didn't before;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit operator IntPtr(void*)&lt;/code&gt;: Unchecked: same behavior; Checked: may overflow now when it didn't before;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit operator int(IntPtr)&lt;/code&gt;: Checked: same behavior; Unchecked: will not throw an overflow exception when it could have before in 64-bit contexts;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For &lt;code&gt;UIntPtr&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;operator +(UIntPtr, int)&lt;/code&gt;: Unchecked: same behavior; Checked: may overflow now when it didn't before;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;operator -(UIntPtr, int)&lt;/code&gt;: Unchecked: same behavior; Checked: may overflow now when it didn't before;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit operator UIntPtr(ulong)&lt;/code&gt;: Checked: same behavior; Unchecked: will not throw an overflow exception when it could have before in 32-bit contexts;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;explicit operator uint(UIntPtr)&lt;/code&gt;: Checked: same behavior; Unchecked: will not throw an overflow exception when it could have before in 64-bit contexts;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;These analyzer should be triggered only if the underlying runtime supports &lt;a href="https://github.com/dotnet/csharplang/issues/6065"&gt;numeric IntPtr feature&lt;/a&gt;, i.e. check if &lt;code&gt;System.Runtime.CompilerServices.RuntimeFeature.NumericIntPtr&lt;/code&gt; is available in corelib as&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suggested severity : &amp;quot;Warning&amp;quot;
Suggested category : &amp;quot;Reliability&amp;quot;&lt;/p&gt;
&lt;p&gt;CC @jeffhandley @tannergooding @eerhardt&lt;/p&gt;
</description>
      <pubDate>Thu, 08 Sep 2022 16:59:04 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6147</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6147</link>
      <title>PR: Tracks disposed objects through implicit interface implementations - @myblindy</title>
      <description>&lt;!--

Make sure you have read the contribution guidelines: 
- https://docs.microsoft.com/contribute/dotnet/dotnet-contribute-code-analysis#contribute-docs-for-caxxxx-rules
- https://github.com/dotnet/roslyn-analyzers/blob/main/GuidelinesForNewRules.md

If your Pull Request is doing one of the following:

- Adding a new diagnostic analyzer or a code fix
- Adding or updating resource strings used by analyzers and code fixes
- Updating analyzer package versions in [Versions.props](../eng/Versions.props)

Then, make sure to run `msbuild /t:pack /v:m` in the repository root; otherwise, the CI build will fail.

- This command must be run from a Visual Studio Developer Command Prompt
- Alternatively, `dotnet msbuild RoslynAnalyzers.sln -t:pack -v:m` can be used from a standard terminal window

Note: Consider merging the PR base branch (`2.9.x`, `main`, or `release/*`) into your branch before you run the pack command to reduce merge conflicts.

--&gt;
&lt;p&gt;Fixes https://github.com/dotnet/roslyn-analyzers/issues/6075&lt;/p&gt;
</description>
      <pubDate>Sat, 03 Sep 2022 01:03:48 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6142</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6142</link>
      <title>PR: CA1041: Add test where argument order doesn't match parameter order - @Youssef1313</title>
      <description>&lt;!--

Make sure you have read the contribution guidelines: 
- https://docs.microsoft.com/contribute/dotnet/dotnet-contribute-code-analysis#contribute-docs-for-caxxxx-rules
- https://github.com/dotnet/roslyn-analyzers/blob/main/GuidelinesForNewRules.md

If your Pull Request is doing one of the following:

- Adding a new diagnostic analyzer or a code fix
- Adding or updating resource strings used by analyzers and code fixes
- Updating analyzer package versions in [Versions.props](../eng/Versions.props)

Then, make sure to run `msbuild /t:pack /v:m` in the repository root; otherwise, the CI build will fail.

- This command must be run from a Visual Studio Developer Command Prompt
- Alternatively, `dotnet msbuild RoslynAnalyzers.sln -t:pack -v:m` can be used from a standard terminal window

Note: Consider merging the PR base branch (`2.9.x`, `main`, or `release/*`) into your branch before you run the pack command to reduce merge conflicts.

--&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 14:34:04 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6140</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6140</link>
      <title>PR: Update public pool names - @alexperovich</title>
      <description>&lt;p&gt;This change is required for builds to continue working in the new org, dev.azure.com/dnceng-public.&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 04:26:54 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6139</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6139</link>
      <title>PR: Update public pool names - @MattGal</title>
      <description>&lt;p&gt;This change is required to continue building PRs in the dotnet public repo.  The agents and images used in the new project / organization are identical and build regressions are not expected.  Updating files under eng/common is intentional to move as much as possible over to viable build agents (normally this is not done).&lt;/p&gt;
&lt;p&gt;For questions / concerns, please stop by the .NET Core Engineering Services &lt;a href="https://teams.microsoft.com/l/channel/19%3aafba3d1545dd45d7b79f34c1821f6055%40thread.skype/First%2520Responders?groupId=4d73664c-9f2f-450d-82a5-c2f02756606d&amp;amp;tenantId=72f988bf-86f1-41af-91ab-2d7cd011db47"&gt;First Responders Teams Channel&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 00:44:55 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6126</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6126</link>
      <title>PR: New Analyzer: Implement Generic Math Interfaces Correctly  - @buyaa-n</title>
      <description>&lt;p&gt;Fixes https://github.com/dotnet/runtime/issues/69775&lt;/p&gt;
&lt;p&gt;With &lt;a href="https://github.com/dotnet/csharplang/issues/4436"&gt;Static abstract members in interfaces&lt;/a&gt; the &lt;a href="https://github.com/dotnet/designs/pull/205"&gt;Generic Math Support feature&lt;/a&gt; uses the &lt;a href="https://wikipedia.org/wiki/Curiously_recurring_template_pattern"&gt;Curiously Recurring Template Pattern&lt;/a&gt; (CRTP) to enable scenarios where interfaces can declare that a method takes or returns the concrete type that implements the interface. For example: https://github.com/dotnet/runtime/blob/6ca8c9bc0c4a5fc1082c690b6768ab3be8761b11/src/libraries/System.Private.CoreLib/src/System/IParsable.cs#L10-L27&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public interface IParsable&amp;lt;TSelf&amp;gt; where TSelf : IParsable&amp;lt;TSelf&amp;gt;
{
    /// &amp;lt;summary&amp;gt;Parses a string into a value.&amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;s&amp;quot;&amp;gt;The string to parse.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;provider&amp;quot;&amp;gt;An object that provides culture-specific formatting information about &amp;lt;paramref name=&amp;quot;s&amp;quot; /&amp;gt;.&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;The result of parsing &amp;lt;paramref name=&amp;quot;s&amp;quot; /&amp;gt;.&amp;lt;/returns&amp;gt;
    static abstract TSelf Parse(string s, IFormatProvider? provider);

    /// &amp;lt;summary&amp;gt;Tries to parses a string into a value.&amp;lt;/summary&amp;gt;
    /// &amp;lt;param name=&amp;quot;s&amp;quot;&amp;gt;The string to parse.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;provider&amp;quot;&amp;gt;An object that provides culture-specific formatting information about &amp;lt;paramref name=&amp;quot;s&amp;quot; /&amp;gt;.&amp;lt;/param&amp;gt;
    /// &amp;lt;param name=&amp;quot;result&amp;quot;&amp;gt;On return, contains the result of succesfully parsing &amp;lt;paramref name=&amp;quot;s&amp;quot; /&amp;gt; or an undefined value on failure.&amp;lt;/param&amp;gt;
    /// &amp;lt;returns&amp;gt;&amp;lt;c&amp;gt;true&amp;lt;/c&amp;gt; if &amp;lt;paramref name=&amp;quot;s&amp;quot; /&amp;gt; was successfully parsed; otherwise, &amp;lt;c&amp;gt;false&amp;lt;/c&amp;gt;.&amp;lt;/returns&amp;gt;
    static abstract bool TryParse([NotNullWhen(true)] string? s, IFormatProvider? provider, out TSelf result);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this example, &lt;code&gt;TSelf&lt;/code&gt; will be filled by the deriving type with its own type:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;public readonly struct DateOnly : IParsable&amp;lt;DateOnly&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;The Issue&lt;/h3&gt;
&lt;p&gt;An issue is that nothing is enforcing that a type implementing a curiously recurring template interface fills the generic type with its same type. For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;public readonly struct MyDate : IParsable&amp;lt;DateOnly&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above definition will compile successfully - it is a valid definition from a language perspective. However, &lt;code&gt;MyDate&lt;/code&gt; cannot be passed to the above &lt;code&gt;ParseAndWrite&amp;lt;T&amp;gt;(string data)&lt;/code&gt; method. Trying to use &lt;code&gt;MyDate&lt;/code&gt; in this way will result in a compiler error:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;ParseAndWrite&amp;lt;MyDate&amp;gt;(&amp;quot;2022-05-24&amp;quot;); // error CS0315: The type 'MyDate' cannot be used as type parameter 'T' in the generic type or method 'ParseAndWrite&amp;lt;T&amp;gt;(string)'. There is no boxing conversion from 'MyDate' to 'System.IParsable&amp;lt;MyDate&amp;gt;'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is confusing. A similar error &lt;code&gt;CS0311&lt;/code&gt; is raised if &lt;code&gt;MyDate&lt;/code&gt; is a &lt;code&gt;class&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even worse, the &lt;code&gt;MyDate&lt;/code&gt; type could have been shipped publicly in a library. And only once consumers of this library try to use it as &lt;code&gt;IParsable&amp;lt;DateOnly&amp;gt;&lt;/code&gt;, they get the compiler error. When the real error was that &lt;code&gt;MyDate&lt;/code&gt; was not defined correctly.&lt;/p&gt;
&lt;p&gt;In the future, we hope to adopt a full-fledged self-type mechanism (such as https://github.com/dotnet/csharplang/issues/5413) in the Generic Math interfaces. We would like to enforce that any implementers of the Generic Math interfaces now would not be broken with the adoption of a self-type C# feature in the future.&lt;/p&gt;
&lt;h3&gt;The Analyzer Requirement:&lt;/h3&gt;
&lt;p&gt;The analyzer should be thought of as a stop gap solution for generic math until there is a C# feature.
We will have list of generic math interfaces that analyzer would use, the analyzer will flag any Type that implements one of the interfaces and fills &lt;code&gt;TSelf&lt;/code&gt; with a non-generic Type other than itself. If the &lt;code&gt;TSelf&lt;/code&gt; is filled with another generic Type, such as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;public readonly struct MyDate&amp;lt;TSelf&amp;gt; : IParsable&amp;lt;TSelf&amp;gt;
    where TSelf : IParsable&amp;lt;TSelf&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The analyzer will not flag the above Type. But should flag:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;public readonly struct MyDate : IParsable&amp;lt;DateOnly&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
&lt;summary&gt;The list of generic math interfaces&lt;/summary&gt;
&lt;pre&gt;
* `IParsable&lt;TSelf&gt;`
* `ISpanParsable&lt;TSelf&gt;`
* `IAdditionOperators&lt;TSelf, TOther, TResult&gt;`
* `IAdditiveIdentity&lt;TSelf, TResult&gt;`
* `IBinaryFloatingPointIeee754&lt;TSelf&gt;`
* `IBinaryInteger&lt;TSelf&gt;`
* `IBinaryNumber&lt;TSelf&gt;`
* `IBitwiseOperators&lt;TSelf, TOther, TResult&gt;`
* `IComparisonOperators&lt;TSelf, TOther&gt;`
* `IDecrementOperators&lt;TSelf&gt;`
* `IDivisionOperators&lt;TSelf, TOther, TResult&gt;`
* `IEqualityOperators&lt;TSelf, TOther&gt;`
* `IExponentialFunctions&lt;TSelf&gt;`
* `IFloatingPointIeee754&lt;TSelf&gt;`
* `IFloatingPoint&lt;TSelf&gt;`
* `IHyperbolicFunctions&lt;TSelf&gt;`
* `IIncrementOperators&lt;TSelf&gt;`
* `ILogarithmicFunctions&lt;TSelf&gt;`
* `IMinMaxValue&lt;TSelf&gt;`
* `IModulusOperators&lt;TSelf, TOther, TResult&gt;`
* `IMultiplicativeIdentity&lt;TSelf, TResult&gt;`
* `IMultiplyOperators&lt;TSelf, TOther, TResult&gt;`
* `INumberBase&lt;TSelf&gt;`
* `INumber&lt;TSelf&gt;`
* `IPowerFunctions&lt;TSelf&gt;`
* `IRootFunctions&lt;TSelf&gt;`
* `IShiftOperators&lt;TSelf, TResult&gt;`
* `ISignedNumber&lt;TSelf&gt;`
* `ISubtractionOperators&lt;TSelf, TOther, TResult&gt;`
* `ITrigonometricFunctions&lt;TSelf&gt;`
* `IUnaryNegationOperators&lt;TSelf, TResult&gt;`
* `IUnaryPlusOperators&lt;TSelf, TResult&gt;`
* `IUnsignedNumber&lt;TSelf&gt;`
&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;&lt;strong&gt;Severity&lt;/strong&gt;: Warning
&lt;strong&gt;Category&lt;/strong&gt;: Usage&lt;/p&gt;
</description>
      <pubDate>Wed, 24 Aug 2022 18:23:52 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6124</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6124</link>
      <title>PR: Fix detection of DisableRuntimeMarshalling delegate interop to only warn when the delegate type is in an assembly with DisableRuntimeMarshalling - @jkoritzinsky</title>
      <description>&lt;!--

Make sure you have read the contribution guidelines: 
- https://docs.microsoft.com/contribute/dotnet/dotnet-contribute-code-analysis#contribute-docs-for-caxxxx-rules
- https://github.com/dotnet/roslyn-analyzers/blob/main/GuidelinesForNewRules.md

If your Pull Request is doing one of the following:

- Adding a new diagnostic analyzer or a code fix
- Adding or updating resource strings used by analyzers and code fixes
- Updating analyzer package versions in [Versions.props](../eng/Versions.props)

Then, make sure to run `msbuild /t:pack /v:m` in the repository root; otherwise, the CI build will fail.

- This command must be run from a Visual Studio Developer Command Prompt
- Alternatively, `dotnet msbuild RoslynAnalyzers.sln -t:pack -v:m` can be used from a standard terminal window

Note: Consider merging the PR base branch (`2.9.x`, `main`, or `release/*`) into your branch before you run the pack command to reduce merge conflicts.

--&gt;
&lt;p&gt;Fix #6094&lt;/p&gt;
</description>
      <pubDate>Fri, 19 Aug 2022 23:40:42 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6123</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6123</link>
      <title>PR: Update M.CA.Testing to 1.1.2-beta1.22419.1 - @JoeRobich</title>
      <description>&lt;p&gt;Resolves https://github.com/dotnet/roslyn-sdk/issues/1006&lt;/p&gt;
&lt;!--

Make sure you have read the contribution guidelines: 
- https://docs.microsoft.com/contribute/dotnet/dotnet-contribute-code-analysis#contribute-docs-for-caxxxx-rules
- https://github.com/dotnet/roslyn-analyzers/blob/main/GuidelinesForNewRules.md

If your Pull Request is doing one of the following:

- Adding a new diagnostic analyzer or a code fix
- Adding or updating resource strings used by analyzers and code fixes
- Updating analyzer package versions in [Versions.props](../eng/Versions.props)

Then, make sure to run `msbuild /t:pack /v:m` in the repository root; otherwise, the CI build will fail.

- This command must be run from a Visual Studio Developer Command Prompt
- Alternatively, `dotnet msbuild RoslynAnalyzers.sln -t:pack -v:m` can be used from a standard terminal window

Note: Consider merging the PR base branch (`2.9.x`, `main`, or `release/*`) into your branch before you run the pack command to reduce merge conflicts.

--&gt;
</description>
      <pubDate>Fri, 19 Aug 2022 21:16:41 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6121</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6121</link>
      <title>PR: Remove `[Shared]` from an analyzer - @Youssef1313</title>
      <description>&lt;p&gt;I don't think &lt;code&gt;[Shared]&lt;/code&gt; will do anything for analyzers.&lt;/p&gt;
</description>
      <pubDate>Thu, 18 Aug 2022 10:37:47 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6119</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6119</link>
      <title>PR: Fix target-typed new false positive - @Youssef1313</title>
      <description>&lt;p&gt;Fixes https://github.com/dotnet/roslyn-analyzers/issues/5828&lt;/p&gt;
&lt;p&gt;@mavasani @sharwell for a small PR review.&lt;/p&gt;
&lt;p&gt;See https://github.com/dotnet/roslyn/issues/59171 for details.&lt;/p&gt;
</description>
      <pubDate>Thu, 18 Aug 2022 06:28:08 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6118</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6118</link>
      <title>PR: Remove IDE0055 (fix formatting) suppression - @Youssef1313</title>
      <description>&lt;!--

Make sure you have read the contribution guidelines: 
- https://docs.microsoft.com/contribute/dotnet/dotnet-contribute-code-analysis#contribute-docs-for-caxxxx-rules
- https://github.com/dotnet/roslyn-analyzers/blob/main/GuidelinesForNewRules.md

If your Pull Request is doing one of the following:

- Adding a new diagnostic analyzer or a code fix
- Adding or updating resource strings used by analyzers and code fixes
- Updating analyzer package versions in [Versions.props](../eng/Versions.props)

Then, make sure to run `msbuild /t:pack /v:m` in the repository root; otherwise, the CI build will fail.

- This command must be run from a Visual Studio Developer Command Prompt
- Alternatively, `dotnet msbuild RoslynAnalyzers.sln -t:pack -v:m` can be used from a standard terminal window

Note: Consider merging the PR base branch (`2.9.x`, `main`, or `release/*`) into your branch before you run the pack command to reduce merge conflicts.

--&gt;
</description>
      <pubDate>Thu, 18 Aug 2022 06:01:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6117</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6117</link>
      <title>PR: Update Roslyn version - @Youssef1313</title>
      <description>&lt;p&gt;Commit-by-commit review is easier.&lt;/p&gt;
</description>
      <pubDate>Thu, 18 Aug 2022 05:59:00 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6116</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6116</link>
      <title>PR: React to Obsoleted attribute renaming - @buyaa-n</title>
      <description>&lt;p&gt;The &lt;code&gt;ObsoletedInOSPlatformAttribute&lt;/code&gt; is renamed to &lt;code&gt;ObsoletedOSPlatformAttribute&lt;/code&gt; with https://github.com/dotnet/runtime/issues/72970, updating the Platform Compat Analyzer accordingly&lt;/p&gt;
</description>
      <pubDate>Thu, 18 Aug 2022 00:15:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6115</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6115</link>
      <title>PR: Add analyzer for banning APIs in analyzers - @RikkiGibson</title>
      <description>&lt;p&gt;See dotnet/roslyn#63290&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We take the existing SymbolIsBannedAnalyzer and extract everything to a base class except the specific way the set of banned symbols is obtained.&lt;/li&gt;
&lt;li&gt;We source-link the new SymbolIsBannedAnalyzerBase into Microsoft.CodeAnalysis.Analyzers and implement SymbolIsBannedInAnalyzersAnalyzer. Instead of reading BannedSymbols from AdditionalFiles, we read from a specific embedded resource. We also use a different diagnostic ID so that if users really want to suppress diagnostics from this, then they can do so independently of the &amp;quot;regular&amp;quot; banned symbol diagnostic.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In order to reduce the magnitude of the break/disruption here, we've done the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a well-known msbuild property &lt;code&gt;EnforceExtendedAnalyzerRules&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;When this property is not specified, we warn on presence of any analyzers or generators in the project, suggesting that the user specifies &lt;code&gt;&amp;lt;EnforceExtendedAnalyzerRules&amp;gt;true&amp;lt;/EnforceExtendedAnalyzerRules&amp;gt;&lt;/code&gt;. But they could also specify &lt;code&gt;&amp;lt;EnforceExtendedAnalyzerRules&amp;gt;false&amp;lt;/EnforceExtendedAnalyzerRules&amp;gt;&lt;/code&gt; if they just want to shut these new warnings up entirely.&lt;/li&gt;
&lt;li&gt;When &lt;code&gt;&amp;lt;EnforceExtendedAnalyzerRules&amp;gt;true&amp;lt;/EnforceExtendedAnalyzerRules&amp;gt;&lt;/code&gt; is specified, we go ahead and actually subject the user to a potentially quite large amount of new errors if they are using banned APIs.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This gif roughly demonstrates the onboarding/usage experience:
&lt;img src="https://user-images.githubusercontent.com/5833655/187804936-c3d218a6-fd34-468c-8d69-b554d16ea2c0.gif" alt="analyzerbannedapis" /&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 18 Aug 2022 00:04:31 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6114</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6114</link>
      <title>PR: Do not warn on zero-length allocations in unspecified params parameters in attributes - @333fred</title>
      <description>&lt;p&gt;Fixes an issue introduced with https://github.com/dotnet/roslyn/pull/59369/, as the AvoidZeroLengthAllocations analyzer did not see these params parameters before.&lt;/p&gt;
</description>
      <pubDate>Wed, 17 Aug 2022 21:53:36 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6113</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6113</link>
      <title>PR: Update MicrosoftCodeAnalysisVersionForTests - @Youssef1313</title>
      <description />
      <pubDate>Wed, 17 Aug 2022 20:50:19 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6093</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6093</link>
      <title>PR: track disposable calls through explicit interface implementations - @myblindy</title>
      <description>&lt;!--

Make sure you have read the contribution guidelines: 
- https://docs.microsoft.com/contribute/dotnet/dotnet-contribute-code-analysis#contribute-docs-for-caxxxx-rules
- https://github.com/dotnet/roslyn-analyzers/blob/main/GuidelinesForNewRules.md

If your Pull Request is doing one of the following:

- Adding a new diagnostic analyzer or a code fix
- Adding or updating resource strings used by analyzers and code fixes
- Updating analyzer package versions in [Versions.props](../eng/Versions.props)

Then, make sure to run `msbuild /t:pack /v:m` in the repository root; otherwise, the CI build will fail.

- This command must be run from a Visual Studio Developer Command Prompt
- Alternatively, `dotnet msbuild RoslynAnalyzers.sln -t:pack -v:m` can be used from a standard terminal window

Note: Consider merging the PR base branch (`2.9.x`, `main`, or `release/*`) into your branch before you run the pack command to reduce merge conflicts.

--&gt;
&lt;p&gt;Fixes https://github.com/dotnet/roslyn-analyzers/issues/6075&lt;/p&gt;
</description>
      <pubDate>Mon, 01 Aug 2022 16:42:54 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6091</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6091</link>
      <title>PR: Revise some IObjectCreationOperation.Constructor usages - @Youssef1313</title>
      <description>&lt;p&gt;Part of #6089
I haven't reviewed all usages.&lt;/p&gt;
</description>
      <pubDate>Sat, 30 Jul 2022 12:34:29 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6088</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6088</link>
      <title>PR: Change Tools TFMs to net7.0 - @lbussell</title>
      <description>&lt;p&gt;Roslyn analyzers needs a target framework of .NET 7.0 for source build to build without prebuilts. There are some projects in the Tools/ directory of roslyn-analyzers that still target net6.0.&lt;/p&gt;
</description>
      <pubDate>Fri, 29 Jul 2022 21:56:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6084</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6084</link>
      <title>PR: Update Newtonsoft.Json version to 13.0.1 - @JoeRobich</title>
      <description>&lt;!--

Make sure you have read the contribution guidelines: 
- https://docs.microsoft.com/contribute/dotnet/dotnet-contribute-code-analysis#contribute-docs-for-caxxxx-rules
- https://github.com/dotnet/roslyn-analyzers/blob/main/GuidelinesForNewRules.md

If your Pull Request is doing one of the following:

- Adding a new diagnostic analyzer or a code fix
- Adding or updating resource strings used by analyzers and code fixes
- Updating analyzer package versions in [Versions.props](../eng/Versions.props)

Then, make sure to run `msbuild /t:pack /v:m` in the repository root; otherwise, the CI build will fail.

- This command must be run from a Visual Studio Developer Command Prompt
- Alternatively, `dotnet msbuild RoslynAnalyzers.sln -t:pack -v:m` can be used from a standard terminal window

Note: Consider merging the PR base branch (`2.9.x`, `main`, or `release/*`) into your branch before you run the pack command to reduce merge conflicts.

--&gt;
&lt;p&gt;Addresses &lt;a href="https://dnceng.visualstudio.com/internal/_componentGovernance/dotnet-roslyn-analyzers/alert/7073665?typeId=6250578"&gt;compliance issue&lt;/a&gt; (microsoft)&lt;/p&gt;
</description>
      <pubDate>Wed, 27 Jul 2022 22:31:45 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6082</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6082</link>
      <title>PR: Add ObsoletedInOSPlatform attribute support in Platform Compat Analyzer - @buyaa-n</title>
      <description>&lt;p&gt;We have &lt;a href="https://github.com/dotnet/runtime/issues/68557"&gt;added ObsoletedInOSPlatform Attribute&lt;/a&gt; in 7.0 recently, now need to add the analyzer support for this in PlatformCompatibilityAnalyzer. By the approved API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the warnings for obsoleted should have different diagnostic ID&lt;/li&gt;
&lt;li&gt;optional Message and Url properties that should be appended to the existing message.&lt;/li&gt;
&lt;li&gt;optional Message property is added to the UnsupportedOSPlatform attribute which also needs update in the analyzer&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Call sites having &lt;code&gt;ObsoletedInOSPlatform&lt;/code&gt;  or &lt;code&gt;UnsupportedOSPlatform&lt;/code&gt; attributes with greater than or equal version could suppress obsoleted warnings&lt;/li&gt;
&lt;li&gt;Same as unsupported attribute diagnostic the obsoleted diagnostics could be guarded with negated &lt;code&gt;OperatingSystem&lt;/code&gt; APIs (for example: &lt;code&gt;if (!OperatingSystem.IsLinux()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Also could be guarded with an API that annotated with &lt;code&gt;UnsupportedOSPlatformGuard&lt;/code&gt; attribute having matching platform/version, same for negated &lt;code&gt;SupportedOSPlatformGuard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No warning if the obsoleted platform and version is not in the call site supported range. Same as &lt;code&gt;UnsupportedOSPlatform&lt;/code&gt; no warning for cross platform build in case the platform is not included in MSBuild SupportedPlatforms list&lt;/li&gt;
&lt;li&gt;Warning message structure is same as the existing warnings, user message and/or Url will be appended at the end of each platform/version&lt;/li&gt;
&lt;li&gt;MacOS == OSX and iOS is MacCatalyst relations would work same as how it does for unsupported scenarios&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Fixes https://github.com/dotnet/roslyn-analyzers/issues/6081&lt;/p&gt;
</description>
      <pubDate>Fri, 22 Jul 2022 23:05:06 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6080</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6080</link>
      <title>PR: Refine RS0034 diagnostic title and message to describe public visibility requirement - @AArnott</title>
      <description>&lt;p&gt;Fixes #6037&lt;/p&gt;
</description>
      <pubDate>Thu, 21 Jul 2022 19:32:49 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/pull/6070</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/pull/6070</link>
      <title>PR: Update README.md - @dao-net</title>
      <description>&lt;p&gt;Added paragraph with link to instructions on how to use BannedApiAnalyzers.&lt;/p&gt;
&lt;!--

Make sure you have read the contribution guidelines: 
- https://docs.microsoft.com/contribute/dotnet/dotnet-contribute-code-analysis#contribute-docs-for-caxxxx-rules
- https://github.com/dotnet/roslyn-analyzers/blob/main/GuidelinesForNewRules.md

If your Pull Request is doing one of the following:

- Adding a new diagnostic analyzer or a code fix
- Adding or updating resource strings used by analyzers and code fixes
- Updating analyzer package versions in [Versions.props](../eng/Versions.props)

Then, make sure to run `msbuild /t:pack /v:m` in the repository root; otherwise, the CI build will fail.

- This command must be run from a Visual Studio Developer Command Prompt
- Alternatively, `dotnet msbuild RoslynAnalyzers.sln -t:pack -v:m` can be used from a standard terminal window

Note: Consider merging the PR base branch (`2.9.x`, `main`, or `release/*`) into your branch before you run the pack command to reduce merge conflicts.

--&gt;
</description>
      <pubDate>Fri, 15 Jul 2022 10:13:56 Z</pubDate>
    </item>
  </channel>
</rss>