<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dotnet/roslyn-analyzers Issues</title>
    <description>Issues from https://github.com/dotnet/roslyn-analyzers, generated by https://github.com/meziantou/IssuesToRss/</description>
    <managingEditor>meziantousite@outlook.com</managingEditor>
    <ttl>60</ttl>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6176</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6176</link>
      <title>Issue: Add rule against using synchronous disposal methods on type implementing IAsyncDisposable - @tkreindler</title>
      <description>&lt;!-- Please refer to https://github.com/dotnet/roslyn-analyzers/blob/main/GuidelinesForNewRules.md --&gt;
&lt;h3&gt;Describe the problem you are trying to solve&lt;/h3&gt;
&lt;p&gt;As a library owner I currently have types implementing IDisposable. I'm rolling out a new feature where those types now also implement IAsyncDisposable on top of IDisposable. I'm worried my consumers will continue to use synchronous using statements instead of migrating to the 'await using'. I'd like a new rule (suggestion by default) that would be flagged anytime a 'using x' or 'x.Dispose()' call is made on a type 'x : IAsyncDisposable' from within an asynchronous context (method returns a Task).&lt;/p&gt;
&lt;h3&gt;Describe suggestions on how to achieve the rule&lt;/h3&gt;
&lt;p&gt;You could detect whether the user is in a synchronous context like is done in CA1849. From there it would trigger for all types implementing IAsyncDisposable and flag all calls to Dispose(), either directly or through a using statement. The auto generated fix would be to switch a using statement to 'await using' and a Dispose statement to DisposeAsync.&lt;/p&gt;
&lt;h3&gt;Additional context&lt;/h3&gt;
&lt;p&gt;None necessary&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 22:11:44 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6175</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6175</link>
      <title>Issue: CA1843 - false positive when explicit invoke with list of tasks ? - @fforjan</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1843"&gt;ca1843&lt;/a&gt;: &lt;code&gt;Do not use 'WaitAll' with a single task&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NuGet Package&lt;/strong&gt;: &lt;a href="https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers"&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: 6.0.0&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/601810/191539430-2f1781b2-a529-43fe-b0ca-cb3e5e75e5f2.png" alt="image" /&gt;
We have a extension method which does a bit more than waiting on a set of task and emit a warning when calling Task.WaitAll&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;Simply create such extension method :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  public static void FromResult(this Task&amp;lt;Saved[]&amp;gt; list)
        {
            Task.WaitAll(list);         
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;Should not have a CA1843 warning&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;emit CA1843 on the call to Task.WaitAll&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 15:02:22 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6174</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6174</link>
      <title>Issue: CA2213 does not cross project boundaries - @erichiller</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2213"&gt;CA2213&lt;/a&gt;: &lt;code&gt;'MockRegistryConsumerMainLibs2' contains field '_aDisposable' that is of IDisposable type 'ADisposable', but it is never disposed. Change the Dispose method on 'MockRegistryConsumerMainLibs2' to call Close or Dispose on this field.&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Version&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;.NET SDK:
 Version:   7.0.100-rc.1.22431.12
 Commit:    f1cf61e1c0

Runtime Environment:
 OS Name:     ubuntu
 OS Version:  22.04
 OS Platform: Linux
 RID:         ubuntu.22.04-x64
 Base Path:   /usr/share/dotnet/sdk/7.0.100-rc.1.22431.12/

Host:
  Version:      7.0.0-rc.1.22426.10
  Architecture: x64
  Commit:       06aceb7015

.NET SDKs installed:
  6.0.401 [/usr/share/dotnet/sdk]
  7.0.100-preview.7.22377.5 [/usr/share/dotnet/sdk]
  7.0.100-rc.1.22431.12 [/usr/share/dotnet/sdk]

.NET runtimes installed:
  Microsoft.AspNetCore.App 6.0.9 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 7.0.0-preview.7.22376.6 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 7.0.0-rc.1.22427.2 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 6.0.9 [/usr/share/dotnet/shared/Microsoft.NETCore.App]
  Microsoft.NETCore.App 7.0.0-preview.7.22375.6 [/usr/share/dotnet/shared/Microsoft.NETCore.App]
  Microsoft.NETCore.App 7.0.0-rc.1.22426.10 [/usr/share/dotnet/shared/Microsoft.NETCore.App]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I've tried both with and without &lt;code&gt;microsoft.codeanalysis.netanalyzers.7.0.0-preview1.22403.2.nupkg&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;When a disposable value is returned from a class in another project (same solution), it is always marked as an error, the same code, in the same project has no error.&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;See demo project: https://github.com/erichiller/RoslynAnalyzerTests&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/RoslynAnalyzerTests/RoslynAnalyzerTests $ dotnet build --no-incremental 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Will return:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;MSBuild version 17.4.0-preview-22428-01+14c24b2d3 for .NET
  Determining projects to restore...
  All projects are up-to-date for restore.
/usr/share/dotnet/sdk/7.0.100-rc.1.22431.12/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(219,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [/home/eric/dev/scratch/RoslynAnalyzerTests/RoslynAnalyzerTests/RoslynAnalyzerTests.csproj]
/usr/share/dotnet/sdk/7.0.100-rc.1.22431.12/Sdks/Microsoft.NET.Sdk/targets/Microsoft.NET.RuntimeIdentifierInference.targets(219,5): message NETSDK1057: You are using a preview version of .NET. See: https://aka.ms/dotnet-support-policy [/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MainLibs.csproj]
  Libs -&amp;gt; /home/eric/dev/scratch/RoslynAnalyzerTests/Libs/bin/Debug/net7.0/Libs.dll
/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MockRegistryConsumerMainLibs1.cs(9,48): warning CA2213: 'MockRegistryConsumerMainLibs1' contains field '_entryDummy' that is of IDisposable type 'ServiceRegistryEntryDummy', but it is never disposed. Change the Dispose method on 'MockRegistryConsumerMainLibs1' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MainLibs.csproj]
/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MockRegistryConsumerMainLibs2.cs(9,48): warning CA2213: 'MockRegistryConsumerMainLibs2' contains field '_aDisposable' that is of IDisposable type 'ADisposable', but it is never disposed. Change the Dispose method on 'MockRegistryConsumerMainLibs2' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MainLibs.csproj]
/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MockRegistryConsumerMainLibs2.cs(8,48): warning CA2213: 'MockRegistryConsumerMainLibs2' contains field '_entryDummy' that is of IDisposable type 'ServiceRegistryEntryDummy', but it is never disposed. Change the Dispose method on 'MockRegistryConsumerMainLibs2' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MainLibs.csproj]
/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MockRegistryConsumerMainLibs1.cs(10,48): warning CA2213: 'MockRegistryConsumerMainLibs1' contains field '_aDisposable' that is of IDisposable type 'ADisposable', but it is never disposed. Change the Dispose method on 'MockRegistryConsumerMainLibs1' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MainLibs.csproj]
  MainLibs -&amp;gt; /home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/bin/Debug/net7.0/MainLibs.dll
/home/eric/dev/scratch/RoslynAnalyzerTests/RoslynAnalyzerTests/Program.cs(107,34): warning CA2213: 'FooReceiver6' contains field '_fooResource' that is of IDisposable type 'FooResource', but it is never disposed. Change the Dispose method on 'FooReceiver6' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/RoslynAnalyzerTests/RoslynAnalyzerTests.csproj]
  RoslynAnalyzerTests -&amp;gt; /home/eric/dev/scratch/RoslynAnalyzerTests/RoslynAnalyzerTests/bin/Debug/net7.0/RoslynAnalyzerTests.dll

Build succeeded.

/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MockRegistryConsumerMainLibs1.cs(9,48): warning CA2213: 'MockRegistryConsumerMainLibs1' contains field '_entryDummy' that is of IDisposable type 'ServiceRegistryEntryDummy', but it is never disposed. Change the Dispose method on 'MockRegistryConsumerMainLibs1' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MainLibs.csproj]
/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MockRegistryConsumerMainLibs2.cs(9,48): warning CA2213: 'MockRegistryConsumerMainLibs2' contains field '_aDisposable' that is of IDisposable type 'ADisposable', but it is never disposed. Change the Dispose method on 'MockRegistryConsumerMainLibs2' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MainLibs.csproj]
/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MockRegistryConsumerMainLibs2.cs(8,48): warning CA2213: 'MockRegistryConsumerMainLibs2' contains field '_entryDummy' that is of IDisposable type 'ServiceRegistryEntryDummy', but it is never disposed. Change the Dispose method on 'MockRegistryConsumerMainLibs2' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MainLibs.csproj]
/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MockRegistryConsumerMainLibs1.cs(10,48): warning CA2213: 'MockRegistryConsumerMainLibs1' contains field '_aDisposable' that is of IDisposable type 'ADisposable', but it is never disposed. Change the Dispose method on 'MockRegistryConsumerMainLibs1' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/MainLibs/MainLibs.csproj]
/home/eric/dev/scratch/RoslynAnalyzerTests/RoslynAnalyzerTests/Program.cs(107,34): warning CA2213: 'FooReceiver6' contains field '_fooResource' that is of IDisposable type 'FooResource', but it is never disposed. Change the Dispose method on 'FooReceiver6' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/RoslynAnalyzerTests/RoslynAnalyzerTests.csproj]
    5 Warning(s)
    0 Error(s)

Time Elapsed 00:00:01.65
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;I would expect the CA2213 errors to not be reported for the &lt;code&gt;MainLibs&lt;/code&gt; classes.
&lt;em&gt;Or, at the very least for the errors to be consistently wrong and also report the error in &lt;code&gt;Libs&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/home/eric/dev/scratch/RoslynAnalyzerTests/Libs/AnotherFile.cs(11,48): warning CA2213: 'MockRegistryConsumerLibs' contains field '_aDisposable' that is of IDisposable type 'ADisposable', but it is never disposed. Change the Dispose method on 'MockRegistryConsumerLibs' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/Libs/Libs.csproj]
/home/eric/dev/scratch/RoslynAnalyzerTests/Libs/AnotherFile.cs(10,48): warning CA2213: 'MockRegistryConsumerLibs' contains field '_entryDummy' that is of IDisposable type 'ServiceRegistryEntryDummy', but it is never disposed. Change the Dispose method on 'MockRegistryConsumerLibs' to call Close or Dispose on this field. [/home/eric/dev/scratch/RoslynAnalyzerTests/Libs/Libs.csproj]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It took me a while to track down why this happening, so it is only a theory that this is due to not crossing project boundaries.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 12:07:01 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6172</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6172</link>
      <title>Issue: CA2213: False positive on disposable fields - @Evangelink</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2213"&gt;CA2213&lt;/a&gt;: &lt;code&gt;Disposable fields should be disposed&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;See linked draft PR.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 07:50:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6169</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6169</link>
      <title>Issue: Moving regular class in xaml codebehind to new file via helper action calls new file MyClass.xaml.cs - @vsfeedback</title>
      <description>&lt;p&gt;&lt;em&gt;This issue has been moved from &lt;a href="https://developercommunity.visualstudio.com/t/Moving-regular-class-in-xaml-codebehind-/1592619"&gt;a ticket on Developer Community&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[severity:It bothers me. A fix would be nice]
Repro steps:&lt;/p&gt;
&lt;p&gt;In WPF XAML code-behind class, add a new class (&lt;code&gt;public class MyClass {}&lt;/code&gt;)
Use quick action to move class to its own file&lt;/p&gt;
&lt;p&gt;Expected:
New file is called MyClass.cs&lt;/p&gt;
&lt;p&gt;Actual:
New file is called MyClass.xaml.cs&lt;/p&gt;
&lt;p&gt;I want to note that the equivalent action in ReSharper &lt;em&gt;does not&lt;/em&gt; do this.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Original Comments&lt;/h3&gt;
&lt;h4&gt;Feedback Bot on 11/22/2021, 09:58 PM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;h4&gt;Sue Su [MSFT] on 11/23/2021, 08:56 PM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;h4&gt;Adam Meltzer [MSFT] on 12/1/2021, 11:14 AM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;h4&gt;Feedback Bot on 11/30/2021, 11:46 PM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;h4&gt;Feedback Bot on 12/9/2021, 07:10 AM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;h4&gt;Feedback Bot on 12/13/2021, 09:38 AM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;h4&gt;Fire Zhang [MSFT] on 12/30/2021, 06:51 PM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;h4&gt;Adam Meltzer [MSFT] on 1/1/2022, 00:20 PM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;h4&gt;Fire Zhang [MSFT] on 2/10/2022, 11:29 PM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;h4&gt;Adam Meltzer [MSFT] on 2/11/2022, 01:19 PM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;h4&gt;Feedback Bot on 2/16/2022, 00:23 AM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Original Solutions&lt;/h3&gt;
&lt;p&gt;(no solutions)&lt;/p&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 00:22:36 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6167</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6167</link>
      <title>Issue: PlatformCompatibilityAnalyzer crashes when processing TerraFX - @tannergooding</title>
      <description>&lt;h3&gt;Repro&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;git clone https://github.com/terrafx/terrafx.interop.windows&lt;/li&gt;
&lt;li&gt;Open the solution in VS 2022 (17.4.0 Preview 2.0)&lt;/li&gt;
&lt;li&gt;Build (and wait a minute or so)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Expected Behavior&lt;/h3&gt;
&lt;p&gt;The analyzer works and reports any bugs.&lt;/p&gt;
&lt;h3&gt;Actual Behavior&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Severity	Code	Description	Project	File	Line	Suppression State
Error	AD0001	Analyzer 'Microsoft.NetCore.Analyzers.InteropServices.PlatformCompatibilityAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Access .Workspace off of a RemoteWorkspace Solution is not supported. - line 69'.
Exception occurred with following context:
Compilation: TerraFX.Samples.DirectX
ISymbol: GetSamples (Method)

System.InvalidOperationException: Access .Workspace off of a RemoteWorkspace Solution is not supported. - line 69
   at Roslyn.Utilities.Contract.Fail(String message, Int32 lineNumber)
   at Microsoft.CodeAnalysis.Solution.get_Workspace()
   at Microsoft.CodeAnalysis.Diagnostics.WorkspaceAnalyzerOptions.GetHashCode()
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext`4.ComputeHashCodeParts(RoslynHashCode&amp;amp; hashCode)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable`1.GetOrComputeHashCode()
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable`1.GetHashCode()
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Analyzer.Utilities.SingleThreadedConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.TryGetOrComputeResultCore(TAnalysisContext analysisContext, Boolean cacheResult)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResultForAnalysisContext(PointsToAnalysisContext analysisContext)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult(ControlFlowGraph cfg, ISymbol owningSymbol, AnalyzerOptions analyzerOptions, WellKnownTypeProvider wellKnownTypeProvider, PointsToAnalysisKind pointsToAnalysisKind, DataFlowAnalysisResult`2&amp;amp; copyAnalysisResult, InterproceduralAnalysisConfiguration interproceduralAnalysisConfig, InterproceduralAnalysisPredicate interproceduralAnalysisPredicate, Boolean pessimisticAnalysis, Boolean performCopyAnalysis, Boolean exceptionPathsAnalysis)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult(ControlFlowGraph cfg, ISymbol owningSymbol, AnalyzerOptions analyzerOptions, WellKnownTypeProvider wellKnownTypeProvider, PointsToAnalysisKind pointsToAnalysisKind, InterproceduralAnalysisConfiguration interproceduralAnalysisConfig, InterproceduralAnalysisPredicate interproceduralAnalysisPredicate, Boolean pessimisticAnalysis, Boolean performCopyAnalysis, Boolean exceptionPathsAnalysis)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.GlobalFlowStateAnalysis.GlobalFlowStateAnalysis.TryGetOrComputeResult(ControlFlowGraph cfg, ISymbol owningSymbol, Func`2 createOperationVisitor, WellKnownTypeProvider wellKnownTypeProvider, AnalyzerOptions analyzerOptions, InterproceduralAnalysisConfiguration interproceduralAnalysisConfig, InterproceduralAnalysisPredicate interproceduralAnalysisPredicate, PointsToAnalysisKind pointsToAnalysisKind, Boolean pessimisticAnalysis, Boolean performValueContentAnalysis, DataFlowAnalysisResult`2&amp;amp; valueContentAnalysisResult, ImmutableArray`1 additionalSupportedValueTypes, Func`2 getValueContentValueForAdditionalSupportedValueTypeOperation)
   at Microsoft.NetCore.Analyzers.InteropServices.PlatformCompatibilityAnalyzer.&amp;lt;&amp;gt;c__DisplayClass34_0.&amp;lt;AnalyzeOperationBlock&amp;gt;b__1(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&amp;lt;&amp;gt;c__67`2.&amp;lt;ExecuteBlockActions&amp;gt;b__67_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----

Suppress the following diagnostics to disable this analyzer: CA1416, CA1422	TerraFX.Samples.DirectX (net6.0)		1	Active
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Error	AD0001	Analyzer 'Microsoft.NetCore.Analyzers.InteropServices.PlatformCompatibilityAnalyzer' threw an exception of type 'System.InvalidOperationException' with message 'Access .Workspace off of a RemoteWorkspace Solution is not supported. - line 69'.
Exception occurred with following context:
Compilation: TerraFX.Samples.DirectX
ISymbol: GetSamples (Method)

System.InvalidOperationException: Access .Workspace off of a RemoteWorkspace Solution is not supported. - line 69
   at Roslyn.Utilities.Contract.Fail(String message, Int32 lineNumber)
   at Microsoft.CodeAnalysis.Solution.get_Workspace()
   at Microsoft.CodeAnalysis.Diagnostics.WorkspaceAnalyzerOptions.GetHashCode()
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.AbstractDataFlowAnalysisContext`4.ComputeHashCodeParts(RoslynHashCode&amp;amp; hashCode)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable`1.GetOrComputeHashCode()
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.CacheBasedEquatable`1.GetHashCode()
   at System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Analyzer.Utilities.SingleThreadedConcurrentDictionary`2.GetOrAdd(TKey key, Func`2 valueFactory)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.DataFlowAnalysis`5.TryGetOrComputeResultCore(TAnalysisContext analysisContext, Boolean cacheResult)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResultForAnalysisContext(PointsToAnalysisContext analysisContext)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult(ControlFlowGraph cfg, ISymbol owningSymbol, AnalyzerOptions analyzerOptions, WellKnownTypeProvider wellKnownTypeProvider, PointsToAnalysisKind pointsToAnalysisKind, DataFlowAnalysisResult`2&amp;amp; copyAnalysisResult, InterproceduralAnalysisConfiguration interproceduralAnalysisConfig, InterproceduralAnalysisPredicate interproceduralAnalysisPredicate, Boolean pessimisticAnalysis, Boolean performCopyAnalysis, Boolean exceptionPathsAnalysis)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.PointsToAnalysis.PointsToAnalysis.TryGetOrComputeResult(ControlFlowGraph cfg, ISymbol owningSymbol, AnalyzerOptions analyzerOptions, WellKnownTypeProvider wellKnownTypeProvider, PointsToAnalysisKind pointsToAnalysisKind, InterproceduralAnalysisConfiguration interproceduralAnalysisConfig, InterproceduralAnalysisPredicate interproceduralAnalysisPredicate, Boolean pessimisticAnalysis, Boolean performCopyAnalysis, Boolean exceptionPathsAnalysis)
   at Microsoft.CodeAnalysis.FlowAnalysis.DataFlow.GlobalFlowStateAnalysis.GlobalFlowStateAnalysis.TryGetOrComputeResult(ControlFlowGraph cfg, ISymbol owningSymbol, Func`2 createOperationVisitor, WellKnownTypeProvider wellKnownTypeProvider, AnalyzerOptions analyzerOptions, InterproceduralAnalysisConfiguration interproceduralAnalysisConfig, InterproceduralAnalysisPredicate interproceduralAnalysisPredicate, PointsToAnalysisKind pointsToAnalysisKind, Boolean pessimisticAnalysis, Boolean performValueContentAnalysis, DataFlowAnalysisResult`2&amp;amp; valueContentAnalysisResult, ImmutableArray`1 additionalSupportedValueTypes, Func`2 getValueContentValueForAdditionalSupportedValueTypeOperation)
   at Microsoft.NetCore.Analyzers.InteropServices.PlatformCompatibilityAnalyzer.&amp;lt;&amp;gt;c__DisplayClass34_0.&amp;lt;AnalyzeOperationBlock&amp;gt;b__1(OperationBlockAnalysisContext context)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&amp;lt;&amp;gt;c__67`2.&amp;lt;ExecuteBlockActions&amp;gt;b__67_1(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
-----

Suppress the following diagnostics to disable this analyzer: CA1416, CA1422	TerraFX.Samples.DirectX (net7.0)		1	Active
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 18:52:30 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6165</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6165</link>
      <title>Issue: CA1508 False positive for "'o as T' is always 'null'" - @bartdesmet</title>
      <description>&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Base
{
}

class Derived1 : Base
{
}

class Derived2 : Base
{
}

class Derived3 : Base
{
}

class Program
{
    static void Main() { }

    static void Bar(Base obj)
    {
#if REPRO
        Derived1 res = obj as Derived1 ?? Foo(obj as Derived2 ?? throw new InvalidOperationException(&amp;quot;A&amp;quot;));
//                                            ~~~~~~~~~~~~~~~
//                                            CA1508: 'obj as Derived2' is always 'null'. Remove or refactor the condition(s) to avoid dead code.
#else
        Derived1 res = obj is Derived1 d ? d : Foo(obj as Derived2 ?? throw new InvalidOperationException(&amp;quot;A&amp;quot;));
#endif
    }

    static Derived1 Foo(Derived2 obj)
    {
        // Omitted logic
        throw new InvalidOperationException(&amp;quot;B&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;No warning.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;Warning about an &lt;code&gt;as&lt;/code&gt; conversion that can produce a non-&lt;code&gt;null&lt;/code&gt; value.&lt;/p&gt;
&lt;h2&gt;Additional context&lt;/h2&gt;
&lt;p&gt;Original code uses &lt;code&gt;MemberInfo&lt;/code&gt; for &lt;code&gt;Base&lt;/code&gt; and &lt;code&gt;PropertyInfo&lt;/code&gt; and &lt;code&gt;MethodInfo&lt;/code&gt; for &lt;code&gt;Derived1&lt;/code&gt; and &lt;code&gt;Derived2&lt;/code&gt;. The &lt;code&gt;Foo&lt;/code&gt; method is some &lt;code&gt;GetProperty&lt;/code&gt; helper function.&lt;/p&gt;
&lt;p&gt;Also note that the IDE suggests another change that would change the meaning of the code (i.e. throw another exception type)&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/7324746/190467553-2b1fdc0b-de67-4d65-8a63-72cef7061a7d.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;so maybe the analysis of type checks using &lt;code&gt;as&lt;/code&gt; in conjunction with &lt;code&gt;??&lt;/code&gt; has some undesirable gaps.&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 17:10:05 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6164</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6164</link>
      <title>Issue: CA1508 False positive for "'x != null' is always 'true'" - @bartdesmet</title>
      <description>&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#define REPRO

public static void Bar(ConsoleColor c)
{
    var color = default(string?);

    switch (c)
    {
        case ConsoleColor.Red:
        case ConsoleColor.DarkRed:
            color = &amp;quot;red&amp;quot;;
            break;
        case ConsoleColor.Blue:
        case ConsoleColor.DarkBlue:
            color = &amp;quot;blue&amp;quot;;
            break;
        default:
#if !REPRO
            color = null;
#endif
            break;
    }

    if (color != null)
#if REPRO
//      ~~~~~
//      CA1508: 'color != null' is always 'true'
#endif
    {
        // stuff
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;No warning.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;Issues warning.&lt;/p&gt;
&lt;h2&gt;Additional context&lt;/h2&gt;
&lt;p&gt;Note that Roslyn also reports nullable analysis info in the tooltip stating &amp;quot;'color' may be null here.&amp;quot;, so the analyzer and compiler have different opinions here.&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 16:35:46 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6163</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6163</link>
      <title>Issue: CA1062 false positive for nullability analysis - @bartdesmet</title>
      <description>&lt;p&gt;&lt;strong&gt;Version Used&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Microsoft Visual Studio Enterprise 2022
Version 17.2.4
VisualStudio.17.Release/17.2.4+32602.215
C# Tools   4.2.0-4.22281.5+8d3180e5f00d42f0f0295165f756f368f0cbfa44&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steps to Reproduce&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;!-- repro.csproj --&amp;gt;
&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFrameworks&amp;gt;net6.0&amp;lt;/TargetFrameworks&amp;gt;
    &amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
    &amp;lt;TreatWarningsAsErrors&amp;gt;True&amp;lt;/TreatWarningsAsErrors&amp;gt;
    &amp;lt;AnalysisLevel&amp;gt;latest-all&amp;lt;/AnalysisLevel&amp;gt;
    &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Program.cs
#define REPRO

using System.Collections.ObjectModel;
using System.Runtime.CompilerServices;

[assembly: System.Diagnostics.CodeAnalysis.SuppressMessage(&amp;quot;Microsoft.Design&amp;quot;, &amp;quot;CA1014:MarkAssembliesWithClsCompliant&amp;quot;)]

class Program { static void Main() { } }

namespace Bar
{
    public static class Foo
    {
        public static void Bar(IEnumerable&amp;lt;int&amp;gt;? xs)
        {
            var list = Qux(xs);

            _ = list.Count;
#if REPRO
            /*
            _ = list.Count;
                ~~~~
            CA1062  In externally visible method 'void Foo.Bar(IEnumerable&amp;lt;int&amp;gt;? xs)', validate parameter 'xs' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.
            */
#endif
        }

        public static ReadOnlyCollection&amp;lt;T&amp;gt; Qux&amp;lt;T&amp;gt;(IEnumerable&amp;lt;T&amp;gt;? enumerable)
        {
#if REPRO
            if (enumerable is ReadOnlyCollection&amp;lt;T&amp;gt; roc)
            {
                return roc;
            }
#endif

            return new ReadOnlyCollectionBuilder&amp;lt;T&amp;gt;(enumerable ?? Array.Empty&amp;lt;T&amp;gt;()).ToReadOnlyCollection();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Expected Behavior&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;When commenting out &lt;code&gt;#define REPRO&lt;/code&gt;, no CA1062 warning is produced complaining about &lt;code&gt;xs&lt;/code&gt; being possibly null, even though the error is reported on &lt;code&gt;list&lt;/code&gt; which is the result of calling &lt;code&gt;Qux(xs)&lt;/code&gt; and has a non-nullable return type. It is unclear why there's spooky interaction with the &lt;em&gt;implementation&lt;/em&gt; of this method even though its return type should suffice to reason over the result being non-null.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Actual Behavior&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cpp"&gt;            _ = list.Count;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces error&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CA1062  In externally visible method 'void Foo.Bar(IEnumerable&amp;lt;int&amp;gt;? xs)', validate parameter 'xs' is non-null before using it. If appropriate, throw an ArgumentNullException when the argument is null or add a Code Contract precondition asserting non-null argument.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mentioning &lt;code&gt;xs&lt;/code&gt;.&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 00:20:22 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6162</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6162</link>
      <title>Issue: Conflict between CA2215 and CA1063 when base class does not implement IDisposable correctly - @mikechristiansenvae</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2215"&gt;CA2215&lt;/a&gt;: &lt;code&gt;Dispose methods should call base class dispose&lt;/code&gt;
&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1063"&gt;CA1063&lt;/a&gt;: &lt;code&gt;CA1063: Implement IDisposable correctly&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SDK&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/productivity/code-analysis"&gt;Built-in CA analyzers in .NET 5 SDK or later&lt;/a&gt;
&lt;strong&gt;Version&lt;/strong&gt;: SDK 6.0.400&lt;/p&gt;
&lt;p&gt;Also attempted with:
&lt;strong&gt;NuGet Package&lt;/strong&gt;: &lt;a href="https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers"&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/a&gt;
&lt;strong&gt;Version&lt;/strong&gt;: 6.0.0&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;If a type inherits from another type that implements &lt;code&gt;IDisposable&lt;/code&gt; incorrectly, then it becomes impossible to satisfy the requirements for both &lt;code&gt;CA2215&lt;/code&gt; and &lt;code&gt;CA1063&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Ensure &lt;code&gt;CA2215&lt;/code&gt; and &lt;code&gt;CA1063&lt;/code&gt; are enabled&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;TreatWarningsAsErrors&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;class&lt;/code&gt; that derives from &lt;code&gt;Microsoft.Extensions.Hosting.BackgroundService&lt;/code&gt; (or another type that implements &lt;code&gt;IDisposable&lt;/code&gt; in the same manner)&lt;/li&gt;
&lt;li&gt;Override the &lt;code&gt;Dispose&lt;/code&gt; method (example in the 'Actual behavior' section  )&lt;/li&gt;
&lt;li&gt;Attempt to fulfill the requirements of both &lt;code&gt;CA2215&lt;/code&gt; and &lt;code&gt;CA1063&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;You should be able to fulfill the requirements of both &lt;code&gt;CA2215&lt;/code&gt; and &lt;code&gt;CA1063&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;Implementing  results in a violation of &lt;code&gt;CA1063&lt;/code&gt; due to the extra statement in &lt;code&gt;Dispose()&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;protected virtual void Dispose(bool disposing)
{
    if (disposing)
    {
        // Dispose managed resources
    }
    // Dispose unmanaged resources
}

public sealed override void Dispose()
{
    base.Dispose();
    this.Dispose(true);
    GC.SuppressFinalize(this);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Implementing  results in a violation of &lt;code&gt;CA2215&lt;/code&gt; due to not calling &lt;code&gt;base.Dispose()&lt;/code&gt; in &lt;code&gt;Dispose()&lt;/code&gt;, despite it being in &lt;code&gt;Dispose(bool)&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;protected virtual void Dispose(bool disposing)
{
    base.Dispose();
    if (disposing)
    {
        // Dispose managed resources
    }
    // Dispose unmanaged resources
}

public sealed override void Dispose()
{
    this.Dispose(true);
    GC.SuppressFinalize(this);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Additional context&lt;/h2&gt;
</description>
      <pubDate>Wed, 14 Sep 2022 17:30:54 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6159</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6159</link>
      <title>Issue: Public abstract types should not have internal abstract members - @ericstj</title>
      <description>&lt;h3&gt;Describe the problem you are trying to solve&lt;/h3&gt;
&lt;p&gt;When a public abstract type has a public constructor it should be implementable outside the assembly.  It cannot be implemented outside the assembly if any members are abstract and internal.&lt;/p&gt;
&lt;h3&gt;Describe suggestions on how to achieve the rule&lt;/h3&gt;
&lt;p&gt;For any public abstract type with any public constructors, ensure that all abstract members are also public.&lt;/p&gt;
&lt;h3&gt;Additional context&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://sharplab.io/#v2:EYLgHgbALANALiAlgGxgExAagD4AEBMAjALABQuAzAAQCGwAznAE40DGcVBVAwmQN5kqQztW4AKAJRU+AX0HDKtBszYdcUKgBlJAbnlDEAOzgBTJoZrIljFu04aAsrrIygA="&gt;Sample that should fail.&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 15:39:12 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6158</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6158</link>
      <title>Issue: .NET MAUI seeing lots of new CA1416 warnings - @jonathanpeppers</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/CA1416"&gt;CA1416&lt;/a&gt;: Validate platform compatibility&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SDK&lt;/strong&gt;: Built-in CA analyzers in .NET 7 SDK&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: 7.0.100-rc.2.22457.6&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;We started getting many warnings in dotnet/maui, during this bump: https://github.com/dotnet/maui/pull/9968&lt;/p&gt;
&lt;p&gt;Going from .NET 7.0.100-rc.1.22425.9 to 7.0.100-rc.2.22457.6&lt;/p&gt;
&lt;p&gt;An example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;error CA1416: This call site is reachable on: 'iOS' 10.0 and later, 'maccatalyst' 10.0 and later. 'UIScreen.MaximumFramesPerSecond' is only supported on: 'ios' 10.3 and later, 'maccatalyst' 10.3 and later, 'tvos' 10.2 and later.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;https://github.com/dotnet/maui/blob/dcd91ec3954b225664be410660ac0d4ade24fc9a/src/Essentials/src/DeviceDisplay/DeviceDisplay.ios.cs#L21-L23&lt;/p&gt;
&lt;p&gt;We don't think that the &lt;code&gt;MaximumFramesPerSecond&lt;/code&gt; API changed any attributes, but the CA1416 appeared.&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Build the branch: https://github.com/dotnet/maui/pull/9968&lt;/li&gt;
&lt;li&gt;this provisions a .NET SDK &amp;amp; optional workloads, then builds&lt;/li&gt;
&lt;li&gt;See error&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;I don't think we should be seeing CA1416 several of the cases I've reviewed.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;We got a lot of CA1416 warnings.&lt;/p&gt;
&lt;h3&gt;Other info:&lt;/h3&gt;
&lt;p&gt;Here is a &lt;code&gt;.binlog&lt;/code&gt; with several other examples of warnings: &lt;a href="https://github.com/dotnet/roslyn-analyzers/files/9557507/logs.zip"&gt;logs.zip&lt;/a&gt;&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 13:27:33 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6156</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6156</link>
      <title>Issue: Tracking internal APIs - @333fred</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: RS0016/RS0017&lt;/p&gt;
&lt;h3&gt;Describe the improvement&lt;/h3&gt;
&lt;p&gt;Roslyn has a set of ExternalAccess projects that are have internal APIs, and specifically grant IVTs to partner teams to manage access to internal APIs. However, we don't track these APIs like we do for public APIs, and this has lead to breaking our build in multiple scenarios. We should support tracking internal APIs (off by default) for this purpose, preferrably with an editorconfig or msbuild option to exclude specific namespaces.&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 17:30:45 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6155</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6155</link>
      <title>Issue: Built-in analyzers cannot be used with Text.Analyzers - @bordecal</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;N/A&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;Attempting to use https://www.nuget.org/packages/Text.Analyzers/3.3.3 with &lt;code&gt;EnableNETAnalyzers&lt;/code&gt; (.NET SDK 6.0.400)&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;Adding a reference to the https://www.nuget.org/packages/Text.Analyzers NuGet package disables the built-in analyzers that should be loaded when &lt;code&gt;EnableNETAnalyzers&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;.  This is likely due to the &lt;a href="https://github.com/dotnet/roslyn-analyzers/blob/a26d1a203d0116aa769bce0fd3a917cc70d88a66/nuget/Text.Analyzers/Text.Analyzers.Package.csproj#L16"&gt;following line&lt;/a&gt; in the Text.Analyzers NuGet packaging configuration: &lt;code&gt;&amp;lt;ContainsPortedFxCopRules&amp;gt;true&amp;lt;/ContainsPortedFxCopRules&amp;gt;&lt;/code&gt;.  This appears to &lt;a href="https://github.com/dotnet/roslyn-analyzers/blob/a26d1a203d0116aa769bce0fd3a917cc70d88a66/eng/GenerateAnalyzerNuspec.targets#L43"&gt;indirectly result&lt;/a&gt; in the overriding of the &lt;code&gt;EnableNETAnalyzers&lt;/code&gt; property in consuming projects.&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Configure a C# project to use built-in analyzers using the [&lt;code&gt;EnableNETAnalyzers&lt;/code&gt; MSBuild property](&lt;code&gt;EnableNETAnalyzers&lt;/code&gt; MSBuild property.).&lt;/li&gt;
&lt;li&gt;Confirm that a &lt;code&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/code&gt; item is visible is the analyzer list for the project in Visual Studio.&lt;/li&gt;
&lt;li&gt;Add a reference to the &lt;code&gt;Text.Analyzers&lt;/code&gt; NuGet package and build the project.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;The built-in analyzers loaded via &lt;code&gt;EnableNETAnalyzers&lt;/code&gt; should continue to be used after a reference is added to &lt;code&gt;Text.Analyzers&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;Adding a reference to &lt;code&gt;Text.Analyzers&lt;/code&gt; suppresses use of the built-in analyzers.  They will no longer be used or appear in the analyzer list in Visual Studio.&lt;/p&gt;
&lt;h2&gt;Additional context&lt;/h2&gt;
&lt;p&gt;N/A&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 15:08:03 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6154</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6154</link>
      <title>Issue: Setting severity to `none` for some analyzers (e.g, CA5401) via editorconfig not working - @Youssef1313</title>
      <description>&lt;p&gt;Clone https://github.com/Youssef1313/editorconfig-severity-repro
Run &lt;code&gt;dotnet build -bl&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;See that the analyzer is still run:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/31348972/189253299-269a697b-600e-4059-ab60-fb4a6206f8a2.png" alt="image" /&gt;&lt;/p&gt;
</description>
      <pubDate>Fri, 09 Sep 2022 01:29:40 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6152</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6152</link>
      <title>Issue: CA2000 does not trigger for ServiceProvider - @sorensenmatias</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2000"&gt;CA2000&lt;/a&gt;: &lt;code&gt;Dispose objects before losing scope&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SDK&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/productivity/code-analysis"&gt;Built-in CA analyzers in .NET 5 SDK or later&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: &lt;a href="https://dotnet.microsoft.com/download/dotnet/6.0"&gt;SDK 6.0.400&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;CA2000 does not trigger when creating an instance of &lt;code&gt;Microsoft.Extensions.DependencyInjection.ServiceProvider&lt;/code&gt;, even though &lt;code&gt;ServiceProvider&lt;/code&gt; implements &lt;code&gt;IDisposable&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;Create new &lt;code&gt;csproj&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.Extensions.DependencyInjection&amp;quot; Version=&amp;quot;6.0.0&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create new &lt;code&gt;.editorconfig&lt;/code&gt; file in the same directory as the &lt;code&gt;csproj&lt;/code&gt; file.
Configure CA2000 as warning in &lt;code&gt;.editorconfig&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[*]

dotnet_diagnostic.CA2000.severity = warning
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add the following class in a new file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public class MyClass
{
    public void MyMethod()
    {
        var serviceCollection = new ServiceCollection();
        var serviceProvider = serviceCollection.BuildServiceProvider();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;CA2000 suggests to add the missing using-statement, i.e.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;using var serviceProvider = serviceCollection.BuildServiceProvider();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;CA2000 does not trigger.&lt;/p&gt;
</description>
      <pubDate>Wed, 07 Sep 2022 20:50:37 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6151</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6151</link>
      <title>Issue: False positive for CA1001 triggered by structs - @JimBobSquarePants</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1001"&gt;CA1001&lt;/a&gt;: &lt;code&gt;Types that own disposable fields should be disposable&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SDK&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/productivity/code-analysis"&gt;Built-in CA analyzers in .NET 6 SDK or later&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: &lt;a href="https://dotnet.microsoft.com/download/dotnet/6.0"&gt;SDK 6.0.400&lt;/a&gt;&lt;/p&gt;
&lt;!--
Note: Updates to NuGet package are more frequent than SDK, which means the NuGet package has fixes that haven't yet made it into the SDK.
      Please check whether you can reproduce the bug you encountered in the latest NuGet package.
--&gt;
&lt;p&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NuGet Package&lt;/strong&gt;: &lt;a href="https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers"&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: 6.0.0 (Latest)&lt;/p&gt;
&lt;!--
NOTE: `Microsoft.CodeAnalysis.FxCopAnalyzers` package has been deprecated in favor of 'Microsoft.CodeAnalysis.NetAnalyzers', that ships with the .NET SDK.
      Please refer to https://docs.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers to migrate to .NET analyzers.
--&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;I'm seeing several instances in my codebase where &lt;code&gt;CA1001&lt;/code&gt; is incorrectly triggered.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;All parent types are structs.&lt;/li&gt;
&lt;li&gt;All implement &lt;code&gt;IDisposable&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;All errors refer to the same type &lt;code&gt;EuclideanPixelMap&amp;lt;TPixel&amp;gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- A clear and concise description of what the bug is. --&gt;
&lt;pre&gt;&lt;code class="language-bash"&gt;Error	CA1001	Type 'DitherProcessor' owns disposable field(s) 'pixelMap' but is not disposable	ImageSharp (net6.0)	C:\Users\james\Documents\GitHub\SixLabors\ImageSharp\src\ImageSharp\Processing\Processors\Dithering\PaletteDitherProcessor{TPixel}.cs	77	Active
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;The simplest reproduction I have is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;internal struct Invalid : IDisposable
{
    private readonly Stream stream;

    public Invalid(int length) =&amp;gt; this.stream = new MemoryStream(length);

    public void Dispose() =&amp;gt; this.stream.Dispose();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Using a class does not trigger the issue.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;internal class Valid : IDisposable
{
    private readonly Stream stream;

    public Valid(int length) =&amp;gt; this.stream = new MemoryStream(length);

    public void Dispose() =&amp;gt; this.stream.Dispose();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;img alt="image" src="https://user-images.githubusercontent.com/385879/188642510-5c5e4267-81eb-4bf0-82e4-9fbdf2ebfa4d.png"&gt;
&lt;p&gt;A more real world example is the following.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;/// &amp;lt;summary&amp;gt;
/// Used to allow inlining of calls to
/// &amp;lt;see cref=&amp;quot;IPaletteDitherImageProcessor{TPixel}.GetPaletteColor(TPixel)&amp;quot;/&amp;gt;.
/// &amp;lt;/summary&amp;gt;
/// &amp;lt;remarks&amp;gt;Internal for AOT&amp;lt;/remarks&amp;gt;
internal readonly struct DitherProcessor : IPaletteDitherImageProcessor&amp;lt;TPixel&amp;gt;, IDisposable
{
    private readonly EuclideanPixelMap&amp;lt;TPixel&amp;gt; pixelMap;

    [MethodImpl(InliningOptions.ShortMethod)]
    public DitherProcessor(
        Configuration configuration,
        ReadOnlyMemory&amp;lt;TPixel&amp;gt; palette,
        float ditherScale)
    {
        this.Configuration = configuration;
        this.pixelMap = new EuclideanPixelMap&amp;lt;TPixel&amp;gt;(configuration, palette);
        this.Palette = palette;
        this.DitherScale = ditherScale;
    }

    public Configuration Configuration { get; }

    public ReadOnlyMemory&amp;lt;TPixel&amp;gt; Palette { get; }

    public float DitherScale { get; }

    [MethodImpl(InliningOptions.ShortMethod)]
    public TPixel GetPaletteColor(TPixel color)
    {
        this.pixelMap.GetClosestColor(color, out TPixel match);
        return match;
    }

    public void Dispose() =&amp;gt; this.pixelMap.Dispose();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;The warning should not be triggered&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;The warning is triuggered.&lt;/p&gt;
&lt;h2&gt;Additional context&lt;/h2&gt;
&lt;p&gt;NA&lt;/p&gt;
&lt;!-- Add any other context about the problem here. --&gt;
</description>
      <pubDate>Tue, 06 Sep 2022 13:05:12 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6150</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6150</link>
      <title>Issue: Code Metrics data is not calculated - @bcollamore</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;CodeMetrics&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;NuGet Package&lt;/strong&gt;: &lt;a href="https://www.nuget.org/packages/Microsoft.CodeAnalysis.Metrics"&gt;Microsoft.CodeAnalysis.Metrics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: 3.3.3 (&amp;amp; 3.3.4-beta1.22362.3/latest)&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;Metrics file is produced with default values rather than actual values. (See below.)&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;Standard Code Metrics &lt;a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/how-to-generate-code-metrics-data?view=vs-2022"&gt;instructions&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;A complete metrics.xml file produced.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;An essentially empty metrics.xml file is produced, e.g.:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;
&amp;lt;CodeMetricsReport Version=&amp;quot;1.0&amp;quot;&amp;gt;
  &amp;lt;Targets&amp;gt;
    &amp;lt;Target Name=&amp;quot;MyProject&amp;quot;&amp;gt;
      &amp;lt;Assembly Name=&amp;quot;MyProject.csproj, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null&amp;quot;&amp;gt;  [Also note the empty version - it should not be.]
        &amp;lt;Metrics&amp;gt;
          &amp;lt;Metric Name=&amp;quot;MaintainabilityIndex&amp;quot; Value=&amp;quot;100&amp;quot; /&amp;gt;
          &amp;lt;Metric Name=&amp;quot;CyclomaticComplexity&amp;quot; Value=&amp;quot;0&amp;quot; /&amp;gt;
          &amp;lt;Metric Name=&amp;quot;ClassCoupling&amp;quot; Value=&amp;quot;0&amp;quot; /&amp;gt;
          &amp;lt;Metric Name=&amp;quot;DepthOfInheritance&amp;quot; Value=&amp;quot;0&amp;quot; /&amp;gt;
          &amp;lt;Metric Name=&amp;quot;SourceLines&amp;quot; Value=&amp;quot;0&amp;quot; /&amp;gt;  [Note incorrect values]
          &amp;lt;Metric Name=&amp;quot;ExecutableLines&amp;quot; Value=&amp;quot;0&amp;quot; /&amp;gt;
        &amp;lt;/Metrics&amp;gt;  [Note children nodes missing]
      &amp;lt;/Assembly&amp;gt;  
    &amp;lt;/Target&amp;gt;
  &amp;lt;/Targets&amp;gt;
&amp;lt;/CodeMetricsReport&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Additional context&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The problem is observed starting with VS2022 (17.3?), when running via the &lt;a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/how-to-generate-code-metrics-data?view=vs-2022#microsoftcodeanalysismetrics-nuget-package"&gt;Nuget package&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The problem does not occur when running Metrics.exe &lt;a href="https://docs.microsoft.com/en-us/visualstudio/code-quality/how-to-generate-code-metrics-data?view=vs-2022#metricsexe"&gt;directly&lt;/a&gt;, regardless of which version of Visual Studio that Metrics.exe or the project-under-analysis is compiled against.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Running in a debugger revealed that the call to workspace.OpenProjectAsync has this Diagnostic property (when run via msbuild and the Nuget Package):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Msbuild failed when processing the file '&amp;lt;redacted&amp;gt;\MyProject.csproj' with message: Method not found: 'System.ReadOnlySpan`1&amp;lt;Char&amp;gt; Microsoft.IO.Path.GetFileName(System.ReadOnlySpan`1&amp;lt;Char&amp;gt;)'.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This led me to this &lt;a href="https://github.com/dotnet/msbuild/pull/7680"&gt;version update of System.Memory&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The problem is that newer versions of msbuild use a newer version of System.Memory that has a breaking change. When the Metrics Task is run (as defined in the CodeMetrics Nuget Package), it launches Metrics.exe with an incompatible version of the DLL.&lt;/p&gt;
&lt;p&gt;To confirm the problem, hacking this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;assemblyBinding xmlns=&amp;quot;urn:schemas-microsoft-com:asm.v1&amp;quot;&amp;gt;
      &amp;lt;dependentAssembly&amp;gt;
        &amp;lt;assemblyIdentity name=&amp;quot;System.Memory&amp;quot; publicKeyToken=&amp;quot;cc7b13ffcd2ddd51&amp;quot; culture=&amp;quot;neutral&amp;quot; /&amp;gt;
        &amp;lt;bindingRedirect oldVersion=&amp;quot;0.0.0.0-4.0.1.2&amp;quot; newVersion=&amp;quot;4.0.1.2&amp;quot; /&amp;gt;
      &amp;lt;/dependentAssembly&amp;gt;
    &amp;lt;/assemblyBinding&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;into the Metrics.exe.config file in the Nuget cache circumvents the issue.&lt;/p&gt;
&lt;p&gt;And adding the following PackageReference to Metrics.csproj &amp;quot;fixes&amp;quot; the issue:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &amp;lt;PackageReference Include=&amp;quot;System.Memory&amp;quot; Version=&amp;quot;4.5.5&amp;quot; /&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The generic flavor of this problem is &lt;a href="https://github.com/dotnet/msbuild/issues/7832"&gt;discussed here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;An additional suggestion is to update the CodeMetrics documentation to consider having CI/CD pipelines rely on Metrics.exe directly in order to avoid this generic problem.&lt;/p&gt;
</description>
      <pubDate>Mon, 05 Sep 2022 21:24:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6149</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6149</link>
      <title>Issue: false-positive for CA2013 - @collinstevens</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2013"&gt;CA2013&lt;/a&gt;: &lt;code&gt;Do not use ReferenceEquals with value types&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SDK&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/productivity/code-analysis"&gt;Built-in CA analyzers in .NET 6 SDK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: &lt;a href="https://dotnet.microsoft.com/en-us/download/dotnet/6.0"&gt;SDK 6.0.303&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;The CA2013 analyzer is showing a warning for the &lt;code&gt;ReferenceEquals&lt;/code&gt; in the below code snippet with the following text &lt;code&gt;Do not pass an argument with value type 'int?' to 'ReferenceEquals'. Due to value boxing, this call to 'ReferenceEquals' will always return 'false'.&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Nevertheless, the the call to &lt;code&gt;ReferenceEquals&lt;/code&gt; does not return &lt;code&gt;false&lt;/code&gt; as the analyzer would indicate, but instead returns &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The following xUnit test passes.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[Fact]
public void ShouldReturnTrueForNullIntegers()
{
    // Arrange
    int? first = null;
    int? second = null;

    // Act
    var result = ReferenceEquals(first, second);

    // Assert
    Assert.True(result);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;Execute the provided xUnit test.&lt;/p&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;The analyzer should not warn for Nullable&lt;T&gt;.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;The analyzer should warns for Nullable&lt;T&gt;.&lt;/p&gt;
&lt;h3&gt;Additional context&lt;/h3&gt;
&lt;p&gt;N/A&lt;/p&gt;
</description>
      <pubDate>Mon, 05 Sep 2022 03:19:08 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6146</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6146</link>
      <title>Issue: Best-effort definite assignment analysis for required members - @HaloFour</title>
      <description>&lt;p&gt;Apologies if this has come up already, I did a search but didn't find an open issue that seemed to describe this situation.&lt;/p&gt;
&lt;h3&gt;Describe the problem you are trying to solve&lt;/h3&gt;
&lt;p&gt;C# 11 is slated to ship with &amp;quot;required properties&amp;quot; which inform a consumer of the type that certain properties must be initialized after construction.  There is an escape hatch where by applying the &lt;code&gt;SetsRequiredMembersAttribute&lt;/code&gt; to a particular constructor that the compiler will assume that all of the &amp;quot;required properties&amp;quot; are set by that constructor and the properties aren't required to be initialized.  However, the compiler does not offer any enforcement whether those members are actually being initialized within the constructor due to the complexity of doing so, particularly in niche cases.  It's been suggested that this is a good case for an analyzer, and I believe that such an analyzer should be offered by default.&lt;/p&gt;
&lt;h3&gt;Describe suggestions on how to achieve the rule&lt;/h3&gt;
&lt;p&gt;The rule should apply to any constructor adorned with the &lt;code&gt;SetsRequiredMembersAttribute&lt;/code&gt; attribute in a type that has &amp;quot;required properties&amp;quot;.  The analyzer would then make a best-effort pass to attempt to ensure that the members are initialized.&lt;/p&gt;
&lt;h3&gt;Additional context&lt;/h3&gt;
</description>
      <pubDate>Fri, 02 Sep 2022 15:26:10 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6145</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6145</link>
      <title>Issue: Bug in fixer for CA1836  - @mattjohnsonpint</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1836"&gt;CA1836&lt;/a&gt;: &lt;code&gt;Prefer IsEmpty over Count when available&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SDK&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/productivity/code-analysis"&gt;Built-in CA analyzers in .NET 5 SDK or later&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: &lt;a href="https://dotnet.microsoft.com/download/dotnet/6.0"&gt;SDK 6.0.400&lt;/a&gt;&lt;/p&gt;
&lt;!--
Note: Updates to NuGet package are more frequent than SDK, which means the NuGet package has fixes that haven't yet made it into the SDK.
      Please check whether you can reproduce the bug you encountered in the latest NuGet package.
--&gt;
&lt;p&gt;&lt;em&gt;OR&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NuGet Package&lt;/strong&gt;: &lt;a href="https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers"&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: 6.0.0 (Latest)&lt;/p&gt;
&lt;!--
NOTE: `Microsoft.CodeAnalysis.FxCopAnalyzers` package has been deprecated in favor of 'Microsoft.CodeAnalysis.NetAnalyzers', that ships with the .NET SDK.
      Please refer to https://docs.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers to migrate to .NET analyzers.
--&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;Given code such as &lt;code&gt;if (queue.Count &amp;gt; 0)&lt;/code&gt;, CA1836 correctly highlights that one should use &lt;code&gt;IsEmpty&lt;/code&gt;.  The correct fix would be &lt;code&gt;if (!queue.IsEmpty)&lt;/code&gt;, but the fixer for CA1836 ignores the operator and replaces with &lt;code&gt;if (queue.IsEmpty)&lt;/code&gt; - negating the intention of the original code.&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;Create a new .NET 6 console app in Visual Studio.&lt;/p&gt;
&lt;p&gt;In the project properties page, on the code analysis tab, set the analysis level to &amp;quot;Latest Recommended&amp;quot;.  (Alternatively, set &lt;code&gt;&amp;lt;AnalysisLevel&amp;gt;latest-recommended&amp;lt;/AnalysisLevel&amp;gt;&lt;/code&gt; in the csproj.)&lt;/p&gt;
&lt;p&gt;Add this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using System.Collections.Concurrent;

var queue = new ConcurrentQueue&amp;lt;string&amp;gt;();
queue.Enqueue(&amp;quot;test&amp;quot;);

if (queue.Count &amp;gt; 0)
{
    // test
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;queue.Count &amp;gt; 0&lt;/code&gt; is highlighted by the analyzer.  Apply the suggested fix.&lt;/p&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;The fix should be &lt;code&gt;if (!queue.IsEmpty)&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;The fix is incorrectly applied as &lt;code&gt;if (queue.IsEmpty)&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Additional context&lt;/h2&gt;
&lt;p&gt;The same result also occurs with equality operators.  In general, I would expect the following:&lt;/p&gt;
&lt;p&gt;| original code | correct replacement | notes |
|---|---|---|
| &lt;code&gt;queue.Count == 0&lt;/code&gt; | &lt;code&gt;queue.IsEmpty&lt;/code&gt; | works already |
| &lt;code&gt;queue.Count &amp;lt;= 0&lt;/code&gt; | &lt;code&gt;queue.IsEmpty&lt;/code&gt; | works already |
| &lt;code&gt;queue.Count &amp;lt; 1&lt;/code&gt; | &lt;code&gt;queue.IsEmpty&lt;/code&gt; | works already |
| &lt;code&gt;queue.Count != 0&lt;/code&gt; | &lt;code&gt;!queue.IsEmpty&lt;/code&gt; | broken, wrong replacement |
| &lt;code&gt;queue.Count &amp;gt; 0&lt;/code&gt; | &lt;code&gt;!queue.IsEmpty&lt;/code&gt; | broken, wrong replacement |
| &lt;code&gt;queue.Count &amp;gt;= 1&lt;/code&gt; | &lt;code&gt;!queue.IsEmpty&lt;/code&gt; | not detected, but logically should |&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 23:02:03 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6144</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6144</link>
      <title>Issue: TFM trimming, and elimination of net4* targeting in Linux source-build - @mmitche</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;Trim away unneeded TFMs, and conditionalize away non-applicable TFMs for Linux source build.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Requires&lt;/strong&gt; https://github.com/dotnet/source-build/issues/3013. source-build net4* targeting elimination required https://github.com/dotnet/source-build/issues/2974&lt;/p&gt;
&lt;p&gt;The purpose of this operation is twofold:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Reduce the number of TFMs present overall in .NET's build, potentially improving build time.&lt;/li&gt;
&lt;li&gt;[ ] Eliminate framework TFMs, drastically reducing the size of the source build repository size.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When TFMs other than the latest .NET Core TFM are targeted in source-build, the reference assets for that TFM must be provided via a source build reference package. This is a 'text only' package that is assembled from IL at the beginning of the build to satisfy the required reference assets. In Microsoft's build, these would be restored from the internet, but in source build this is not allowed.&lt;/p&gt;
&lt;p&gt;These SBRPs are large. All told, the total size contribution for just the netframework 4* TFMs is around 3GB. Not only does this have a significant contribution to the source build repo size, but it also affects build time. For Linux source build, we spend large amounts of time building assets that are simply thrown away at the end.&lt;/p&gt;
&lt;p&gt;An 'ideal' would be a single TFM used throughout all of the .NET build, source build or otherwise. This is not possible. There are legitimate reasons to target older TFMs, especially netstandard. However, we should be able to justify each additional TFM.&lt;/p&gt;
&lt;p&gt;To complete this work, repositories will use the tooling provided via https://github.com/dotnet/source-build/issues/2901 to identify the TFMs in use in their repository. For each TFM, they should do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] If the TFM can be eliminated, or upgraded to latest (e.g. target the latest netcore explicitly, or use net472), do so. netframework TFM removal for tools and internal code is likely low hanging fruit.&lt;/li&gt;
&lt;li&gt;[ ] &lt;strong&gt;Requires https://github.com/dotnet/source-build/issues/2974&lt;/strong&gt; If the TFM is a framework TFM, it should be conditionalized out in source build for Linux.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It is a goal that the form of this conditionalization remain consistent across projects, and used relatively sparingly. How this conditionalization should be done will be designed in https://github.com/dotnet/source-build/issues/2974. Once that is done, this issue will be updated with implementation details.&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 18:36:59 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6143</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6143</link>
      <title>Issue: CA1041 performance - @Youssef1313</title>
      <description>&lt;p&gt;Seeing the following in a binlog:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/31348972/187940853-f53cb1b9-afb3-4463-9557-013781c9e993.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;Looks like this is a very simple analyzer, but is somewhat slow. The analyzer registers symbol actions for named types, methods, fields, properties, and events.&lt;/p&gt;
&lt;p&gt;So I assume this is alone too much work.&lt;/p&gt;
&lt;p&gt;The analyzer should use IAttributeOperation when it's added back (but the analyzer will not work for people consuming a compiler without this IOp), or register a syntax action for AttributeSyntax.&lt;/p&gt;
&lt;p&gt;Yes we try to avoid syntax analysis in many cases, but I think for this one we might see a good performance gain.&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 14:39:16 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6141</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6141</link>
      <title>Issue: CS1852 warns on generated Program for top-level statements - @kronic</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;Can't get rid of error  CS1852&lt;/p&gt;
&lt;h3&gt;Reproduction Steps&lt;/h3&gt;
&lt;p&gt;Create default console project.
add .editorconfig with
dotnet_diagnostic.CA1852.severity = error&lt;/p&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;genrate program class sealed&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;genrate program class no sealed&lt;/p&gt;
&lt;h3&gt;Regression?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Known Workarounds&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Other information&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 01 Sep 2022 09:04:35 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6137</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6137</link>
      <title>Issue: False positive for CA1309 on string.Compare() - @RobinHood70</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1309"&gt;CA1309&lt;/a&gt;: &lt;code&gt;Use ordinal StringComparison&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;The rule fires for overloads of string.Compare() that use linguistic comparisons and have no obvious StringComparison overload, such as:
&lt;code&gt;var example = string.Compare(&amp;quot;Text1&amp;quot;, &amp;quot;Text2&amp;quot;, false, CultureInfo.CurrentCulture);&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Add the line above to a project where CA1309 is enabled.&lt;/li&gt;
&lt;li&gt;The warning shows up in the Error List&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;The warning should not display.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;The warning displays.&lt;/p&gt;
</description>
      <pubDate>Wed, 31 Aug 2022 03:22:06 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6136</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6136</link>
      <title>Issue: Local test run failures in DoNotCopyValueTests - @RikkiGibson</title>
      <description>&lt;p&gt;This is occurring in my branch for #6115 which I recently synced from latest main. I don't think the failures are related to my changes.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-log"&gt;Roslyn.Diagnostics.Analyzers.UnitTests.DoNotCopyValueTests.TestAcquireFromAwaitInvocationAsync(csharpInvokeType: &amp;quot;Func&amp;lt;ValueTask&amp;lt;GCHandle&amp;gt;&amp;gt;&amp;quot;, visualBasicInvokeType: &amp;quot;Func(Of ValueTask(Of GCHandle))&amp;quot;)​37ms
Error:
Microsoft.CodeAnalysis.Testing.Verifiers.EqualWithMessageException : Context: Diagnostics of test state
Mismatch between number of diagnostics returned, expected &amp;quot;0&amp;quot; actual &amp;quot;1&amp;quot;

Diagnostics:
// /0/Test0.cs(9,23): error CS0246: The type or namespace name 'ValueTask&amp;lt;&amp;gt;' could not be found (are you missing a using directive or an assembly reference?)
DiagnosticResult.CompilerError(&amp;quot;CS0246&amp;quot;).WithSpan(9, 23, 9, 42).WithArguments(&amp;quot;ValueTask&amp;lt;&amp;gt;&amp;quot;),


Assert.Equal() Failure
Expected: 0
Actual:   1

Stack trace:
   at Microsoft.CodeAnalysis.Testing.Verifiers.XUnitVerifier.Equal[T](T expected, T actual, String message) in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Testing.Verifiers.XUnit/XUnitVerifier.cs:line 51
   at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1.VerifyDiagnosticResults(IEnumerable`1 actualResults, ImmutableArray`1 analyzers, DiagnosticResult[] expectedResults, IVerifier verifier) in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Analyzer.Testing/AnalyzerTest`1.cs:line 360
   at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1.&amp;lt;VerifyDiagnosticsAsync&amp;gt;d__66.MoveNext() in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Analyzer.Testing/AnalyzerTest`1.cs:line 273
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-log"&gt;Roslyn.Diagnostics.Analyzers.UnitTests.DoNotCopyValueTests.TestAcquireFromAwaitInvocationAsync(csharpInvokeType: &amp;quot;Func&amp;lt;ConfiguredValueTaskAwaitable&amp;lt;GCHandle&amp;gt;&amp;gt;&amp;quot;, visualBasicInvokeType: &amp;quot;Func(Of ConfiguredValueTaskAwaitable(Of GCHandle))&amp;quot;)​20ms
Error:
Microsoft.CodeAnalysis.Testing.Verifiers.EqualWithMessageException : Context: Diagnostics of test state
Mismatch between number of diagnostics returned, expected &amp;quot;0&amp;quot; actual &amp;quot;1&amp;quot;

Diagnostics:
// /0/Test0.cs(9,23): error CS0246: The type or namespace name 'ConfiguredValueTaskAwaitable&amp;lt;&amp;gt;' could not be found (are you missing a using directive or an assembly reference?)
DiagnosticResult.CompilerError(&amp;quot;CS0246&amp;quot;).WithSpan(9, 23, 9, 61).WithArguments(&amp;quot;ConfiguredValueTaskAwaitable&amp;lt;&amp;gt;&amp;quot;),


Assert.Equal() Failure
Expected: 0
Actual:   1

Stack trace:
   at Microsoft.CodeAnalysis.Testing.Verifiers.XUnitVerifier.Equal[T](T expected, T actual, String message) in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Testing.Verifiers.XUnit/XUnitVerifier.cs:line 51
   at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1.VerifyDiagnosticResults(IEnumerable`1 actualResults, ImmutableArray`1 analyzers, DiagnosticResult[] expectedResults, IVerifier verifier) in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Analyzer.Testing/AnalyzerTest`1.cs:line 360
   at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1.&amp;lt;VerifyDiagnosticsAsync&amp;gt;d__66.MoveNext() in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Analyzer.Testing/AnalyzerTest`1.cs:line 273
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-log"&gt;Roslyn.Diagnostics.Analyzers.UnitTests.DoNotCopyValueTests.TestAcquireFromAwaitAsync(csharpAwaitableType: &amp;quot;ValueTask&amp;lt;GCHandle&amp;gt;&amp;quot;, visualBasicAwaitableType: &amp;quot;ValueTask(Of GCHandle)&amp;quot;)​21ms
Error:
Microsoft.CodeAnalysis.Testing.Verifiers.EqualWithMessageException : Context: Diagnostics of test state
Mismatch between number of diagnostics returned, expected &amp;quot;0&amp;quot; actual &amp;quot;1&amp;quot;

Diagnostics:
// /0/Test0.cs(8,18): error CS0246: The type or namespace name 'ValueTask&amp;lt;&amp;gt;' could not be found (are you missing a using directive or an assembly reference?)
DiagnosticResult.CompilerError(&amp;quot;CS0246&amp;quot;).WithSpan(8, 18, 8, 37).WithArguments(&amp;quot;ValueTask&amp;lt;&amp;gt;&amp;quot;),


Assert.Equal() Failure
Expected: 0
Actual:   1

Stack trace:
   at Microsoft.CodeAnalysis.Testing.Verifiers.XUnitVerifier.Equal[T](T expected, T actual, String message) in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Testing.Verifiers.XUnit/XUnitVerifier.cs:line 51
   at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1.VerifyDiagnosticResults(IEnumerable`1 actualResults, ImmutableArray`1 analyzers, DiagnosticResult[] expectedResults, IVerifier verifier) in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Analyzer.Testing/AnalyzerTest`1.cs:line 360
   at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1.&amp;lt;VerifyDiagnosticsAsync&amp;gt;d__66.MoveNext() in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Analyzer.Testing/AnalyzerTest`1.cs:line 273
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-log"&gt;Roslyn.Diagnostics.Analyzers.UnitTests.DoNotCopyValueTests.TestAcquireFromAwaitAsync(csharpAwaitableType: &amp;quot;ConfiguredValueTaskAwaitable&amp;lt;GCHandle&amp;gt;&amp;quot;, visualBasicAwaitableType: &amp;quot;ConfiguredValueTaskAwaitable(Of GCHandle)&amp;quot;)​8ms
Error:
Microsoft.CodeAnalysis.Testing.Verifiers.EqualWithMessageException : Context: Diagnostics of test state
Mismatch between number of diagnostics returned, expected &amp;quot;0&amp;quot; actual &amp;quot;1&amp;quot;

Diagnostics:
// /0/Test0.cs(8,18): error CS0246: The type or namespace name 'ConfiguredValueTaskAwaitable&amp;lt;&amp;gt;' could not be found (are you missing a using directive or an assembly reference?)
DiagnosticResult.CompilerError(&amp;quot;CS0246&amp;quot;).WithSpan(8, 18, 8, 56).WithArguments(&amp;quot;ConfiguredValueTaskAwaitable&amp;lt;&amp;gt;&amp;quot;),


Assert.Equal() Failure
Expected: 0
Actual:   1

Stack trace:
   at Microsoft.CodeAnalysis.Testing.Verifiers.XUnitVerifier.Equal[T](T expected, T actual, String message) in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Testing.Verifiers.XUnit/XUnitVerifier.cs:line 51
   at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1.VerifyDiagnosticResults(IEnumerable`1 actualResults, ImmutableArray`1 analyzers, DiagnosticResult[] expectedResults, IVerifier verifier) in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Analyzer.Testing/AnalyzerTest`1.cs:line 360
   at Microsoft.CodeAnalysis.Testing.AnalyzerTest`1.&amp;lt;VerifyDiagnosticsAsync&amp;gt;d__66.MoveNext() in /_/src/Microsoft.CodeAnalysis.Testing/Microsoft.CodeAnalysis.Analyzer.Testing/AnalyzerTest`1.cs:line 273
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Tue, 30 Aug 2022 19:44:03 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6135</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6135</link>
      <title>Issue: Source-build behavior control update - @mmitche</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;This issue is dependent on https://github.com/dotnet/source-build/issues/2974 and is a placeholder for .NET 8 required work in product repositories.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Instructions for implementation will be updated once https://github.com/dotnet/source-build/issues/2974 but will likely be a mechanical shift of properties in this repo. In a general sense, this is scaffolding work for expanding the set of source-built platforms beyond Linux.&lt;/p&gt;
</description>
      <pubDate>Tue, 30 Aug 2022 16:01:00 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6134</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6134</link>
      <title>Issue: `Microsoft.NetCore.Analyzers.Runtime.UnitTests.DetectPreviewFeatureUnitTests.TestCustomAttribute` is flaky - @333fred</title>
      <description>&lt;p&gt;After https://github.com/dotnet/roslyn-analyzers/pull/6114/, the &lt;code&gt;Microsoft.NetCore.Analyzers.Runtime.UnitTests.DetectPreviewFeatureUnitTests.TestCustomAttribute&lt;/code&gt; test is flaky, failing with some kind of race condition. The test is usually passing when run by itself, but often failing when running all tests together. The stack of the failure is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DiagnosticResult.CompilerError(&amp;quot;AD0001&amp;quot;).WithArguments(&amp;quot;Microsoft.NetCore.CSharp.Analyzers.Runtime.CSharpDetectPreviewFeatureAnalyzer&amp;quot;, &amp;quot;Microsoft.VisualStudio.TestPlatform.TestHost.DebugAssertException&amp;quot;, &amp;quot;Method Debug.Fail failed with 'Should never reach this line. This means the symbol MyAttribute was not processed in this analyzer
', and was translated to Microsoft.VisualStudio.TestPlatform.TestHost.DebugAssertException to avoid terminating the process hosting the test.&amp;quot;, &amp;quot;Exception occurred with following context:
Compilation: TestProject
IOperation: ObjectCreation
SyntaxTree: /0/Test0.cs
SyntaxNode: My [AttributeSyntax]@[211..213) (13,1)-(13,3)

Microsoft.VisualStudio.TestPlatform.TestHost.DebugAssertException: Method Debug.Fail failed with 'Should never reach this line. This means the symbol MyAttribute was not processed in this analyzer
', and was translated to Microsoft.VisualStudio.TestPlatform.TestHost.DebugAssertException to avoid terminating the process hosting the test.
   at System.Diagnostics.TraceInternal.Fail(String message, String detailMessage)
   at System.Diagnostics.TraceInternal.TraceProvider.Fail(String message, String detailMessage)
   at System.Diagnostics.Debug.Fail(String message)
   at Microsoft.NetCore.Analyzers.Runtime.DetectPreviewFeatureAnalyzer.ReportDiagnosticWithCustomMessageIfItExists(OperationAnalysisContext context, IOperation operation, ISymbol symbol, ConcurrentDictionary`2 requiresPreviewFeaturesSymbols, DiagnosticDescriptor diagnosticDescriptor, DiagnosticDescriptor diagnosticDescriptorWithPlaceholdersForCustomMessage, String diagnosticMessageArgument) in /home/fred/git/roslyn-analyzers/src/NetAnalyzers/Core/Microsoft.NetCore.Analyzers/Runtime/DetectPreviewFeatureAnalyzer.cs:line 906
   at Microsoft.NetCore.Analyzers.Runtime.DetectPreviewFeatureAnalyzer.BuildSymbolInformationFromOperations(OperationAnalysisContext context, ConcurrentDictionary`2 requiresPreviewFeaturesSymbols, INamedTypeSymbol previewFeatureAttributeSymbol) in /home/fred/git/roslyn-analyzers/src/NetAnalyzers/Core/Microsoft.NetCore.Analyzers/Runtime/DetectPreviewFeatureAnalyzer.cs:line 708
   at Microsoft.NetCore.Analyzers.Runtime.DetectPreviewFeatureAnalyzer.&amp;lt;&amp;gt;c__DisplayClass33_0.&amp;lt;Initialize&amp;gt;b__1(OperationAnalysisContext context) in /home/fred/git/roslyn-analyzers/src/NetAnalyzers/Core/Microsoft.NetCore.Analyzers/Runtime/DetectPreviewFeatureAnalyzer.cs:line 259
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.&amp;lt;&amp;gt;c.&amp;lt;ExecuteOperationAction&amp;gt;b__63_0(ValueTuple`2 data)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows_NoLock[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteAndCatchIfThrows[TArg](DiagnosticAnalyzer analyzer, Action`1 analyze, TArg argument, Nullable`1 info)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationAction(OperationAnalyzerAction operationAction, IOperation operation, ISymbol containingSymbol, SemanticModel semanticModel, Action`1 addDiagnostic, Func`2 isSupportedDiagnostic, OperationAnalyzerStateData analyzerState)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActions(IOperation operation, ImmutableSegmentedDictionary`2 operationActionsByKind, ISymbol containingSymbol, SemanticModel model, Action`1 addDiagnostic, Func`2 isSupportedDiagnostic, OperationAnalyzerStateData analyzerState)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActions(IEnumerable`1 operationsToAnalyze, ImmutableSegmentedDictionary`2 operationActionsByKind, DiagnosticAnalyzer analyzer, ISymbol containingSymbol, SemanticModel model, Action`1 addDiagnostic, Func`2 isSupportedDiagnostic, OperationAnalyzerStateData analyzerState)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.ExecuteOperationActionsCore(IEnumerable`1 operationsToAnalyze, ImmutableSegmentedDictionary`2 operationActionsByKind, DiagnosticAnalyzer analyzer, ISymbol containingSymbol, SemanticModel model, TextSpan filterSpan, OperationAnalyzerStateData analyzerState, Boolean isGeneratedCode)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerExecutor.TryExecuteOperationActions(IEnumerable`1 operationsToAnalyze, ImmutableSegmentedDictionary`2 operationActionsByKind, DiagnosticAnalyzer analyzer, SemanticModel model, TextSpan filterSpan, Int32 declarationIndex, ISymbol declaredSymbol, AnalysisScope analysisScope, AnalysisState analysisState, Boolean isGeneratedCode)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.&amp;lt;&amp;gt;c__DisplayClass12_0.&amp;lt;TryExecuteDeclaringReferenceActions&amp;gt;g__executeOperationsActionsByKind|6(AnalysisScope analysisScope, ImmutableArray`1 operationsToAnalyze, GroupedAnalyzerActions groupedActions)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.&amp;lt;&amp;gt;c__DisplayClass12_0.&amp;lt;TryExecuteDeclaringReferenceActions&amp;gt;g__executeExecutableCodeActions|3()
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions(SyntaxReference decl, Int32 declarationIndex, SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisState, GroupedAnalyzerActions coreActions, GroupedAnalyzerActions additionalPerSymbolActions, Boolean shouldExecuteSyntaxNodeActions, Boolean shouldExecuteOperationActions, Boolean shouldExecuteCodeBlockActions, Boolean shouldExecuteOperationBlockActions, Boolean isInGeneratedCode, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver`1.TryExecuteDeclaringReferenceActions(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisState, Boolean isGeneratedCodeSymbol, IGroupedAnalyzerActions additionalPerSymbolActions, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisState, CancellationToken cancellationToken)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine&amp;amp; stateMachine)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessSymbolDeclaredAsync(SymbolDeclaredCompilationEvent symbolEvent, AnalysisScope analysisScope, AnalysisState analysisState, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync(CompilationEvent compilationEvent, AnalysisScope analysisScope, AnalysisState analysisState, CancellationToken cancellationToken)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine&amp;amp; stateMachine)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.TryProcessEventCoreAsync(CompilationEvent compilationEvent, AnalysisScope analysisScope, AnalysisState analysisState, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync(CompilationEvent e, AnalysisScope analysisScope, AnalysisState analysisState, CancellationToken cancellationToken)
   at System.Runtime.CompilerServices.AsyncMethodBuilderCore.Start[TStateMachine](TStateMachine&amp;amp; stateMachine)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessEventAsync(CompilationEvent e, AnalysisScope analysisScope, AnalysisState analysisState, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Diagnostics.AnalyzerDriver.ProcessCompilationEventsCoreAsync(AnalysisScope analysisScope, AnalysisState analysisState, Boolean prePopulatedEventQueue, CancellationToken cancellationToken)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecutionContextCallback(Object s)
   at System.Threading.ExecutionContext.RunFromThreadPoolDispatchLoop(Thread threadPoolThread, ExecutionContext executionContext, ContextCallback callback, Object state)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.MoveNext(Thread threadPoolThread)
   at System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AsyncStateMachineBox`1.ExecuteFromThreadPool(Thread threadPoolThread)
   at System.Threading.ThreadPoolWorkQueue.Dispatch()
   at System.Threading._ThreadPoolWaitCallback.PerformWaitCallback()
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Mon, 29 Aug 2022 20:36:21 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6133</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6133</link>
      <title>Issue: Add code fix to enforce analyzer extended rules - @RikkiGibson</title>
      <description>&lt;p&gt;We should add a code fix for SymbolIsBannedInAnalyzersAnalyzer for the following diagnostic:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;// error RS1036: 'MyAnalyzer': A project containing analyzers or source generators should specify the editorconfig setting 'dotnet_code_quality.enforce_extended_analyzer_rules = true'.&lt;/code&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;It would be awesome if this supported a code fix that either creates or appends to an .editorconfig file and adds &lt;code&gt;&amp;lt;%option%&amp;gt; = true&lt;/code&gt; entry. Can you file a tracking issue for adding this code fix in future?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted by @mavasani in https://github.com/dotnet/roslyn-analyzers/pull/6115#discussion_r955046828&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Mon, 29 Aug 2022 20:26:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6132</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6132</link>
      <title>Issue: Package banned symbols in SymbolIsBannedInAnalyzersAnalyzer as a non-embedded text file - @RikkiGibson</title>
      <description>&lt;p&gt;Another option is to package this text file as an additional file in the NuGet package, and have the analyzer access it via AdditionalFiles on the analysis context. This approach has the advantage that the user has the option to hand edit the txt file within the downloaded NuGet package on their machine to include/exclude additional banned APIs in it for customized experience.&lt;/p&gt;
&lt;p&gt;In case you would like to take this route: We have post-build tooling in the repo that generates package specific targets file and embeds it into the NuGet package. You can add the &lt;code&gt;ItemGroup&lt;/code&gt; to always add this txt file as an additional file by appending to the below string: https://github.com/dotnet/roslyn-analyzers/blob/d80e535c08bf3eace650005ac2e7e061ed8692cd/src/Tools/GenerateDocumentationAndConfigFiles/Program.cs#L1560-L1575&lt;/p&gt;
&lt;p&gt;You would then need to update https://github.com/dotnet/roslyn-analyzers/blob/main/nuget/Microsoft.CodeAnalysis.Analyzers/Microsoft.CodeAnalysis.Analyzers.Package.csproj to include this file as an &lt;code&gt;AnalyzerNupkgFile&lt;/code&gt;, similar to https://github.com/dotnet/roslyn-analyzers/blob/3393ecfccd4331ced6423e9b875187ee377f1ce2/nuget/PerformanceSensitiveAnalyzers/Microsoft.CodeAnalysis.PerformanceSensitiveAnalyzers.Package.csproj#L22&lt;/p&gt;
&lt;p&gt;Feel free to ignore this suggestion completely :-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted by @mavasani in https://github.com/dotnet/roslyn-analyzers/pull/6115#discussion_r955036202&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Mon, 29 Aug 2022 20:24:30 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6131</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6131</link>
      <title>Issue: Specify all source-built dependencies and ensure they are regularly updated - @mmitche</title>
      <description>&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;Source-build works today by building a repository, gathering the versions of the outputs, and creating a property file with those versions. This property file is then fed to downstream repositories, which import it after their &lt;code&gt;eng/Versions.props&lt;/code&gt;. The resulting behavior is that the downstream repo overrides all dependency versions specified in &lt;code&gt;eng/Versions.props&lt;/code&gt; with the versions built from source. This behavior is &lt;strong&gt;not&lt;/strong&gt; the same as the Maestro dependency-flow based approach. Maestro only updates properties for dependencies that are specified in &lt;code&gt;eng/Version.Details.xml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This causes the following difference: Say that dotnet/aspnetcore has a &lt;code&gt;Microsoft.Net.Compilers.Toolset&lt;/code&gt; dependency. It codes a property for that dependency's version in &lt;code&gt;eng/Versions.props&lt;/code&gt; as &lt;code&gt;MicrosoftNetCompilersToolsetVersion&lt;/code&gt;, with an older version of the package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When building via source-build, roslyn builds first, and aspnetcore will pick up the new version of Microsoft.Net.Compilers.Toolset, even though it doesn't want to.&lt;/li&gt;
&lt;li&gt;When building officially, the non-latest version will be used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This difference tends to cause build breaks in source-build. The version bump may be significant and require repo reaction. This is not ideal and not sustainable.&lt;/p&gt;
&lt;p&gt;One option would be to only override those versions that are specified in &lt;code&gt;eng/Version.Details.xml&lt;/code&gt;. This would more closely align the source-build and current official builds. The huge downside is that this will cause an explosion of ref packs. And in some cases, we would be building against old versions but actually executing against newer ones. Non-ideal.&lt;/p&gt;
&lt;p&gt;In summary, the goals are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Reduce source-build build breaks&lt;/li&gt;
&lt;li&gt;Avoid a large increase in ref packs.&lt;/li&gt;
&lt;li&gt;Ensure that it is possible to freeze on old versions of a specific component if absolutely necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Work Required&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;This work is dependent on https://github.com/dotnet/source-build/issues/2982&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In this repo, do the following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] Obtain a report of un-specified dependencies in this repo. This issue will be updated with instructions on how to do so after https://github.com/dotnet/source-build/issues/2982 is complete.&lt;/li&gt;
&lt;li&gt;[ ] Specify all dependencies classified as missing in the report in the &lt;code&gt;eng/Version.Details.xml&lt;/code&gt; file.&lt;/li&gt;
&lt;li&gt;[ ] Upgrade dependencies regularly via Maestro dependency flow mechanisms, or pin dependencies that should stay the same, with justification.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 29 Aug 2022 16:39:15 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6130</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6130</link>
      <title>Issue: CA2213 should not be raised when IAsyncDisposable field is disposed in Dispose() - @drieseng</title>
      <description>&lt;p&gt;When a given type &lt;strong&gt;A&lt;/strong&gt; only implements &lt;strong&gt;IDisposable&lt;/strong&gt; and contains a field of a type &lt;strong&gt;B&lt;/strong&gt; that implements &lt;strong&gt;IAsyncDisposable&lt;/strong&gt;, then &lt;strong&gt;CA2213&lt;/strong&gt; should not be reported if the field is disposed via a call to &lt;code&gt;IAsyncDisposable.DisposeAsync()&lt;/code&gt; in the &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; implementation of type &lt;strong&gt;A&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Not everyone can go async all-in.&lt;/p&gt;
&lt;h3&gt;Example:&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;public sealed class B : IAsyncDisposable
{
    public ValueTask DisposeAsync()
    {
        return default;
    }
}

public sealed class A : IDisposable
{
    private readonly B _resource;

    public A()
    {
        _resource = new B();
    }

    public void Dispose()
    {
        Task.Run(async () =&amp;gt; await _resource.DisposeAsync().ConfigureAwait(false))
            .GetAwaiter()
            .GetResult();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Actual result:&lt;/h3&gt;
&lt;p&gt;error CA2213: 'A' contains field '_resource' that is of IDisposable type 'B', but it is never disposed. Change the Dispose method on 'A' to call Close or Dispose on this field.&lt;/p&gt;
&lt;h3&gt;Expected result:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;CA2213&lt;/strong&gt; is not reported.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
If a type implements both &lt;strong&gt;IDisposable&lt;/strong&gt; and &lt;strong&gt;IAsyncDisposable&lt;/strong&gt;, then any (disposable) fields should be disposed in both the &lt;code&gt;IAsyncDisposable.DisposeAsync()&lt;/code&gt; and the &lt;code&gt;IDisposable.Dispose()&lt;/code&gt; implementations of that type.&lt;/p&gt;
</description>
      <pubDate>Sat, 27 Aug 2022 10:04:45 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6128</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6128</link>
      <title>Issue: Fix IDE0190 and IDE0200 from targeting net7.0 - @lbussell</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;N/A&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;N/A&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;When targeting net7.0, roslyn-analyzers has a few new style violations:&lt;/p&gt;
&lt;p&gt;src\Utilities\Compiler\WordParser.cs(104,29): error IDE0190: (NETCORE_ENGINEERING_TELEMETRY=Build) Null check can be simplified
src\Utilities\Compiler\PooledObjects\PooledDictionary.cs(95,65): error IDE0200: (NETCORE_ENGINEERING_TELEMETRY=Build) Lambda expression can be removed
src\Utilities\Compiler\PooledObjects\PooledConcurrentDictionary.cs(67,65): error IDE0200: (NETCORE_ENGINEERING_TELEMETRY=Build) Lambda expression can be removed
src\Utilities\Compiler\PooledObjects\PooledSortedSet.cs(64,62): error IDE0200: (NETCORE_ENGINEERING_TELEMETRY=Build) Lambda expression can be removed&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;N/A&lt;/p&gt;
&lt;h3&gt;Additional context&lt;/h3&gt;
&lt;p&gt;Please see https://github.com/dotnet/roslyn-analyzers/pull/6088&lt;/p&gt;
</description>
      <pubDate>Fri, 26 Aug 2022 19:55:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6127</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6127</link>
      <title>Issue: CA2100 is not triggered by System.Data.IDbCommand which it should according to the manual - @Jan801</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca2100"&gt;CA2100&lt;/a&gt;: &lt;code&gt;Review SQL queries for security vulnerabilities&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SDK&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/productivity/code-analysis"&gt;Built-in CA analyzers in .NET 5 SDK or later&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: &lt;a href="https://dotnet.microsoft.com/download/dotnet/6.0"&gt;SDK 6.0.8&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;CA2100 is not triggered by &amp;quot;System.Data.IDbCommand&amp;quot;, only by classes that implement it. The manual says System.Data.IDbCommand should trigger the rule.&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Open the attached solution &lt;a href="https://github.com/dotnet/roslyn-analyzers/files/9423315/CodeAnalysis.zip"&gt;CodeAnalysis.zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Open Program.cs&lt;/li&gt;
&lt;li&gt;See that line 9 and 10 have no red squiggly lines underneath and no CA2100 on mouseover&lt;/li&gt;
&lt;li&gt;See that line 11 which does a cast to the class System.Data.Common.DbCommand does have a red squiggly line underneath and CA2100 on mouseover&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;I would expect red squiggly lines underneath lines 9, 10 and 11 and mouse over showing CA2100 on all three lines.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;Only line 11 which casts to the class &amp;quot;System.Data.Common.DbCommand&amp;quot; has a squiggly red line underneath and the CA2100 rule when you mouseover&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/112068960/186627793-dcb14003-9a60-4505-b8c5-a97c1d4d1067.png" alt="image" /&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 25 Aug 2022 09:19:16 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6108</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6108</link>
      <title>Issue: No Tag for v3.3.3 - @WalkerCodeRanger</title>
      <description>&lt;p&gt;The &lt;a href="https://github.com/dotnet/roslyn-analyzers/blob/main/VERSIONING.md"&gt;VERSIONING.md&lt;/a&gt; document says that the tag for version 3.3.3 is &lt;code&gt;v3.3.3&lt;/code&gt; and points to commit &lt;a href="https://github.com/dotnet/roslyn-analyzers/commit/2771ee33883320861d72cdd23bf09a8da7fa8e5e"&gt;2771ee3&lt;/a&gt;. There is no tag &lt;code&gt;v3.3.3&lt;/code&gt; in this repo even though there are tags for many previous versions like &lt;code&gt;v3.3.2&lt;/code&gt;. However, version 3.3.3 has been released. For example https://www.nuget.org/packages/Microsoft.CodeAnalysis.BannedApiAnalyzers/3.3.3&lt;/p&gt;
</description>
      <pubDate>Mon, 15 Aug 2022 23:40:05 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6107</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6107</link>
      <title>Issue: Build Error when following "Getting Started" steps in README.md with "Version 7.0.100-preview.5.22307.18 of the .NET SDK requires at least version 17.0.0 of MSBuild" - @WalkerCodeRanger</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;When following the &amp;quot;Getting Started&amp;quot; steps in the &lt;a href="https://github.com/dotnet/roslyn-analyzers/blob/605be6968f5d2053d755641163f5d2a828694197/README.md"&gt;README.md&lt;/a&gt; for the &lt;code&gt;main&lt;/code&gt;  branch at commit #&lt;a href="https://github.com/dotnet/roslyn-analyzers/commit/793113a41d7f21b03470521bf48438f2abd9b12f"&gt;793113a&lt;/a&gt;. After running &lt;code&gt;Build.cmd&lt;/code&gt; the build fails with the error that &amp;quot;Version 7.0.100-preview.5.22307.18 of the .NET SDK requires at least version 17.0.0 of MSBuild. The current available version of MSBuild is 16.11.2.50704.&amp;quot; I am assuming that the instructions need to be updated and I have to install Visual Studio 2022 or at least a newer MSBuild version.&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;(Assuming this has to be done on a machine without Visual Studio 2022 or newer versions of MSBuild Installed)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Install Visual Studio 2019. I have version 16.11.18 installed&lt;/li&gt;
&lt;li&gt;Clone the repository and checkout the &lt;code&gt;main&lt;/code&gt; branch. Mine is on commit #&lt;a href="https://github.com/dotnet/roslyn-analyzers/commit/793113a41d7f21b03470521bf48438f2abd9b12f"&gt;793113a&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Install .NET SDK version specified in &lt;code&gt;.\global.json&lt;/code&gt; with &amp;quot;dotnet&amp;quot;. That is version 7.0.100-preview.5.22307.18. When I run &lt;code&gt;dotnet --list-sdks&lt;/code&gt; it responds:
&lt;pre&gt;&lt;code&gt;2.1.818 [C:\Program Files\dotnet\sdk]
3.1.417 [C:\Program Files\dotnet\sdk]
5.0.406 [C:\Program Files\dotnet\sdk]
5.0.411 [C:\Program Files\dotnet\sdk]
7.0.100-preview.5.22307.18 [C:\Program Files\dotnet\sdk]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;Open a command prompt &lt;code&gt;cmd&lt;/code&gt; and change directories to the repo directory&lt;/li&gt;
&lt;li&gt;Run &lt;code&gt;Build.cmd&lt;/code&gt;. the output I get is:
&lt;pre&gt;&lt;code&gt;   Determining projects to restore...
   All projects are up-to-date for restore.
 Attempting to install dotnet from public location.
 dotnet-install: Note that the intended use of this script is for Continuous Integration (CI) scenarios, where:
 dotnet-install: - The SDK needs to be installed without user interaction and without admin rights.
 dotnet-install: - The SDK installation doesn't need to persist across multiple CI runs.
 dotnet-install: To set up a development environment or to run apps, use installers rather than this script. Visit https://dotnet.microsoft.com/download to get the installer.

 dotnet-install: .NET Core Runtime with version '3.1.7' is already installed.
 dotnet-install: Adding to current process PATH: &amp;quot;C:\_Code\_ThirdParty\roslyn-analyzers\.dotnet\&amp;quot;. Note: This change will not be visible if PowerShell was run as a child process.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\Core\Roslyn.Diagnostics.Analyzers.csproj : error
  : Version 7.0.100-preview.5.22307.18 of the .NET SDK requires at least version 17.0.0 of MSBuild. The current availabl
 e version of MSBuild is 16.11.2.50704. Change the .NET SDK specified in global.json to an older version that requires t
 he MSBuild version currently available.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\Core\Roslyn.Diagnostics.Analyzers.csproj : error
  MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\UnitTests\Roslyn.Diagnostics.Analyzers.UnitTests
 .csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Text.Analyzers\Setup\Text.Analyzers.Setup.csproj : error MSB4236: The SDK 'Mi
 crosoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.Analyzers\CSharp\Microsoft.CodeAnalysis.CSharp.Analyze
 rs.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.Analyzers\Core\Microsoft.CodeAnalysis.Analyzers.csproj
  : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.Analyzers\UnitTests\Microsoft.CodeAnalysis.Analyzers.U
 nitTests.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Test.Utilities\Test.Utilities.csproj : error MSB4236: The SDK 'Microsoft.NET.
 Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\Setup\Roslyn.Diagnostics.Analyzers.Setup.csproj
 : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Text.Analyzers\UnitTests\Text.Analyzers.UnitTests.csproj : error MSB4236: The
  SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.Analyzers\Setup\Microsoft.CodeAnalysis.Analyzers.Setup
 .csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\CSharp\Roslyn.Diagnostics.CSharp.Analyzers.cspro
 j : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Text.Analyzers\CSharp\Text.CSharp.Analyzers.csproj : error MSB4236: The SDK '
 Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Text.Analyzers\Core\Text.Analyzers.csproj : error MSB4236: The SDK 'Microsoft
 .NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Utilities.UnitTests\Analyzer.Utilities.UnitTests.csproj : error MSB4236: The
 SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Text.Analyzers\Text.Analyzers.Package.csproj : error MSB4236: The SDK 'Micr
 osoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PublicApiAnalyzers\Core\CodeFixes\Microsoft.CodeAnalysis.PublicApiAnalyzers.C
 odeFixes.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.Analyzers\Microsoft.CodeAnalysis.Analyzers.Package.c
 sproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\PerformanceSensitiveAnalyzers\Microsoft.CodeAnalysis.PerformanceSensitiveAn
 alyzers.Package.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceSensitiveAnalyzers\UnitTests\Microsoft.CodeAnalysis.PerformanceSen
 sitiveAnalyzers.UnitTests.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\PublicApiAnalyzers\Microsoft.CodeAnalysis.PublicApiAnalyzers.Package.csproj
  : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceSensitiveAnalyzers\Core\Microsoft.CodeAnalysis.PerformanceSensitiv
 eAnalyzers.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Roslyn.Diagnostics.Analyzers\Roslyn.Diagnostics.Analyzers.Package.csproj :
 error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\TestReferenceAssembly\TestReferenceAssembly.csproj : error MSB4236: The SDK '
 Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.BannedApiAnalyzers\Microsoft.CodeAnalysis.BannedApiA
 nalyzers.Package.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.BannedApiAnalyzers\Setup\Microsoft.CodeAnalysis.Banned
 ApiAnalyzers.Setup.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PublicApiAnalyzers\Setup\Microsoft.CodeAnalysis.PublicApiAnalyzers.Setup.cspr
 oj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\NetAnalyzers\Core\Microsoft.CodeAnalysis.NetAnalyzers.csproj : error MSB4236:
  The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\Metrics\Metrics.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' spe
 cified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.BannedApiAnalyzers\UnitTests\Microsoft.CodeAnalysis.Ba
 nnedApiAnalyzers.UnitTests.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.BannedApiAnalyzers\Core\Microsoft.CodeAnalysis.BannedA
 piAnalyzers.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PublicApiAnalyzers\UnitTests\Microsoft.CodeAnalysis.PublicApiAnalyzers.UnitTe
 sts.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceSensitiveAnalyzers\Setup\Microsoft.CodeAnalysis.PerformanceSensiti
 veAnalyzers.Setup.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.Metrics\Microsoft.CodeAnalysis.Metrics.Package.cspro
 j : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.BannedApiAnalyzers\CSharp\Microsoft.CodeAnalysis.CShar
 p.BannedApiAnalyzers.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\NetAnalyzers\Setup\Microsoft.CodeAnalysis.NetAnalyzers.Setup.csproj : error M
 SB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\NetAnalyzers\CSharp\Microsoft.CodeAnalysis.CSharp.NetAnalyzers.csproj : error
  MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\ReleaseNotesUtil\ReleaseNotesUtil.csproj : error MSB4236: The SDK 'Micr
 osoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\NetAnalyzers\UnitTests\Microsoft.CodeAnalysis.NetAnalyzers.UnitTests.csproj :
  error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\RulesetToEditorconfigConverter\Source\RulesetToEditorconfigConverter.cs
 proj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\RulesetToEditorconfigConverter\Tests\RulesetToEditorconfigConverter.Uni
 tTests.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\Metrics\Metrics.Legacy.csproj : error MSB4236: The SDK 'Microsoft.NET.S
 dk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\NetAnalyzers\Microsoft.CodeAnalysis.NetAnalyzers.Package.csproj : error MSB
 4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\GenerateDocumentationAndConfigFiles\GenerateDocumentationAndConfigFiles
 .csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.RulesetToEditorconfigConverter\Microsoft.CodeAnalysi
 s.RulesetToEditorconfigConverter.Package.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be fou
 nd.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.AnalyzerUtilities\Microsoft.CodeAnalysis.AnalyzerUti
 lities.Package.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.AnalyzerUtilities\Microsoft.CodeAnalysis.AnalyzerUtili
 ties.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceSensitiveAnalyzers\CSharp\CodeFixes\Microsoft.CodeAnalysis.CSharp.
 PerformanceSensitiveAnalyzers.CodeFixes.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be foun
 d.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\GenerateDocumentationAndConfigFilesForBrokenRuntime\GenerateDocumentati
 onAndConfigFilesForBrokenRuntime.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\GenerateAnalyzerNuspec\GenerateAnalyzerNuspec.csproj : error MSB4236: T
 he SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.ResxSourceGenerator\Microsoft.CodeAnalysis.ResxSourceG
 enerator.VisualBasic\Microsoft.CodeAnalysis.ResxSourceGenerator.VisualBasic.csproj : error MSB4236: The SDK 'Microsoft.
 NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.ResxSourceGenerator\Microsoft.CodeAnalysis.ResxSourceG
 enerator\Microsoft.CodeAnalysis.ResxSourceGenerator.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could
  not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.ResxSourceGenerator\Microsoft.CodeAnalysis.ResxSourceG
 enerator.CSharp\Microsoft.CodeAnalysis.ResxSourceGenerator.CSharp.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' s
 pecified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PublicApiAnalyzers\Core\Analyzers\Microsoft.CodeAnalysis.PublicApiAnalyzers.c
 sproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.ResxSourceGenerator\Microsoft.CodeAnalysis.ResxSourceG
 enerator.UnitTests\Microsoft.CodeAnalysis.ResxSourceGenerator.UnitTests.csproj : error MSB4236: The SDK 'Microsoft.NET.
 Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.ResxSourceGenerator\Microsoft.CodeAnalysis.ResxSourc
 eGenerator.Package.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceTests\Utilities\CSharp\CSharpPerfUtilities.csproj : error MSB4236:
  The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceSensitiveAnalyzers\CSharp\Analyzers\Microsoft.CodeAnalysis.CSharp.
 PerformanceSensitiveAnalyzers.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceTests\Utilities\ReferenceAssemblies\ReferenceAssemblies.csproj : e
 rror MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceTests\Utilities\Common\CommonPerfUtilities.csproj : error MSB4236:
  The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceTests\Tests\PerformanceTests.csproj : error MSB4236: The SDK 'Micr
 osoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\PerfDiff\PerfDiff.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' s
 pecified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Text.Analyzers\VisualBasic\Text.VisualBasic.Analyzers.vbproj : error MSB4236:
  The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\VisualBasic\Roslyn.Diagnostics.VisualBasic.Analy
 zers.vbproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceTests\Utilities\VisualBasic\VisualBasicPerfUtilities.csproj : erro
 r MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.Analyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBas
 ic.Analyzers.vbproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\NetAnalyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBasic.NetAnalyzers.vbpr
 oj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.BannedApiAnalyzers\VisualBasic\Microsoft.CodeAnalysis.
 VisualBasic.BannedApiAnalyzers.vbproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.

 Build FAILED.

 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\Core\Roslyn.Diagnostics.Analyzers.csproj : error
  : Version 7.0.100-preview.5.22307.18 of the .NET SDK requires at least version 17.0.0 of MSBuild. The current availabl
 e version of MSBuild is 16.11.2.50704. Change the .NET SDK specified in global.json to an older version that requires t
 he MSBuild version currently available.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\Core\Roslyn.Diagnostics.Analyzers.csproj : error
  MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\UnitTests\Roslyn.Diagnostics.Analyzers.UnitTests
 .csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Text.Analyzers\Setup\Text.Analyzers.Setup.csproj : error MSB4236: The SDK 'Mi
 crosoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.Analyzers\CSharp\Microsoft.CodeAnalysis.CSharp.Analyze
 rs.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.Analyzers\Core\Microsoft.CodeAnalysis.Analyzers.csproj
  : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.Analyzers\UnitTests\Microsoft.CodeAnalysis.Analyzers.U
 nitTests.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Test.Utilities\Test.Utilities.csproj : error MSB4236: The SDK 'Microsoft.NET.
 Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\Setup\Roslyn.Diagnostics.Analyzers.Setup.csproj
 : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Text.Analyzers\UnitTests\Text.Analyzers.UnitTests.csproj : error MSB4236: The
  SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.Analyzers\Setup\Microsoft.CodeAnalysis.Analyzers.Setup
 .csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\CSharp\Roslyn.Diagnostics.CSharp.Analyzers.cspro
 j : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Text.Analyzers\CSharp\Text.CSharp.Analyzers.csproj : error MSB4236: The SDK '
 Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Text.Analyzers\Core\Text.Analyzers.csproj : error MSB4236: The SDK 'Microsoft
 .NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Utilities.UnitTests\Analyzer.Utilities.UnitTests.csproj : error MSB4236: The
 SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Text.Analyzers\Text.Analyzers.Package.csproj : error MSB4236: The SDK 'Micr
 osoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PublicApiAnalyzers\Core\CodeFixes\Microsoft.CodeAnalysis.PublicApiAnalyzers.C
 odeFixes.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.Analyzers\Microsoft.CodeAnalysis.Analyzers.Package.c
 sproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\PerformanceSensitiveAnalyzers\Microsoft.CodeAnalysis.PerformanceSensitiveAn
 alyzers.Package.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceSensitiveAnalyzers\UnitTests\Microsoft.CodeAnalysis.PerformanceSen
 sitiveAnalyzers.UnitTests.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\PublicApiAnalyzers\Microsoft.CodeAnalysis.PublicApiAnalyzers.Package.csproj
  : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceSensitiveAnalyzers\Core\Microsoft.CodeAnalysis.PerformanceSensitiv
 eAnalyzers.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Roslyn.Diagnostics.Analyzers\Roslyn.Diagnostics.Analyzers.Package.csproj :
 error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\TestReferenceAssembly\TestReferenceAssembly.csproj : error MSB4236: The SDK '
 Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.BannedApiAnalyzers\Microsoft.CodeAnalysis.BannedApiA
 nalyzers.Package.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.BannedApiAnalyzers\Setup\Microsoft.CodeAnalysis.Banned
 ApiAnalyzers.Setup.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PublicApiAnalyzers\Setup\Microsoft.CodeAnalysis.PublicApiAnalyzers.Setup.cspr
 oj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\NetAnalyzers\Core\Microsoft.CodeAnalysis.NetAnalyzers.csproj : error MSB4236:
  The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\Metrics\Metrics.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' spe
 cified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.BannedApiAnalyzers\UnitTests\Microsoft.CodeAnalysis.Ba
 nnedApiAnalyzers.UnitTests.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.BannedApiAnalyzers\Core\Microsoft.CodeAnalysis.BannedA
 piAnalyzers.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PublicApiAnalyzers\UnitTests\Microsoft.CodeAnalysis.PublicApiAnalyzers.UnitTe
 sts.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceSensitiveAnalyzers\Setup\Microsoft.CodeAnalysis.PerformanceSensiti
 veAnalyzers.Setup.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.Metrics\Microsoft.CodeAnalysis.Metrics.Package.cspro
 j : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.BannedApiAnalyzers\CSharp\Microsoft.CodeAnalysis.CShar
 p.BannedApiAnalyzers.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\NetAnalyzers\Setup\Microsoft.CodeAnalysis.NetAnalyzers.Setup.csproj : error M
 SB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\NetAnalyzers\CSharp\Microsoft.CodeAnalysis.CSharp.NetAnalyzers.csproj : error
  MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\ReleaseNotesUtil\ReleaseNotesUtil.csproj : error MSB4236: The SDK 'Micr
 osoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\NetAnalyzers\UnitTests\Microsoft.CodeAnalysis.NetAnalyzers.UnitTests.csproj :
  error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\RulesetToEditorconfigConverter\Source\RulesetToEditorconfigConverter.cs
 proj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\RulesetToEditorconfigConverter\Tests\RulesetToEditorconfigConverter.Uni
 tTests.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\Metrics\Metrics.Legacy.csproj : error MSB4236: The SDK 'Microsoft.NET.S
 dk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\NetAnalyzers\Microsoft.CodeAnalysis.NetAnalyzers.Package.csproj : error MSB
 4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\GenerateDocumentationAndConfigFiles\GenerateDocumentationAndConfigFiles
 .csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.RulesetToEditorconfigConverter\Microsoft.CodeAnalysi
 s.RulesetToEditorconfigConverter.Package.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be fou
 nd.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.AnalyzerUtilities\Microsoft.CodeAnalysis.AnalyzerUti
 lities.Package.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.AnalyzerUtilities\Microsoft.CodeAnalysis.AnalyzerUtili
 ties.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceSensitiveAnalyzers\CSharp\CodeFixes\Microsoft.CodeAnalysis.CSharp.
 PerformanceSensitiveAnalyzers.CodeFixes.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be foun
 d.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\GenerateDocumentationAndConfigFilesForBrokenRuntime\GenerateDocumentati
 onAndConfigFilesForBrokenRuntime.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\GenerateAnalyzerNuspec\GenerateAnalyzerNuspec.csproj : error MSB4236: T
 he SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.ResxSourceGenerator\Microsoft.CodeAnalysis.ResxSourceG
 enerator.VisualBasic\Microsoft.CodeAnalysis.ResxSourceGenerator.VisualBasic.csproj : error MSB4236: The SDK 'Microsoft.
 NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.ResxSourceGenerator\Microsoft.CodeAnalysis.ResxSourceG
 enerator\Microsoft.CodeAnalysis.ResxSourceGenerator.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could
  not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.ResxSourceGenerator\Microsoft.CodeAnalysis.ResxSourceG
 enerator.CSharp\Microsoft.CodeAnalysis.ResxSourceGenerator.CSharp.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' s
 pecified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PublicApiAnalyzers\Core\Analyzers\Microsoft.CodeAnalysis.PublicApiAnalyzers.c
 sproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.ResxSourceGenerator\Microsoft.CodeAnalysis.ResxSourceG
 enerator.UnitTests\Microsoft.CodeAnalysis.ResxSourceGenerator.UnitTests.csproj : error MSB4236: The SDK 'Microsoft.NET.
 Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\nuget\Microsoft.CodeAnalysis.ResxSourceGenerator\Microsoft.CodeAnalysis.ResxSourc
 eGenerator.Package.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceTests\Utilities\CSharp\CSharpPerfUtilities.csproj : error MSB4236:
  The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceSensitiveAnalyzers\CSharp\Analyzers\Microsoft.CodeAnalysis.CSharp.
 PerformanceSensitiveAnalyzers.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceTests\Utilities\ReferenceAssemblies\ReferenceAssemblies.csproj : e
 rror MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceTests\Utilities\Common\CommonPerfUtilities.csproj : error MSB4236:
  The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceTests\Tests\PerformanceTests.csproj : error MSB4236: The SDK 'Micr
 osoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Tools\PerfDiff\PerfDiff.csproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' s
 pecified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Text.Analyzers\VisualBasic\Text.VisualBasic.Analyzers.vbproj : error MSB4236:
  The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Roslyn.Diagnostics.Analyzers\VisualBasic\Roslyn.Diagnostics.VisualBasic.Analy
 zers.vbproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\PerformanceTests\Utilities\VisualBasic\VisualBasicPerfUtilities.csproj : erro
 r MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.Analyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBas
 ic.Analyzers.vbproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\NetAnalyzers\VisualBasic\Microsoft.CodeAnalysis.VisualBasic.NetAnalyzers.vbpr
 oj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 C:\_Code\_ThirdParty\roslyn-analyzers\src\Microsoft.CodeAnalysis.BannedApiAnalyzers\VisualBasic\Microsoft.CodeAnalysis.
 VisualBasic.BannedApiAnalyzers.vbproj : error MSB4236: The SDK 'Microsoft.NET.Sdk' specified could not be found.
 	0 Warning(s)
 	68 Error(s)

 Time Elapsed 00:00:02.46
 Build failed with exit code 1. Check errors above.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;The build should succeed.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;Build error that &amp;quot;Version 7.0.100-preview.5.22307.18 of the .NET SDK requires at least version 17.0.0 of MSBuild&amp;quot; as detailed above.&lt;/p&gt;
&lt;h2&gt;Additional context&lt;/h2&gt;
&lt;p&gt;I'm on the trail of a possible other bug in the banned API analyzer so I was trying to clone the repo and see if I could create a unit test verifying the bug. Having basic build instructions be wrong is a huge discouragement to other people contributing.&lt;/p&gt;
</description>
      <pubDate>Mon, 15 Aug 2022 21:45:55 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6105</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6105</link>
      <title>Issue: Support BannedAPIAnalyzers in XAML Code - @MeikTranel</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://github.com/dotnet/roslyn-analyzers/blob/main/src/Microsoft.CodeAnalysis.BannedApiAnalyzers/BannedApiAnalyzers.Help.md"&gt;RS0030&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Describe the improvement&lt;/h3&gt;
&lt;p&gt;Usage by XAML/WPF should be tracked just like it is in Razor/CSHTML.&lt;/p&gt;
&lt;h3&gt;Additional context&lt;/h3&gt;
&lt;p&gt;Use-Case for us would be to prohibit usage of controls when our own should be preceeding.&lt;/p&gt;
</description>
      <pubDate>Mon, 15 Aug 2022 14:29:17 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6104</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6104</link>
      <title>Issue: Code metrics gives only the last project metrices: YAML Task - @fousia</title>
      <description>&lt;p&gt;Hi ,
I have below task in my build pipeline :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;task: VSBuild@1
displayName: CodeMetrics&lt;br /&gt;
inputs:
solution: '**\Test.ABC.sln'
msbuildArgs: '/t:Metrics /p:MetricsOutputFile=$(Build.ArtifactStagingDirectory)/PartsUnlimitted.Metrics.xml'
platform: 'Any CPU'
configuration: '$(buildConfiguration)'&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have 3 projects in the Test.ABC.sln, and in the build log i could see for all projects code metrices is generated, however when i open the file from artifact it has only the last project metrices in the PartsUnlimitted.Metrics.xml file.&lt;/p&gt;
&lt;p&gt;How to get all projects code metrices written to the same file using the above task in yaml ?&lt;/p&gt;
&lt;p&gt;BR,
Fousia&lt;/p&gt;
</description>
      <pubDate>Fri, 12 Aug 2022 09:58:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6103</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6103</link>
      <title>Issue: Quick Action "Change &lt;Class&gt; to public interface implementation" fails for lambda methods - @vsfeedback</title>
      <description>&lt;p&gt;&lt;em&gt;This issue has been moved from &lt;a href="https://developercommunity.visualstudio.com/t/Quick-Action-Change-Class-to-public-i/10116280"&gt;a ticket on Developer Community&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[severity:It bothers me. A fix would be nice]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Implement Interface Method with a lambda expression in a class
&lt;code&gt;void IMyInterface.Foo() =&amp;gt; doSomething();&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use .NET Analyzer -&amp;gt; CA1033 -&amp;gt; says it should be sealed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use Ctrl-. for a quick fix -&amp;gt; &amp;quot;Change 'Foo()' to a public interface implementation&amp;quot;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;-&amp;gt; Code is broken and looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public Foo()
{
}
=&amp;gt; doSomething()
&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h3&gt;Original Comments&lt;/h3&gt;
&lt;h4&gt;Feedback Bot on 8/10/2022, 11:27 PM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Original Solutions&lt;/h3&gt;
&lt;p&gt;(no solutions)&lt;/p&gt;
</description>
      <pubDate>Thu, 11 Aug 2022 19:00:53 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6102</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6102</link>
      <title>Issue: Analyzer suggestion: Add ExportCodeFixProvider - @Youssef1313</title>
      <description>&lt;p&gt;The analyzer should detect concrete types derived directly or indirectly from CodeFixProvider and don't have an ExportCodeFixProvider.&lt;/p&gt;
&lt;p&gt;The attribute sometimes get forgotten, see https://github.com/dotnet/aspnetcore/pull/42724#discussion_r941839814&lt;/p&gt;
</description>
      <pubDate>Tue, 09 Aug 2022 22:39:18 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6101</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6101</link>
      <title>Issue: Sync code copied from dotnet/roslyn - @Youssef1313</title>
      <description>&lt;p&gt;See https://github.com/dotnet/roslyn/pull/63275&lt;/p&gt;
</description>
      <pubDate>Tue, 09 Aug 2022 14:09:36 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6096</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6096</link>
      <title>Issue: CA1305 is not reported for DateTime.TryParse(string s, out DateTime result) - @drieseng</title>
      <description>&lt;p&gt;&lt;strong&gt;Version Used&lt;/strong&gt;:
7.0.0-preview1.22310.1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steps to Reproduce&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Add a call to &lt;code&gt;DateTime.TryParse((string s, out DateTime result)&lt;/code&gt;.
For example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;var s = DateTime.TryParse(&amp;quot;19734-08-13&amp;quot;, out var result);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Expected Behavior&lt;/strong&gt;:
&lt;strong&gt;CA1305&lt;/strong&gt; is reported to encourage the use of the &lt;code&gt;TryParse(string s, IFormatProvider provider, DateTimeStyles styles, out DateTime result)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Actual Behavior&lt;/strong&gt;:
&lt;strong&gt;CA1305&lt;/strong&gt; is not reported.&lt;/p&gt;
</description>
      <pubDate>Fri, 05 Aug 2022 09:43:59 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6098</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6098</link>
      <title>Issue: Platform compatibilty analyzer doesn't treat "windows" as "windows7.0" by default - @jonathanou</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;I have a multi-target project that targets to both &lt;code&gt;net6.0&lt;/code&gt; and &lt;code&gt;net6.0-windows&lt;/code&gt;.  The project has an API that is &lt;code&gt;[SupportOSPlatform(&amp;quot;windows&amp;quot;)]&lt;/code&gt; whose implementation references a cross-platform type.  When building &lt;code&gt;net6.0-windows&lt;/code&gt; though, I'm getting CA1416 about the API accessing a windows 7 or later type.&lt;/p&gt;
&lt;p&gt;It appears the analyzer treats code defined under &lt;code&gt;net6.0-windows&lt;/code&gt; as windows 7.0, but doesn't treat &lt;code&gt;SupportedOSPlatform(&amp;quot;windows&amp;quot;)&lt;/code&gt; as windows 7.0.&lt;/p&gt;
&lt;p&gt;I don't get CA1416 when building &lt;code&gt;net6.0&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Reproduction Steps&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public static class Class1
{
    public static void Caller()
    {
        if (OperatingSystem.IsWindows())
        {
            DoStuff();
        }
    }

    [SupportedOSPlatform(&amp;quot;windows&amp;quot;)]
    public static void DoStuff()
    {
        var type = new MyType();
        WinApi(type);
    }

    [SupportedOSPlatform(&amp;quot;windows&amp;quot;)]
    public static void WinApi(MyType type)
    {
        // call win-specific APIs here
    }
}

public class MyType
{
    // this is a cross-platform type
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;No CA1416&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;CA1416 flagged on &lt;code&gt;var type = new MyType();&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/1291962/182773093-831884ec-92fa-4c05-abb8-cca7b8b1bbfc.png" alt="image" /&gt;&lt;/p&gt;
&lt;h3&gt;Regression?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Known Workarounds&lt;/h3&gt;
&lt;p&gt;Need to specify &amp;quot;windows7.0&amp;quot; explicitly&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;[SupportedOSPlatform(&amp;quot;windows7.0&amp;quot;)]
public static void DoStuff()
{
    var type = new MyType();
    WinApi(type);
}

[SupportedOSPlatform(&amp;quot;windows7.0&amp;quot;)]
public static void WinApi(MyType type)
{
    // call win-specific APIs here
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Other information&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 04 Aug 2022 05:51:42 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6100</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6100</link>
      <title>Issue: Platform compatibility analyzer doesn't recognize operating system checks that return or throw - @jonathanou</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;I have a project targeted to &lt;code&gt;net6.0&lt;/code&gt; that is calling an API that is supported on windows only.  I am throwing &lt;code&gt;PlatformNotSupportedException&lt;/code&gt; if &lt;code&gt;OperatingSystem.IsWindows() == false&lt;/code&gt;, but still getting CA1416.&lt;/p&gt;
&lt;p&gt;I also get CA1416 if I &lt;code&gt;return&lt;/code&gt; instead of &lt;code&gt;throw PlatformNotSupportedException&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Reproduction Steps&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public static void Caller()
{
    if (OperatingSystem.IsWindows() == false)
    {
        throw new PlatformNotSupportedException();
    }

    WinApi();
}

[SupportedOSPlatform(&amp;quot;windows&amp;quot;)]
public static void WinApi()
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;No CA1416 warning.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;WinApi()&lt;/code&gt; is flagged with CA1416.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/1291962/182769211-4f524ff1-6e68-4be6-acf2-eeabf28ef72e.png" alt="image" /&gt;&lt;/p&gt;
&lt;h3&gt;Regression?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Known Workarounds&lt;/h3&gt;
&lt;p&gt;Need to write this instead:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;if (OperatingSystem.IsWindows())
{
    WinApi();
}
else
{
    throw new PlatformNotSupportedException();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Other information&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 04 Aug 2022 05:25:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6097</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6097</link>
      <title>Issue: .NET 6 platform compatibility analyzer warns const string is only callable in certain OS platform - @jonathanou</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;My project is targeted to &lt;code&gt;net6.0-windows&lt;/code&gt; and has several &lt;code&gt;[SupportedOSPlatformGuard(&amp;quot;windows8.0&amp;quot;)]&lt;/code&gt; attributes.  I created a &lt;code&gt;const string PlatformIdentifier = &amp;quot;windows8.0&amp;quot;&lt;/code&gt; and updated my code to &lt;code&gt;[SupportedOSPlatformGuard(PlatformIdentifier)]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Surprisingly, I started to get CA1416 warning about the const string being callable by all platforms, but is only supported in Windows 7.0 or later.&lt;/p&gt;
&lt;p&gt;Interestingly, &lt;code&gt;[SupportedOSPlatform(PlatformIdentifier)]&lt;/code&gt; (not the guard attribute) does not generate the same warning.&lt;/p&gt;
&lt;h3&gt;Reproduction Steps&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;public static class Class1
{
    public const string PlatformIdentifier = &amp;quot;windows8.0&amp;quot;;

    [SupportedOSPlatformGuard(PlatformIdentifier)]
    public static bool MyGuard()
    {
        return OperatingSystem.IsWindowsVersionAtLeast(8);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;No CA1416 warnings&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;The above code snippet causes CA1416 on &lt;code&gt;[SupportedOSPlatformGuard(PlatformIdentifier)]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/1291962/182755405-4bef181c-d598-4ad6-b6d5-8399dd807df2.png" alt="image" /&gt;&lt;/p&gt;
&lt;h3&gt;Regression?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Known Workarounds&lt;/h3&gt;
&lt;p&gt;Workaround is to stop using the const string.&lt;/p&gt;
&lt;h3&gt;Configuration&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;Other information&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;No response&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 04 Aug 2022 03:15:13 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6094</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6094</link>
      <title>Issue: New version of NetAnalyzers throws CA1420 for delegates - @mattleibow</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: CA1420 &lt;code&gt;Delegates with managed types as parameters or the return type require runtime marshalling to be enabled in the assembly where the delegate is defined&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;NuGet Package&lt;/strong&gt;: &lt;a href="https://www.nuget.org/packages/Microsoft.CodeAnalysis.NetAnalyzers"&gt;Microsoft.CodeAnalysis.NetAnalyzers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: 7.0.0-preview1.22302.1&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;D:\a_work\1\s\src\Controls\src\Core\Platform\Tizen\Extensions\DragDropExtensions.cs(89,28): error CA1420: Delegates with managed types as parameters or the return type require runtime marshalling to be enabled in the assembly where the delegate is defined. [D:\a_work\1\s\src\Controls\src\Core\Controls.Core.csproj]&lt;/p&gt;
&lt;p&gt;I started getting this issue after updating the package from:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GOOD: 7.0.0-preview1.22274.2&lt;/li&gt;
&lt;li&gt;BAD: 7.0.0-preview1.22302.1&lt;/li&gt;
&lt;li&gt;BAD: 7.0.0-preview1.22379.1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Clone: https://github.com/dotnet/maui/tree/release/7.0.1xx-preview7&lt;/li&gt;
&lt;li&gt;Update https://github.com/dotnet/maui/blob/release/7.0.1xx-preview7/eng/Versions.props#L39 to be the newer: 7.0.0-preview1.22302.1&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet build Microsoft.Maui.BuildTasks.slnf /p:configuration=Release&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;Builds.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;Error.&lt;/p&gt;
&lt;h2&gt;Additional context&lt;/h2&gt;
&lt;p&gt;You may need to install the tizen workload, but I also saw this on other projects. I know this is a vague issue with a &amp;quot;download my code and build&amp;quot; but I am not sure what this error even means. Is it saying that delegates are not good?&lt;/p&gt;
&lt;p&gt;I &lt;em&gt;think&lt;/em&gt; it seems to be if some p/invoke has a delegate that uses a IntPtr&lt;/p&gt;
</description>
      <pubDate>Tue, 02 Aug 2022 19:43:27 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6092</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6092</link>
      <title>Issue: Suggestion of a WhitelistApiAnalyzers - @friflo</title>
      <description>&lt;h1&gt;Description&lt;/h1&gt;
&lt;p&gt;As a library developer I want to be very sure that which .NET BCL API's are used in my library.&lt;/p&gt;
&lt;p&gt;Currently I am using: Microsoft.CodeAnalysis.BannedApiAnalyzers&lt;/p&gt;
&lt;p&gt;with the &lt;code&gt;BannedSymbols.txt&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# --- process handling
T:System.Diagnostics.Process;                   avoid exploits running or observing other processes

# --- reflection
M:System.Activator.CreateInstance(System.String,System.String);                 avoid exploits by ensuring only explicit given Types are instantiated
M:System.Activator.CreateInstance(System.String,System.String,System.Object[]); avoid exploits by ensuring only explicit given Types are instantiated
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The goal is to prevent usage of API's which are predestined for abuse.&lt;/p&gt;
&lt;p&gt;But what I really want is a white-listing of .NET BCL API's.
So simply by looking at the white-list I know which types of exploits are possible.
Which results in white-listing of API's which are inherent safe.&lt;/p&gt;
&lt;p&gt;Especially in case of an OSS Pull Request it is easy to oversee API's which can be misused
if they are inside a big new code block and not banned.&lt;/p&gt;
&lt;p&gt;In contrast to BannedApiAnalyzers I would like to have a WhitelistApiAnalyzers using a whitelist as text file as input.&lt;/p&gt;
&lt;h3&gt;Describe suggestions on how to achieve the rule&lt;/h3&gt;
&lt;p&gt;The whitelist would look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;System.Collections.*
System.IO.*
System.Net.*
System.Text.*

System.Diagnostics.StackTrace
System.Diagnostics.Debug

# not System.Diagnostics.Process  as it can easily abused for exploits
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;My assumption is now that all white-listed namespaces and types are not exploitable.&lt;/p&gt;
</description>
      <pubDate>Mon, 01 Aug 2022 15:47:30 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6089</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6089</link>
      <title>Issue: Revise usages of `IObjectCreationOperation.Constructor` - @Youssef1313</title>
      <description>&lt;p&gt;&lt;code&gt;IObjectCreationOperation.Constructor&lt;/code&gt; can be null in VB for this error scenario:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-vb"&gt;Class C
    Protected Structure S
    End Structure
End Class

Class D
    Shared Sub M(o)
        M(New C.S())
    End Sub
End Class
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Revise all analyzers that dereferences &lt;code&gt;IObjectCreationOperation.Constructor&lt;/code&gt;, add test that causes NRE, then fix it.&lt;/p&gt;
</description>
      <pubDate>Sat, 30 Jul 2022 12:01:12 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6087</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6087</link>
      <title>Issue: Should warn same property access on get accessor - @vsfeedback</title>
      <description>&lt;p&gt;&lt;em&gt;This issue has been moved from &lt;a href="https://developercommunity.visualstudio.com/t/Should-warn-same-property-access-on-get-/10097064"&gt;a ticket on Developer Community&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;Hi,
I've spent couple hours after a hard to catch typo error and I believe it's a simple catch for VS.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private bool hasNewMessage;
public bool HasNewMessage {
get =&amp;gt; HasNewMessage; /* property is trying to &amp;quot;get&amp;quot; itself , instead of field.*/
set =&amp;gt; SetProperty(ref hasNewMessage, value);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It causes a crash without a meaningful stack trace, even poor VS crashes if you watch the object with this error.&lt;/p&gt;
&lt;p&gt;I've changed my field naming notation to start with underscore from that time on, but it's not a real solution.
Wouldn't it be perfect if you could point out the problem, as you do very well with other suggestions and warnings.&lt;/p&gt;
&lt;p&gt;Regards,
Mehmet&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Original Comments&lt;/h3&gt;
&lt;h4&gt;Feedback Bot on 7/18/2022, 01:22 AM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
</description>
      <pubDate>Fri, 29 Jul 2022 21:19:27 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6086</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6086</link>
      <title>Issue: CA1812 warning when using internal type as type parameter - @lonix1</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/CA1812"&gt;CA1812&lt;/a&gt;: &lt;code&gt;Avoid uninstantiated internal classes&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SDK&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/productivity/code-analysis"&gt;Built-in CA analyzers in .NET 6 SDK or later&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: &lt;a href="https://dotnet.microsoft.com/download/dotnet/6.0"&gt;SDK 6.0.302&lt;/a&gt;&lt;/p&gt;
&lt;!--
Note: Updates to NuGet package are more frequent than SDK, which means the NuGet package has fixes that haven't yet made it into the SDK.
      Please check whether you can reproduce the bug you encountered in the latest NuGet package.
--&gt;
&lt;!--
NOTE: `Microsoft.CodeAnalysis.FxCopAnalyzers` package has been deprecated in favor of 'Microsoft.CodeAnalysis.NetAnalyzers', that ships with the .NET SDK.
      Please refer to https://docs.microsoft.com/visualstudio/code-quality/migrate-from-fxcop-analyzers-to-net-analyzers to migrate to .NET analyzers.
--&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;!-- A clear and concise description of what the bug is. --&gt;
&lt;p&gt;This was already discussed in #3210 and closed prematurely. There have been other reports since it was closed, but has not been reopened.&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;I have a client library&lt;/li&gt;
&lt;li&gt;inside there is an &lt;code&gt;internal&lt;/code&gt; type &lt;code&gt;Foo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;and inside that library, it adds that type to the ASP.NET Core IoC container: &lt;code&gt;services.AddHostedService&amp;lt;Foo&amp;gt;()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;that older issue also documents other ways this could happen&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;...but the analyser still warns with &lt;code&gt;CA1812&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;Should not show CA1812&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;Shows CA1812&lt;/p&gt;
&lt;h2&gt;Additional context&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Fri, 29 Jul 2022 01:44:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6099</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6099</link>
      <title>Issue: Platform warnings in Windows Forms .NET 6 project - @janseris</title>
      <description>&lt;p&gt;&lt;strong&gt;Version Used&lt;/strong&gt;:
VS 2022 17.2.6&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steps to Reproduce&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/64279914/180609870-849ac21d-38c7-4366-8c8f-22da6af4d415.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;1.
&lt;a href="https://github.com/dotnet/roslyn/files/9173976/T435735_modified_NET6.zip"&gt;T435735_modified_NET6.zip&lt;/a&gt;
2.
Compiler or IntelliSense shows warning for all System.Drawing calls that they are only accesible on Windows.
3.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected Behavior&lt;/strong&gt;:
No warnings when WinForms is clearly Windows-only and in .csproj, there are these three specific properties which denote that this project/assembly is Windows-only:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;OutputType&amp;gt;WinExe&amp;lt;/OutputType&amp;gt;
&amp;lt;TargetFramework&amp;gt;net6.0-windows&amp;lt;/TargetFramework&amp;gt;
&amp;lt;UseWindowsForms&amp;gt;true&amp;lt;/UseWindowsForms&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Actual Behavior&lt;/strong&gt;:
Warning on every System.Drawing usage that this is available only on Windows platform.&lt;/p&gt;
</description>
      <pubDate>Sat, 23 Jul 2022 14:41:13 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6081</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6081</link>
      <title>Issue: Add ObsoletedInOSPlatform Attribute support in Platform Compat Analyzer - @buyaa-n</title>
      <description>&lt;h3&gt;Platform Compatibility Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca1416"&gt;CA1416&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Describe the improvement&lt;/h3&gt;
&lt;p&gt;We have &lt;a href="https://github.com/dotnet/runtime/issues/68557"&gt;added ObsoletedInOSPlatform Attribute&lt;/a&gt; in 7.0 recently, now need to add the analyzer support for this in PlatformCompatibilityAnalyzer. By the approved API the warnings for obsoleted should have different diagnostic ID, optional message and url properties that should be appended to the existing message. Plus optional message property is added to the &lt;code&gt;UnsupportedOSPlatform&lt;/code&gt; attribute which also needs update in the analyzer&lt;/p&gt;
&lt;h4&gt;Other scenarios/expectations not mentioned in the API Review:&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Call sites having &lt;code&gt;ObsoletedInOSPlatform&lt;/code&gt;  or &lt;code&gt;UnsupportedOSPlatform&lt;/code&gt; attributes with greater than or equal version could suppress obsoleted warnings&lt;/li&gt;
&lt;li&gt;Same as unsupported attribute diagnostic the obsoleted diagnostics could be guarded with negated &lt;code&gt;OperatingSystem&lt;/code&gt; APIs (for example: &lt;code&gt;if (!OperatingSystem.IsLinux()&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Also could be guarded with an API that annotated with &lt;code&gt;UnsupportedOSPlatformGuard&lt;/code&gt; attribute having matching platform/version, same for negated &lt;code&gt;SupportedOSPlatformGuard&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;No warning if the obsoleted platform and version is not in the call site supported range. Same as &lt;code&gt;UnsupportedOSPlatform&lt;/code&gt; no warning for cross platform build in case the platform is not included in MSBuild SupportedPlatforms list&lt;/li&gt;
&lt;li&gt;Warning message structure is same as the existing warnings, user message and/or Url will be appended at the end of each platform/version&lt;/li&gt;
&lt;li&gt;MacOS == OSX and iOS is MacCatalyst relations would work same as how it does for unsupported scenarios&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;CC @jeffhandley @terrajobst @rolfbjarne&lt;/p&gt;
</description>
      <pubDate>Fri, 22 Jul 2022 22:24:28 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6078</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6078</link>
      <title>Issue: ignore - @Tanya-Solyanik</title>
      <description />
      <pubDate>Wed, 20 Jul 2022 20:01:21 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6077</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6077</link>
      <title>Issue: CA1001 Does not trigger when IDisposable's members are not created via a constructor - @jerryk414</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;CA1001&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1001"&gt;CA1001&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Describe the improvement&lt;/h3&gt;
&lt;p&gt;CA1001 does not report when a member is generated via a method (instead of a constructor). It is understandable that under some circumstances, it is possible that IDisposable's created via a method should be managed by an owner other than the caller, however, excluding this circumstance makes it very difficult to identify areas in code where classes should be implementing IDisposable and disposing of their own managed disposable members.&lt;/p&gt;
&lt;h3&gt;Describe suggestions on how to achieve the rule&lt;/h3&gt;
&lt;p&gt;In order to stop a breaking change, it may be more worthwhile to create a new rule related to CA1001 that includes this functionality, but basically it would be an update to allow the rule to include members that are generated by means other than hitting using the &lt;code&gt;new&lt;/code&gt; construct.&lt;/p&gt;
&lt;p&gt;In my opinion, however, the source of the disposable shouldn't necessarily matter - the prevalence of instances where a class maintains an IDisposable but is &lt;em&gt;not&lt;/em&gt; responsible for it's disposing is so infrequent compared to the alternative that I think it would be arguably better to either A) have a very strict version of this rule that just inspects members - not their creation source, or B) update CA1001 to be this way.  The fix for those rare instances where it makes sense to do so could just add suppressions.&lt;/p&gt;
&lt;h3&gt;Additional context&lt;/h3&gt;
&lt;p&gt;In researching this issue, I was able to find the following thread with links to issues in connect, but I can't find an equivalent of the issue now that connect has been deprecated - https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/quality-rules/ca1001.&lt;/p&gt;
&lt;p&gt;In order to reproduce the problem, you should be able to use the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class CA1001
{
    private IDisposable _disposable;

    public CA1001()
    {
        // Does not warn for CA1001
        _disposable = GetDisposable();

        // Does not warn for CA1001
        //GetDisposable(out _disposable);

        // Does warn for CA1001
        //_disposable = new CancellationTokenSource();
    }

    private static IDisposable GetDisposable()
    {
        return new CancellationTokenSource();
    }

    private static void GetDisposable(out IDisposable disposable)
    {
        disposable = new CancellationTokenSource();
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Wed, 20 Jul 2022 16:23:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6075</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6075</link>
      <title>Issue: CA2213 false positive on explicit IAsyncDisposable interface implementation - @wiciok</title>
      <description>&lt;h3&gt;Analyzer&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Diagnostic ID&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/code-analysis/quality-rules/ca2213"&gt;CA2213&lt;/a&gt;: &lt;code&gt;Disposable fields should be disposed&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Analyzer source&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;SDK&lt;/strong&gt;: &lt;a href="https://docs.microsoft.com/dotnet/fundamentals/productivity/code-analysis"&gt;Built-in CA analyzers in .NET 5 SDK or later&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Version&lt;/strong&gt;: 6.0.302&lt;/p&gt;
&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;CA2213 doesn't recognize Dispose / DisposeAsync calls made in explicitly implemented IAsyncDisposable.DisposeAsync method, resulting in false-positive. This happens only when both IAsyncDisposable and IDisposable interfaces are implemented.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/18292081/179936458-3c6c9d41-f61e-49ac-beff-01da1980b109.png" alt="image" /&gt;&lt;/p&gt;
&lt;h3&gt;Steps To Reproduce&lt;/h3&gt;
&lt;p&gt;Run analyzers on following code sample:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace IAsyncDisposableBug
{
    public sealed class Test : IAsyncDisposable, IDisposable
    {
        private readonly HttpClient client;
        private readonly FileStream stream;

        public Test()
        {
            client = new HttpClient();
            stream = new FileStream(&amp;quot;C://some-path&amp;quot;, FileMode.CreateNew);
        }

        public void Dispose()
        {
            client.Dispose();
        }

        async ValueTask IAsyncDisposable.DisposeAsync()
        {
            await stream.DisposeAsync();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;Dispose/DisposeAsync calls are properly recognized regardless of how DisposeAsync() is implemented&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;Dispose/DisposeAsync calls are not properly recognized when made from explicitly implemented IAsyncDisposable.DisposeAsync()&lt;/p&gt;
</description>
      <pubDate>Wed, 20 Jul 2022 08:35:24 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6074</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6074</link>
      <title>Issue: Add an analyzer to suggest always await task when there is any using statements in the local context - @Cosifne</title>
      <description>&lt;p&gt;Hi, recently I fell into a pitfall which makes me feel it would be a good idea to have an analyzer to detect this.&lt;/p&gt;
&lt;p&gt;Consider the following code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public Task Hello()
{
    using var bar = new Bar();
    return DoSomethingAsync();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;public async Task Hello()
{
    using var bar = new Bar();
    return await DoSomethingAsync();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The difference is:
In the first example, &lt;code&gt;bar&lt;/code&gt; is disposed after when returned from &lt;code&gt;Hello&lt;/code&gt;. (&lt;code&gt;DoSomethingAsync&lt;/code&gt; might not complete at that time)
In the second example, &lt;code&gt;bar&lt;/code&gt; is disposed after &lt;code&gt;DoSomethingAsync&lt;/code&gt; is completed.&lt;/p&gt;
&lt;p&gt;This behavior of 'async' method might lead to strange behavior and it's very trivia to debug.&lt;/p&gt;
&lt;p&gt;I suggest we should give a suggestion diagnostics at the return statement if&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The return statement is leaving a scope, which contains 'using' statement/expressions&lt;/li&gt;
&lt;li&gt;The method is not async, and the return statement's type is awaitable.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code fix would be converting the return statement to 'await' pattern, and the containing method to 'async' version.&lt;/p&gt;
</description>
      <pubDate>Tue, 19 Jul 2022 18:51:19 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/roslyn-analyzers/issues/6071</guid>
      <link>https://github.com/dotnet/roslyn-analyzers/issues/6071</link>
      <title>Issue: False Positive on CA2101 (Specify marshaling for P/Invoke string arguments) - @hopperpl</title>
      <description>&lt;p&gt;&lt;strong&gt;Version Used&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Version 17.3.0 Preview 2.0
Rosyln 4.3.0-2.22307.7&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Steps to Reproduce&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;define a P/Invoke and set CharSet explicitly to Ansi&lt;/li&gt;
&lt;li&gt;run CodeAnalysis&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/14023243/179394193-cf8661ea-9dad-4b61-8b5e-51f4c33b8f59.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected Behavior&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;it was set, it should not complain it wasn't set&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Actual Behavior&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;it suggests to convert Ansi to Unicode which will be wrong; the backend library handles &lt;code&gt;const char*&lt;/code&gt; and not &lt;code&gt;const wchar_t*&lt;/code&gt;&lt;/p&gt;
</description>
      <pubDate>Sun, 17 Jul 2022 10:35:54 Z</pubDate>
    </item>
  </channel>
</rss>