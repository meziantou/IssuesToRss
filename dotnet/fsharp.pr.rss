<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dotnet/fsharp Pull Requests</title>
    <description>Pull Requests from https://github.com/dotnet/fsharp, generated by https://github.com/meziantou/IssuesToRss/</description>
    <managingEditor>meziantousite@outlook.com</managingEditor>
    <ttl>60</ttl>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13971</guid>
      <link>https://github.com/dotnet/fsharp/pull/13971</link>
      <title>PR: fix build break - @dsyme</title>
      <description />
      <pubDate>Fri, 23 Sep 2022 16:19:05 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13969</guid>
      <link>https://github.com/dotnet/fsharp/pull/13969</link>
      <title>PR: Prevent `dotnet` process spawn on compiler startup - @dsyme</title>
      <description>&lt;p&gt;Fixes https://github.com/dotnet/fsharp/issues/13960&lt;/p&gt;
&lt;p&gt;@vzarytovskii I think searching for &lt;code&gt;&amp;quot;Microsoft.NETCore.App.Ref&amp;quot;&lt;/code&gt; in the directory name is adequate for now.&lt;/p&gt;
&lt;p&gt;I did a performance comparison and on my laptop running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;C:\GitHub\dsyme\fsharp\artifacts\bin\fsc\Release\net7.0\fsc.exe @out.args
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Before: 2.9s
After: 2.7s&lt;/p&gt;
&lt;p&gt;The proportional effect is greater if crossgen is active and you can actually measure the effect in the SDK today, as the process spawn only kicks in if non-default assemblies are referenced, e.g.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make an &lt;code&gt;out.args&lt;/code&gt; for a simple project referencing &lt;code&gt;Newtonsoft.Json&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dotnet &amp;quot;\Program Files\dotnet\sdk\7.0.100-rc.1.22431.12\FSharp\fsc.dll&amp;quot; @out.args --times&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then remove this reference from the list and repeat&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  -r:C:\Users\donsy\.nuget\packages\newtonsoft.json\13.0.1\lib\netstandard2.0\Newtonsoft.Json.dll
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before: consistently 1.7s
After: consistently 1.5s&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 13:13:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13966</guid>
      <link>https://github.com/dotnet/fsharp/pull/13966</link>
      <title>PR: Remove unused fcs support for compiling from asts - @T-Gro</title>
      <description>&lt;p&gt;This PR removes 3 entry points into F# Compiler Services.
1 is related to compiling from AST (as opposed to text)
2 are related to dynamic assembly generation&lt;/p&gt;
&lt;p&gt;The known usages have been discussed in the linked issue https://github.com/dotnet/fsharp/issues/13242  and none of them identified as a showstopper.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 11:48:12 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13964</guid>
      <link>https://github.com/dotnet/fsharp/pull/13964</link>
      <title>PR: Compiler error when declaring multiple parameters with the same name in abstract methods - @edgarfgp</title>
      <description>&lt;p&gt;Fixes https://github.com/dotnet/fsharp/issues/13148&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 18:42:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13963</guid>
      <link>https://github.com/dotnet/fsharp/pull/13963</link>
      <title>PR: Fix referenceassemblygeneration for .exe files - @KevinRansom</title>
      <description>&lt;p&gt;Ref assembly generation is turned on by default by the sdk in dotnet 7.0 rc2 and later.  This causes an issue when building .exe files with the --test output enabled.
For example our build displays this output when building on a machine :
&lt;img src="https://user-images.githubusercontent.com/5175830/191821810-b9b895c9-7d7e-4fa7-a6a2-852a228231f0.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;The fix is to emit to the reference assembly the entrypoint.  This is benign because it will have the correct visibility markings.&lt;/p&gt;
&lt;p&gt;In reference assemblies the generated main method looks similar to:
&lt;img src="https://user-images.githubusercontent.com/5175830/191823721-e016ae5e-4ace-4768-9c6d-0aeaa9105b3e.png" alt="image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[x] Need to add a test.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 18:28:49 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13962</guid>
      <link>https://github.com/dotnet/fsharp/pull/13962</link>
      <title>PR: Add docs section about labeling issues - @abonie</title>
      <description>&lt;p&gt;Opted for INTERNAL.md for this content. Added PowerShell one liner to get all &lt;code&gt;Area-*&lt;/code&gt; labels in a copy-paste-able format&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 16:33:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13958</guid>
      <link>https://github.com/dotnet/fsharp/pull/13958</link>
      <title>PR: Use synthetic ranges when rewriting range expressions - @auduchinok</title>
      <description>&lt;p&gt;Fixes &lt;code&gt;op_Range&lt;/code&gt; symbol in FCS has non synthetic range that covers the whole &lt;code&gt;for&lt;/code&gt; expression. In other similar cases the produced ranges are synthetic.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;let _ = seq {
    for _ = 0 to 5 do yield! []
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 14:57:15 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13956</guid>
      <link>https://github.com/dotnet/fsharp/pull/13956</link>
      <title>PR: Implement mouseover tooltips for keywords - @T-Gro</title>
      <description>&lt;p&gt;This PR implements mouseover tooltips for keywords in Visual Studio.
This already works in FsAutoComplete (Ionide) and this new VS implementation uses the same data source, provided by Compiler Services.&lt;/p&gt;
&lt;p&gt;Here is a visual example.
&lt;img src="https://user-images.githubusercontent.com/46543583/191750304-77941e5b-6bbd-4f4a-a269-b1cfaa9f2368.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;REMARK:&lt;/strong&gt;
In order to test, I had to rebase this branch on top of recent &amp;quot;packages-update&amp;quot; of all Roslyn and Visual Studio packages.
Without it, &amp;quot;build.cmd -testVS&amp;quot; was failing in latest Int Preview version of visual studio.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 12:48:25 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13950</guid>
      <link>https://github.com/dotnet/fsharp/pull/13950</link>
      <title>PR: Fix 13533 - remove limitation regarding try/finally and try/with before construction - @dsyme</title>
      <description>&lt;p&gt;Removes limitation https://github.com/dotnet/fsharp/issues/13533&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[ ] decide if this needs a language version switch. I guess so&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 14:56:13 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13946</guid>
      <link>https://github.com/dotnet/fsharp/pull/13946</link>
      <title>PR: Fix 13944 - @dsyme</title>
      <description>&lt;p&gt;Fixes https://github.com/dotnet/fsharp/issues/13944, regressed in https://github.com/dotnet/fsharp/pull/13531&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 13:36:24 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13943</guid>
      <link>https://github.com/dotnet/fsharp/pull/13943</link>
      <title>PR: Fix #13906 + update packages - @vzarytovskii</title>
      <description>&lt;p&gt;Updates roslyn and VS packages, prerequisite for the go-to definition fixes.
Updates newtonsoft.json, and xunit, to fix compliance issues.
Fixes #13906&lt;/p&gt;
</description>
      <pubDate>Tue, 20 Sep 2022 17:10:28 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13942</guid>
      <link>https://github.com/dotnet/fsharp/pull/13942</link>
      <title>PR: bump - @KevinRansom</title>
      <description />
      <pubDate>Tue, 20 Sep 2022 15:40:53 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13938</guid>
      <link>https://github.com/dotnet/fsharp/pull/13938</link>
      <title>PR: Not null value returned from trait call test - @edgarfgp</title>
      <description>&lt;p&gt;Closes https://github.com/dotnet/fsharp/issues/12386
This seems to have been fixed at some point in F# 6 . So this Test we can ensure that there is not a regression :)&lt;/p&gt;
</description>
      <pubDate>Tue, 20 Sep 2022 05:04:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13936</guid>
      <link>https://github.com/dotnet/fsharp/pull/13936</link>
      <title>PR: bump - @KevinRansom</title>
      <description />
      <pubDate>Mon, 19 Sep 2022 23:41:12 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13935</guid>
      <link>https://github.com/dotnet/fsharp/pull/13935</link>
      <title>PR: Disable e2e tests for the combo provider - @vzarytovskii</title>
      <description>&lt;p&gt;Disabling tests since they are broken in rc1 and are blocking our signed builds.&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 23:10:16 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13934</guid>
      <link>https://github.com/dotnet/fsharp/pull/13934</link>
      <title>PR: Fix things - @KevinRansom</title>
      <description>&lt;p&gt;Cleanup a couple of unnecessary lines in fsharp.build.fsproj and ensure that during sourcebuilds proto build step, only fsharp.core netstandard2.0 is built.&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 22:27:59 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13931</guid>
      <link>https://github.com/dotnet/fsharp/pull/13931</link>
      <title>PR: Enable binlog in source-build bootstrap run. - @crummel</title>
      <description>&lt;p&gt;Allow for easier debugging when the bootstrap build fails in source-build.&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 20:57:20 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13930</guid>
      <link>https://github.com/dotnet/fsharp/pull/13930</link>
      <title>PR: Fix e2e tests for the combo provider - @vzarytovskii</title>
      <description />
      <pubDate>Mon, 19 Sep 2022 15:06:38 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13924</guid>
      <link>https://github.com/dotnet/fsharp/pull/13924</link>
      <title>PR: `Cherry-Pick` Fix 13805 (#13815) - @vzarytovskii</title>
      <description />
      <pubDate>Mon, 19 Sep 2022 11:00:41 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13920</guid>
      <link>https://github.com/dotnet/fsharp/pull/13920</link>
      <title>PR: Disable implicit FSharp.Core and System.ValueTuple when using Central Package Management - @rstm-sf</title>
      <description>&lt;p&gt;https://devblogs.microsoft.com/nuget/introducing-central-package-management/&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DisableImplicitLibraryPacksFolder = true&lt;/code&gt; because it is necessary to &lt;a href="https://learn.microsoft.com/en-us/nuget/consume-packages/package-source-mapping"&gt;map source packages&lt;/a&gt; when using Central Package Management&lt;/p&gt;
</description>
      <pubDate>Sun, 18 Sep 2022 09:00:46 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13915</guid>
      <link>https://github.com/dotnet/fsharp/pull/13915</link>
      <title>PR: Update FSharp.Core to use array instead of [] - @edgarfgp</title>
      <description>&lt;p&gt;Now that https://github.com/dotnet/fsharp/pull/13700 merged. As part of this PR we will update FSharp.Core&lt;/p&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 05:40:43 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13914</guid>
      <link>https://github.com/dotnet/fsharp/pull/13914</link>
      <title>PR: Don't allow union case unnamed fields in &lt;param&gt; xmldoc - @DedSec256</title>
      <description>&lt;p&gt;Don't allow union case unnamed fields in &lt;code&gt;&amp;lt;param&amp;gt;&lt;/code&gt; xmldoc&lt;/p&gt;
&lt;p&gt;Fix for https://github.com/dotnet/fsharp/issues/13861&lt;/p&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 00:04:17 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13912</guid>
      <link>https://github.com/dotnet/fsharp/pull/13912</link>
      <title>PR: Shadowcopyduringdebug - @KevinRansom</title>
      <description>&lt;p&gt;When debugging fsi from VS with shadowcopyfiles enabled, the vfsi window displays:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/5175830/190484386-99381bbf-d28b-4d7c-ac5f-a46db272f95c.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;This happens because loading a partial-signed shadowcopied assembly in an appdomain is verbotten.  Which happens when shadowcopyfiles is specified on the command line.&lt;/p&gt;
&lt;p&gt;This PR, when it encounters the FileLoadException, retries without using an AppDomain.&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 19:18:11 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13907</guid>
      <link>https://github.com/dotnet/fsharp/pull/13907</link>
      <title>PR: [WIP] Allow _.Property shorthand for accessor functions - @tboby</title>
      <description>&lt;p&gt;Just experimenting with _.foo.bar - &amp;gt; fun x - &amp;gt; x.foo.bar&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Edit by @vzarytovskii: link to suggestion - https://github.com/fsharp/fslang-suggestions/issues/506&lt;/p&gt;
&lt;/blockquote&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 10:22:30 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13904</guid>
      <link>https://github.com/dotnet/fsharp/pull/13904</link>
      <title>PR: Allow vsfsi to display output as partial lines. - @KevinRansom</title>
      <description>&lt;p&gt;VSFSI as released renders fsi output one line at a time.  Which is an interesting choice ...&lt;/p&gt;
&lt;p&gt;This small change allows vsfsi to produce output as it comes rather than by chunk.&lt;/p&gt;
&lt;p&gt;Current behavior:
&lt;img src="https://user-images.githubusercontent.com/5175830/190306904-52982dda-6695-4e46-a0d1-884d8914c876.gif" alt="current" /&gt;&lt;/p&gt;
&lt;p&gt;After this PR:
&lt;img src="https://user-images.githubusercontent.com/5175830/190306936-b77a87f5-f03a-473f-b3d9-1732af48ed90.gif" alt="Updated" /&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 03:26:50 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13900</guid>
      <link>https://github.com/dotnet/fsharp/pull/13900</link>
      <title>PR: Improve error message for Restriction to use named fields for a struct multi case DU - @edgarfgp</title>
      <description>&lt;p&gt;While looking at https://github.com/dotnet/fsharp/issues/3648 . I wanted to understand why there is this limitation.&lt;/p&gt;
&lt;p&gt;So this PR is to understand what are the ramification of this change and also for my own education :)&lt;/p&gt;
&lt;p&gt;This limitation is specified in the RFC https://github.com/fsharp/fslang-design/blob/main/FSharp-4.1/FS-1014-struct-discriminated-unions.md&lt;/p&gt;
&lt;p&gt;But is does not explain why :( .&lt;/p&gt;
</description>
      <pubDate>Wed, 14 Sep 2022 18:07:08 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13899</guid>
      <link>https://github.com/dotnet/fsharp/pull/13899</link>
      <title>PR: `Cherry-pick for 6.x.x servicing` Custom equality on ModuleOrNamespaceKind (#13693) - @vzarytovskii</title>
      <description>&lt;p&gt;Fix for https://github.com/dotnet/fsharp/issues/13661&lt;/p&gt;
</description>
      <pubDate>Wed, 14 Sep 2022 16:49:46 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13896</guid>
      <link>https://github.com/dotnet/fsharp/pull/13896</link>
      <title>PR: Use MSBuild's logging facilities instead of writing to console. - @teo-tsirpanis</title>
      <description>&lt;p&gt;The repository's MSBuild tasks log messages directly to the console, which is more verbose than needed, cannot be made less verbose, and does not play well with MSBuild's logging facilities.&lt;/p&gt;
&lt;p&gt;This PR changes the tasks to use the Lawful Good™ way of logging events. Also instead of implementing the &lt;code&gt;Microsoft.Build.Framework.ITask&lt;/code&gt; interface, they now inherit the &lt;code&gt;Microsoft.Build.Utilities.Task&lt;/code&gt; class, which is easier to use.&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 21:47:54 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13894</guid>
      <link>https://github.com/dotnet/fsharp/pull/13894</link>
      <title>PR: Internal error in CheckExpressions.fs - @edgarfgp</title>
      <description>&lt;p&gt;Fixes https://github.com/dotnet/fsharp/issues/11577&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 17:37:40 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13893</guid>
      <link>https://github.com/dotnet/fsharp/pull/13893</link>
      <title>PR: Print attributes after and keyword - @nojaf</title>
      <description>&lt;p&gt;Fixes #13809&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 14:43:19 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13892</guid>
      <link>https://github.com/dotnet/fsharp/pull/13892</link>
      <title>PR: Check expressions: safer init properties check - @auduchinok</title>
      <description>&lt;p&gt;Fixes #13857.&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 13:04:07 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13891</guid>
      <link>https://github.com/dotnet/fsharp/pull/13891</link>
      <title>PR: Print properties of attribute in signatures. - @nojaf</title>
      <description>&lt;p&gt;Fixes #13759&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 12:38:39 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13890</guid>
      <link>https://github.com/dotnet/fsharp/pull/13890</link>
      <title>PR: Print attributes of nested modules in signatures. - @nojaf</title>
      <description>&lt;p&gt;Fixes #13758.&lt;/p&gt;
&lt;p&gt;I'm not quite happy that&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;[&amp;lt;CompilationRepresentation(CompilationRepresentationFlags.ModuleSuffix)&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;was printed as&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;[&amp;lt;CompilationRepresentation (enum&amp;lt;CompilationRepresentationFlags&amp;gt; (4))&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;but that is the behaviour today, I would perhaps revisit that in another PR.&lt;/p&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 11:32:40 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13888</guid>
      <link>https://github.com/dotnet/fsharp/pull/13888</link>
      <title>PR: WIP: Initial - enable vs-dotnet fsi ctrl+Break - @KevinRansom</title>
      <description>&lt;ul&gt;
&lt;li&gt;[x] Eliminate FSharp.Compiler.Server.Shared dll&lt;/li&gt;
&lt;li&gt;[ ] Wire-up interrupt message to fsi&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 18:47:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13885</guid>
      <link>https://github.com/dotnet/fsharp/pull/13885</link>
      <title>PR: Fix SynTypeDefnKind for type augmenations in signatures [WIP] - @DedSec256</title>
      <description>&lt;p&gt;Currently, SynTypeDefnSigRepr for type augmentations in signature files
&lt;a href="https://fsprojects.github.io/fantomas-tools/#/ast?data=N4KABGBEAmCmBmBLAdrAzpAXFSAacUiaAYmolmAC4BOArrPhJAMYD2cFkAOtV8sgEMAtugAOA5rDABlViIBywsRNg8%2Ba5JQCeoqQEEwAd0SUAFhogQRQgEaxqYALLZayE2AC0APjCuTkEABfIA"&gt;is &lt;code&gt;SynTypeDefnSigRepr.Simple(SynTypeDefnSimpleRepr.None)&lt;/code&gt;&lt;/a&gt;, which looks incorrect.&lt;/p&gt;
&lt;p&gt;This PR fixes SynTypeDefnSigRepr for type augmentations in signatures.&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 15:59:12 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13883</guid>
      <link>https://github.com/dotnet/fsharp/pull/13883</link>
      <title>PR: Only process EmptyModuleOrNamespaces when showHeader is true. - @nojaf</title>
      <description>&lt;p&gt;Fixes #13869&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/2621499/189681987-c8065cec-feee-468a-abee-728b8a8fd926.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;FSI passes &lt;code&gt;false&lt;/code&gt; for &lt;code&gt;showHeader&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;https://github.com/dotnet/fsharp/blob/9a29bed37d0e8f28b85417b531ffc4b1ab7e851e/src/Compiler/Interactive/fsi.fs#L1608&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 14:43:25 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13881</guid>
      <link>https://github.com/dotnet/fsharp/pull/13881</link>
      <title>PR: Re-enable macOS CI legs on macos-11 - @vzarytovskii</title>
      <description />
      <pubDate>Mon, 12 Sep 2022 13:32:54 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13879</guid>
      <link>https://github.com/dotnet/fsharp/pull/13879</link>
      <title>PR: Introduce SynType.SignatureParameter. - @nojaf</title>
      <description>&lt;p&gt;A less impactful version of #13855.
In this PR I'm only adding the signature parameter representation, not touching anything related to &lt;code&gt;SynArgInfo&lt;/code&gt;.&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 12:25:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13874</guid>
      <link>https://github.com/dotnet/fsharp/pull/13874</link>
      <title>PR: Mention the `DotnetFscCompilerPath` property - @tboby</title>
      <description>&lt;p&gt;The very useful &lt;code&gt;DotnetFscCompilerPath&lt;/code&gt; property doesn't seem to be documented anywhere. I'm not sure if there's an authoritative location for .fsproj properties, but it might be useful to mention this property in the DEVGUIDE.&lt;/p&gt;
</description>
      <pubDate>Sun, 11 Sep 2022 14:11:50 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13873</guid>
      <link>https://github.com/dotnet/fsharp/pull/13873</link>
      <title>PR: WIP: More parser tweaks, to restore compatibility - @KevinRansom</title>
      <description>&lt;p&gt;More parser tweaks, to restore compatibility&lt;/p&gt;
</description>
      <pubDate>Sun, 11 Sep 2022 08:23:03 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/pull/13870</guid>
      <link>https://github.com/dotnet/fsharp/pull/13870</link>
      <title>PR: Fix #13197 - @dsyme</title>
      <description>&lt;p&gt;Fixes regression https://github.com/dotnet/fsharp/issues/13197 related to multiemit (actually, it's related to the use of the ILWrite binary writer rather then Reflection.Emit).&lt;/p&gt;
&lt;p&gt;The problem here is that when &lt;code&gt;/usesdkrefs-&lt;/code&gt; is used, the &amp;quot;actual&amp;quot; primary assembly of the compilation is System.Private.CoreLib - i.e. that's where System.Object is defined.   However the &amp;quot;target&amp;quot; primary assembly we use remains System.Runtime - that is that's what we code generate for.&lt;/p&gt;
&lt;p&gt;To emit correct code we need to detect that &lt;code&gt;System.Private.CoreLib&lt;/code&gt; is an equivalent primary assembly reference.&lt;/p&gt;
</description>
      <pubDate>Fri, 09 Sep 2022 16:06:16 Z</pubDate>
    </item>
  </channel>
</rss>