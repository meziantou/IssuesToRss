<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dotnet/orleans Pull Requests</title>
    <description>Pull Requests from https://github.com/dotnet/orleans, generated by https://github.com/meziantou/IssuesToRss/</description>
    <managingEditor>meziantousite@outlook.com</managingEditor>
    <ttl>60</ttl>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7988</guid>
      <link>https://github.com/dotnet/orleans/pull/7988</link>
      <title>PR: Remove TLS 1.1 from defaults, since it's deprecated - @ReubenBond</title>
      <description>&lt;p&gt;Default to TLS 1.3 and 1.2 only&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7988"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 17:26:43 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7987</guid>
      <link>https://github.com/dotnet/orleans/pull/7987</link>
      <title>PR: Fix compilation on C# 11 (`scoped` refs) &amp; migrate to .NET 7.0 - @ReubenBond</title>
      <description>&lt;p&gt;C# 11 introduces the &lt;code&gt;scoped&lt;/code&gt; keyword which can be used in conjunction with &lt;code&gt;ref&lt;/code&gt; in a method signature to specify that a reference does not escape the method.&lt;/p&gt;
&lt;p&gt;I updated the GitHub Actions yamls to allow us to use prerelease versions of the .NET SDK and updated global.json to include the latest .NET 7.0 RC. We would likely want to revert the CI change after release.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7987"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 17:23:54 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7986</guid>
      <link>https://github.com/dotnet/orleans/pull/7986</link>
      <title>PR: [WIP]: Make it possible to tune the deactivation of grains in relation to memory usage and other stats - @COCPORN</title>
      <description>&lt;p&gt;WIP!&lt;/p&gt;
&lt;p&gt;This implements what is suggested in #7985. It should have no impact on existing systems.&lt;/p&gt;
&lt;p&gt;It supports multiple guards using the normal &lt;code&gt;IEnumerable&lt;/code&gt; DI-injection system and none are injected by default.&lt;/p&gt;
&lt;p&gt;If the guards do not prevent collection, it reverts to just doing the normal collection routine for expired grains.&lt;/p&gt;
&lt;p&gt;This PR implements the ability to tune suppression of collecting grains based on GC-reported memory, system-wide memory and percentage of memory left on the system.&lt;/p&gt;
&lt;p&gt;Not expecting this to be approved as-is, but please give me some feedback on it and I will implement it.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7986"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Sat, 17 Sep 2022 13:29:25 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7984</guid>
      <link>https://github.com/dotnet/orleans/pull/7984</link>
      <title>PR: Add large struct array serialization benchmark - @ReubenBond</title>
      <description>&lt;p&gt;This tweet thread about a new, high-perf serializer from neuecc sparked my interest, so here's a new benchmark which we can target. Taken from https://twitter.com/neuecc/status/1570504706392485888?s=20&amp;amp;t=wD3SC3p2QoEC3Ac6AOpv3Q&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7984"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 19:40:26 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7983</guid>
      <link>https://github.com/dotnet/orleans/pull/7983</link>
      <title>PR: In PubSub: replace extension with GrainId - @benjaminpetit</title>
      <description>&lt;p&gt;This is the first commit to enable a truly pluggable pubsub system.&lt;/p&gt;
&lt;p&gt;The current &lt;code&gt;IStreamPubSub&lt;/code&gt; interface uses grain streaming extensions directly, which isn't very efficient. In this PR I replaced them with &lt;code&gt;GrainId&lt;/code&gt; for more simplicity.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;IStreamPubSub&lt;/code&gt; interface is also now public.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7983"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 11:40:05 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7976</guid>
      <link>https://github.com/dotnet/orleans/pull/7976</link>
      <title>PR: Move grain components into `ActivationDataExtra` to reduce overhead - @ReubenBond</title>
      <description>&lt;p&gt;This moves one more data member (the grain component dictionary, used by grain extensions) into &lt;code&gt;ActivationDataExtra&lt;/code&gt;, which is allocated on-first-use.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7976"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 23:51:52 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7975</guid>
      <link>https://github.com/dotnet/orleans/pull/7975</link>
      <title>PR: Fix `StatelessWorkerGrainContext.GetComponent` implementation. - @ReubenBond</title>
      <description>&lt;p&gt;Currently, the implementation simply throws. It should at least return components which are defined.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7975"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 13 Sep 2022 23:47:15 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7971</guid>
      <link>https://github.com/dotnet/orleans/pull/7971</link>
      <title>PR: Rename InternalStreamId to QualifiedStreamId and make it public - @benjaminpetit</title>
      <description>&lt;p&gt;Right now, &lt;code&gt;InternalStreamId&lt;/code&gt; is internal only. Making it public will help pluggability.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;QualifiedStreamId&lt;/code&gt; is also a better name for this struct.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7971"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Fri, 09 Sep 2022 12:49:06 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7969</guid>
      <link>https://github.com/dotnet/orleans/pull/7969</link>
      <title>PR: Change the activation strategy for StatelessWorkers from round-robin to on-demand - @COCPORN</title>
      <description>&lt;p&gt;This implements changing the activation strategy for StatelessWorker in accordance with: https://github.com/dotnet/orleans/issues/7966&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7969"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Sun, 04 Sep 2022 18:40:44 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7965</guid>
      <link>https://github.com/dotnet/orleans/pull/7965</link>
      <title>PR: Target netstandard2.0 for Orleans.Serialization.Abstractions - @jsteinich</title>
      <description>&lt;p&gt;Enables adding &lt;code&gt;Orleans.Serialization&lt;/code&gt; attributes to projects targeting &lt;code&gt;netstandard2.1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Some notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;~~Going to &lt;code&gt;netstandard2.0&lt;/code&gt; results in XML comment errors due to the reference to &lt;code&gt;ValueTask&lt;/code&gt;. Seems a bit silly to add a conditional package reference just for a comment. Perhaps ignoring the error would make sense.~~&lt;/li&gt;
&lt;li&gt;Could avoid the multi-targeting, but didn't want to remove a target.&lt;/li&gt;
&lt;li&gt;The distinction between standard and multi target naming feels a bit arbitrary at this point, but I tried to match historical usage.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7965"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Fri, 02 Sep 2022 21:06:21 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7963</guid>
      <link>https://github.com/dotnet/orleans/pull/7963</link>
      <title>PR: Fix serializer classes not being generated for types in methods external to grain implementations. - @niblak</title>
      <description>&lt;p&gt;Fixes #7962.&lt;/p&gt;
&lt;p&gt;I also did some minor refactoring in &lt;code&gt;CodeGenerator.Tests&lt;/code&gt; to add some coverage on &lt;code&gt;CodeGenerator.GenerateCode&lt;/code&gt;. Looks like this wasn't covered previously, unless I missed a better location to add this test.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7963"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Fri, 02 Sep 2022 02:15:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7960</guid>
      <link>https://github.com/dotnet/orleans/pull/7960</link>
      <title>PR: Optimize serializer generated code - @pentp</title>
      <description>&lt;ul&gt;
&lt;li&gt;Use specialized field getters for struct fields that pass instances by reference.&lt;/li&gt;
&lt;li&gt;Change generated dynamic method signatures to avoid argument shuffling delegate thunks.&lt;/li&gt;
&lt;li&gt;Don't generate unused property setters for settable properties.&lt;/li&gt;
&lt;li&gt;Don't generate copier fields for shallow-copyable types.&lt;/li&gt;
&lt;li&gt;In struct copiers set only fields that need deep-copying and use the input parameter directly for everything else.&lt;/li&gt;
&lt;li&gt;Replace generic methods on &lt;code&gt;IInvokable&lt;/code&gt; with untyped methods.&lt;/li&gt;
&lt;li&gt;Remove unused properties from &lt;code&gt;IInvokable&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Replace generated properties with methods to reduce metadata size.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7960"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 31 Aug 2022 13:47:57 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7959</guid>
      <link>https://github.com/dotnet/orleans/pull/7959</link>
      <title>PR: Added TryRegisterReminder  - @j0nimost</title>
      <description>&lt;p&gt;This PR add this missing feature: #7956&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7959"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 31 Aug 2022 12:24:49 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7958</guid>
      <link>https://github.com/dotnet/orleans/pull/7958</link>
      <title>PR: Improved support for implicit field ids and immutable properties - @mnmr</title>
      <description>&lt;p&gt;The option to enable implicit field ids can now be configured both at project and type level, and has been changed to an enum that better communicates what constitutes implicit fields. Note that the GenerateFieldIds enum has been linked from the Abstractions project into the CodeGenerator project, to avoid adding a project dependency.&lt;/p&gt;
&lt;p&gt;I've introduced an OrleansConstructorAttribute (inheriting from ActivatorUtilitiesConstructorAttribute) and confirmed that this is still picked up by ActivatorUtilities. The code only sets the &amp;quot;supportPrimaryConstructorParameters&amp;quot; when exactly one constructor is annotated.&lt;/p&gt;
&lt;p&gt;Properties mapping to a constructor parameter are now flagged as such (previously this was only done for fields), as this allows the code to not reject properties without an accessible setter. This improves support for immutable classes.&lt;/p&gt;
&lt;p&gt;I also found a couple of spelling mistakes and corrected those along the way. There are no unit test regressions.&lt;/p&gt;
&lt;p&gt;This fixes #7937, and provides a workaround for #7936.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7958"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 31 Aug 2022 12:07:10 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7955</guid>
      <link>https://github.com/dotnet/orleans/pull/7955</link>
      <title>PR: Make serializable types immutable - @pentp</title>
      <description>&lt;p&gt;Make serializable types immutable where appropriate.
Also marked a lot of serializable classes as sealed for better serializer codegen.
Moved &lt;code&gt;GenerateSerializer&lt;/code&gt; and &lt;code&gt;Immutable&lt;/code&gt; to a single line for a better overview of serializable classes when searching by attribute.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7955"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 30 Aug 2022 18:04:38 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7954</guid>
      <link>https://github.com/dotnet/orleans/pull/7954</link>
      <title>PR: Remove obsolete net48 &amp; netcoreapp3.1 code - @pentp</title>
      <description>&lt;p&gt;Removed unused old code and cleaned up a few related code paths.&lt;/p&gt;
&lt;p&gt;I didn't touch anything under Orleans.Serialization - there are lots of old ifdefs, but there's still some plan to support netstandard2.0 for Orleans.Serialization?&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7954"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 30 Aug 2022 10:48:48 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7951</guid>
      <link>https://github.com/dotnet/orleans/pull/7951</link>
      <title>PR: Don't use MethodImplOptions.NoInlining on throw-helpers - @pentp</title>
      <description>&lt;p&gt;If an inline candidate method never returns (by always throwing an exception), then RyuJIT will move the call-site to cold code region and will not inline it. Marking throw-helpers with &lt;code&gt;NoInlining&lt;/code&gt; prevents RyuJIT from analyzing such methods, so it's actually counterproductive.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://sharplab.io/#v2:EYLgxg9gTgpgtADwGwBYA0AXEBDAzgWwB8ABAJgEYBYAKGIAYACY8gOgCUBXAOwwEt8YLAMIR8AB14AbGFADKMgG68wMXAG4aNYgGYmpBrMnZgAWRj5oATwAKECJIYBvGg1cMxUXguwYYDSFy4GAy8PAwA+sCSEGAA1rK8AF5+ALwMKHQAnEga1G7unt6+/hCBwaHBAIJclgnJDGlw5LkubjoMEMAAVjBgwWwwPAAUFQy4SakM1bUTAJStrs55+W68AGYMQ+P1AHwRUTHxcwsr+QAqABZQEADulVAA5hwCPADyHBiva2zYXA8wAFEECoxHxSuEAEIcNZrGQDACOHFUGDOdgAMthHjAhpFonE6jBZi1lqdvFAGAc4g0GGiYHhsUSTvliAB2Cl42K5fIAX00JKYuk6PT6DAGPHCADkIABJLiSUKhB4jMLbSbTAnzflLU6udabVUMPa4w4apk6y7XO6PZ6DT4fL4/P6A4EwUG8cFQmFwmCI5GoiAYrGSmVyhV/HGUo7JRnUM2uMnsw7U2n0oYxnVMNmRrluXn8k4AbTMGAuEAAJtLxJIhsXSxWq683aVcCwpbL5VxFbMALonDxeHx+IW9YIp3AMhp7EuWhhcDiSSTEvuFQdMchIJgoBgW273J4vO2fb6/f5AkFgriQ6GwqAIpFBf2B/7K4L4bAIU1auMMae3WcwG4pmtA93iPR1TxdJsuCGAAiVUYLQBgABIYKEX4uAgYJsAXGJVwsWAfwuX4nDfD8Jm5ClLF8XAQi4BhsDGRVpApa8ZBg9Ncz5fIixgEty0rMRq1rfiGygls21DTs/h7ZcB2KZgN2ILcdytfdbVAh0T2dc93UvT0bzvP10Uxf5g3bMMlVGUjP3ybUdV/QCuAAoC1Lee1jydM9XQvWD4MQlC0K4DCsJwsA8OgPwS2IxxrPIyjqNo+jGL+ZjgFYqB2JzVw825IA="&gt;Codegen sample&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7951"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Sun, 28 Aug 2022 21:18:22 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7950</guid>
      <link>https://github.com/dotnet/orleans/pull/7950</link>
      <title>PR: Avoid passing Spans by reference - @pentp</title>
      <description>&lt;p&gt;Passing &lt;code&gt;[ReadOnly]Span&amp;lt;T&amp;gt;&lt;/code&gt; by reference limits RyuJIT's ability to optimize its use and has very limited benefits.
More importantly, it will require breaking changes for the public API when moving to C# 11 to use &lt;code&gt;scoped&lt;/code&gt; - better to make the API change now.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7950"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Fri, 26 Aug 2022 10:58:50 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7949</guid>
      <link>https://github.com/dotnet/orleans/pull/7949</link>
      <title>PR: Use XxHash32/XxHash64 - @pentp</title>
      <description>&lt;p&gt;Follow up for #7864 to use the built-in hash algorithms. Preview version of .NET 7 package is used because it contains important fixes that affect hash stability.&lt;/p&gt;
&lt;p&gt;XxHash32 is generally faster (except for very small inputs) and has better hash quality.&lt;/p&gt;
&lt;p&gt;|     Method | Length |       Mean |     Error |    StdDev | Ratio |
|----------- |------- |-----------:|----------:|----------:|------:|
|  &lt;strong&gt;JenkinsV2&lt;/strong&gt; |      &lt;strong&gt;3&lt;/strong&gt; |   &lt;strong&gt;4.560 ns&lt;/strong&gt; | &lt;strong&gt;0.0337 ns&lt;/strong&gt; | &lt;strong&gt;0.0299 ns&lt;/strong&gt; |  &lt;strong&gt;1.00&lt;/strong&gt; |
| XxHash32   |      3 |   6.613 ns | 0.0135 ns | 0.0126 ns |  1.45 |
|            |        |            |           |           |       |
|  &lt;strong&gt;JenkinsV2&lt;/strong&gt; |     &lt;strong&gt;24&lt;/strong&gt; |  &lt;strong&gt;13.207 ns&lt;/strong&gt; | &lt;strong&gt;0.0796 ns&lt;/strong&gt; | &lt;strong&gt;0.0665 ns&lt;/strong&gt; |  &lt;strong&gt;1.00&lt;/strong&gt; |
| XxHash32   |     24 |  10.469 ns | 0.0117 ns | 0.0103 ns |  0.79 |
|            |        |            |           |           |       |
|  &lt;strong&gt;JenkinsV2&lt;/strong&gt; |    &lt;strong&gt;100&lt;/strong&gt; |  &lt;strong&gt;42.900 ns&lt;/strong&gt; | &lt;strong&gt;0.3277 ns&lt;/strong&gt; | &lt;strong&gt;0.3065 ns&lt;/strong&gt; |  &lt;strong&gt;1.00&lt;/strong&gt; |
| XxHash32   |    100 |  23.988 ns | 0.0182 ns | 0.0161 ns |  0.56 |
|            |        |            |           |           |       |
|  &lt;strong&gt;JenkinsV2&lt;/strong&gt; |   &lt;strong&gt;1024&lt;/strong&gt; | &lt;strong&gt;414.698 ns&lt;/strong&gt; | &lt;strong&gt;0.7853 ns&lt;/strong&gt; | &lt;strong&gt;0.6557 ns&lt;/strong&gt; |  &lt;strong&gt;1.00&lt;/strong&gt; |
| XxHash32   |   1024 | 201.932 ns | 0.1818 ns | 0.1518 ns |  0.49 |&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7949"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Fri, 26 Aug 2022 09:56:41 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7948</guid>
      <link>https://github.com/dotnet/orleans/pull/7948</link>
      <title>PR: Fix FieldOffset for PackedHeaders - @ReubenBond</title>
      <description>&lt;p&gt;null&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7948"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Fri, 26 Aug 2022 01:58:06 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7947</guid>
      <link>https://github.com/dotnet/orleans/pull/7947</link>
      <title>PR: Enable codegen on Orleans.Streaming.SQS - @benjaminpetit</title>
      <description>&lt;p&gt;Fix #7941&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7947"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Thu, 25 Aug 2022 18:57:49 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7946</guid>
      <link>https://github.com/dotnet/orleans/pull/7946</link>
      <title>PR: Use explicit C# LangVersion - @pentp</title>
      <description>&lt;p&gt;With the latest VS preview, there are build breaks otherwise because it will try to use C# 11.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7946"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Thu, 25 Aug 2022 15:40:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7945</guid>
      <link>https://github.com/dotnet/orleans/pull/7945</link>
      <title>PR: make the queue receive operation more resilient to the transient error - @rmt2021</title>
      <description>&lt;p&gt;Fix #7738&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7945"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 24 Aug 2022 05:54:17 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7943</guid>
      <link>https://github.com/dotnet/orleans/pull/7943</link>
      <title>PR: Use compound type aliases for generated classes - @ReubenBond</title>
      <description>&lt;p&gt;Currently, generated classes are identified by name directly. This works for most cases, but it is not version-tolerant.
For example, given the following interface definition:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;public interface IGrainWithGenericMethods : IMyInvokableBaseType 
{
    Task&amp;lt;T&amp;gt; RoundTrip&amp;lt;T&amp;gt;(T val);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The serializer will generate an &lt;em&gt;invokable&lt;/em&gt; named &lt;code&gt;OrleansCodeGen.Orleans.Serialization.UnitTests.Invokable_IGrainWithGenericMethods_GrainReference_1_1&amp;lt;&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;IGrainWithGenericMethods&lt;/code&gt; interface was to change name, then this class would change name, but there is no way to associate an alias on the former with the latter today. Similarly, if another method was added to the class, or the method name was changed, that could result in the method no longer having the same identifier, breaking version tolerance.&lt;/p&gt;
&lt;p&gt;This PR introduces the concept of compound type aliases into the serializer type system in order to handle these cases.
An attribute is placed on the generated class, such as:
&lt;code&gt;[CompoundTypeAliasAttribute(&amp;quot;inv&amp;quot;, typeof(GrainReference), typeof(IGrainWithGenericMethods), &amp;quot;1&amp;quot;)]&lt;/code&gt;. This can be interpreted as &amp;quot;The invoker for the proxy base type &lt;code&gt;GrainReference&lt;/code&gt; for the interface &lt;code&gt;IGrainWtihGenericMethod&lt;/code&gt; and method id 1&amp;quot;.&lt;/p&gt;
&lt;p&gt;These compound type aliases are added to the assembly metadata in the form of a tree which can be queried at runtime to resolve aliases back to the original type.&lt;/p&gt;
&lt;p&gt;When the type is serialized, the attribute is found and the name is encoded as a tuple, &lt;code&gt;(&amp;quot;inv&amp;quot;, GrainReference, IGrainWithGenericMethods, &amp;quot;1&amp;quot;)&lt;/code&gt;, with generic type parameters appended as per usual. During encoding, the types in that expression are replaced with their aliases (eg, &lt;code&gt;WellKnownAlias&lt;/code&gt;, if one is set). During decoding, the aliases for the individual component types are replaced with their original types and the expression is compared to metadata to resolve the original type.&lt;/p&gt;
&lt;p&gt;This allows individual components to have type aliases and allows the type to survive refactoring.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7943"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 23 Aug 2022 23:13:23 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7942</guid>
      <link>https://github.com/dotnet/orleans/pull/7942</link>
      <title>PR: Fix AzureQueueAdapterFactory.Create constructor arguments - @ReubenBond</title>
      <description>&lt;p&gt;There is an extra argument being passed, resulting in test failures.
Caused by #7887&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7942"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 23 Aug 2022 22:47:15 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7934</guid>
      <link>https://github.com/dotnet/orleans/pull/7934</link>
      <title>PR: Fix net7.0 compilation - @EgorBo</title>
      <description>&lt;p&gt;Fixes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;StateStorageBridge.cs(49,58): error CS0121: The call is ambiguous between the following methods or 
properties:'ArgumentNullException.ThrowIfNull(object?, string?)' and
'ArgumentNullException.ThrowIfNull(void*, string?)'
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;when I update orleans to net7.0 locally. It happens because of new overload added in net7.0 - https://github.com/dotnet/runtime/pull/61633&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7934"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Fri, 19 Aug 2022 08:32:50 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7930</guid>
      <link>https://github.com/dotnet/orleans/pull/7930</link>
      <title>PR: Add build-time analyzer for unsupported grain interface method return types - @ReubenBond</title>
      <description>&lt;p&gt;Fixes #7907 by adding an analyzer to fail the build on unsupported grain interface method types.
Note that this is based on #7926, which therefore comes first.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7930"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 17 Aug 2022 01:32:50 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7929</guid>
      <link>https://github.com/dotnet/orleans/pull/7929</link>
      <title>PR: [3.x] implement cleanup defunct silo entries ado net clustering - @ElanHasson</title>
      <description>&lt;p&gt;Resolves #7171  for 3.x.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7929"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 17 Aug 2022 01:04:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7928</guid>
      <link>https://github.com/dotnet/orleans/pull/7928</link>
      <title>PR: [4.0] Implement cleanup defunct silo entries ado net clustering - @ElanHasson</title>
      <description>&lt;p&gt;Resolves #7171.&lt;/p&gt;
&lt;p&gt;Separate PR for 3.x. is #7929.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7928"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 17 Aug 2022 00:41:44 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7927</guid>
      <link>https://github.com/dotnet/orleans/pull/7927</link>
      <title>PR: [3.x] Implement CleanupDefunctSiloEntries for ADO.Net Clustering Provider. - @ElanHasson</title>
      <description>&lt;p&gt;This resolves #7171.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7927"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 17 Aug 2022 00:25:25 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7926</guid>
      <link>https://github.com/dotnet/orleans/pull/7926</link>
      <title>PR: Add diagnostic for non-settable properties - @ReubenBond</title>
      <description>&lt;p&gt;Fixes #7924
Note that this includes #7925, so that must go in first&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7926"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 16 Aug 2022 21:35:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7925</guid>
      <link>https://github.com/dotnet/orleans/pull/7925</link>
      <title>PR: Support serialization of record types in hierarchies with empty layers - @ReubenBond</title>
      <description>&lt;p&gt;Fixes #7921&lt;/p&gt;
&lt;p&gt;cc @koenbeuk&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7925"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 16 Aug 2022 21:32:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7919</guid>
      <link>https://github.com/dotnet/orleans/pull/7919</link>
      <title>PR: Fix Source Link and packaging - @ReubenBond</title>
      <description>&lt;p&gt;Fixes #7916
Tested in CI: produces packages with the correct SourceLink references&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7919"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Thu, 11 Aug 2022 23:30:25 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7918</guid>
      <link>https://github.com/dotnet/orleans/pull/7918</link>
      <title>PR: [3.x] Fix `NullReferenceException` when too many instances of a `[StatelessWorker]` are created and `Debug` logging is enabled - @ReubenBond</title>
      <description>&lt;p&gt;We've seen one or two reports of this biting people. This appears to be the root issue.&lt;/p&gt;
&lt;p&gt;Fixes #7918&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7918"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Thu, 11 Aug 2022 21:00:53 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7917</guid>
      <link>https://github.com/dotnet/orleans/pull/7917</link>
      <title>PR: Fix SQL syntax error - @AndrewP-GH</title>
      <description>&lt;p&gt;Error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'DELIMITER $$

CREATE PROCEDURE InsertMembershipKey(
    in    _DeploymentId NVAR' at line 1
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7917"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Thu, 11 Aug 2022 18:23:39 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7914</guid>
      <link>https://github.com/dotnet/orleans/pull/7914</link>
      <title>PR: Add azure pipeline yaml file for 3.x to build and test PR - @benjaminpetit</title>
      <description>&lt;p&gt;null&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7914"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Thu, 11 Aug 2022 11:39:12 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7912</guid>
      <link>https://github.com/dotnet/orleans/pull/7912</link>
      <title>PR: Rename `Microsoft.Orleans.OrleansRuntime` package to `Microsoft.Orleans.Runtime` - @ReubenBond</title>
      <description>&lt;p&gt;null&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7912"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 10 Aug 2022 16:58:44 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7911</guid>
      <link>https://github.com/dotnet/orleans/pull/7911</link>
      <title>PR: Remove grain directory hand-off entirely - @ReubenBond</title>
      <description>&lt;p&gt;Forward-port of #7909&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7911"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 10 Aug 2022 16:55:37 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7910</guid>
      <link>https://github.com/dotnet/orleans/pull/7910</link>
      <title>PR: Remove stream producer when cleaning pubsub cache - @benjaminpetit</title>
      <description>&lt;p&gt;Fix #7793&lt;/p&gt;
&lt;p&gt;In PersistentStreamPullingAgent:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Removed the logic to remove from the pubsub cache when no consumers are registered: if a stream is active but has no subscribers, it will avoid multiple useless calls to the pubsub.&lt;/li&gt;
&lt;li&gt;Remove the pulling agent as a producer when cleaning the pubsub cache. It will fix #7793 and should avoid useless calls from the pubsub to the pulling agent, since calls to add/remove consumers from the pubsub are ignore by the pulling agent if the stream was not in the cache.&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7910"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 10 Aug 2022 16:03:45 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7909</guid>
      <link>https://github.com/dotnet/orleans/pull/7909</link>
      <title>PR: Remove Directory handoff on silo shutdown - @benjaminpetit</title>
      <description>&lt;p&gt;The grain directory handoff on silo shutdown was useless since Orleans will deactivate all the grains that were in the directory partition of the stopped silo.&lt;/p&gt;
&lt;p&gt;The handoff manager also tried to keep a copy of the partition of its successor, but the logic wasn't really useful and might introduce more invalid directory entries, so I removed it too.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7909"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Wed, 10 Aug 2022 15:16:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7906</guid>
      <link>https://github.com/dotnet/orleans/pull/7906</link>
      <title>PR: Migrate some samples to WebApplicationBuilder - @MeladKamari</title>
      <description>&lt;p&gt;@ReubenBond  I removed Startup.cs and moved to Program.cs
, line count not changed&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7906"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 09 Aug 2022 19:51:19 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7905</guid>
      <link>https://github.com/dotnet/orleans/pull/7905</link>
      <title>PR: Fix: GrainDirectoryPartition should allow overwriting an invalid entry - @benjaminpetit</title>
      <description>&lt;p&gt;Backport of #7903 for 3.x&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7905"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 09 Aug 2022 18:00:53 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7903</guid>
      <link>https://github.com/dotnet/orleans/pull/7903</link>
      <title>PR: Fix: GrainDirectoryPartition should allow overwriting an invalid entry - @benjaminpetit</title>
      <description>&lt;p&gt;Fix for #7902, and add some tests.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GrainDirectoryPartition&lt;/code&gt; should allow overwriting an invalid entry.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7903"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 09 Aug 2022 13:49:19 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7901</guid>
      <link>https://github.com/dotnet/orleans/pull/7901</link>
      <title>PR: Fix typo in MessageFactory - @MeladKamari</title>
      <description>&lt;p&gt;fix typo in MessageFactory&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7901"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Tue, 09 Aug 2022 06:29:22 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7890</guid>
      <link>https://github.com/dotnet/orleans/pull/7890</link>
      <title>PR: Trim the correct queue on Chirper account state - @andreaskromann</title>
      <description>&lt;p&gt;Noticed a copy/paste error in the Chirper sample when I was reviewing the code.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7890"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Sun, 31 Jul 2022 07:22:46 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7889</guid>
      <link>https://github.com/dotnet/orleans/pull/7889</link>
      <title>PR: Remove PlatformAbstractions on .NET 6 - @seniorquico</title>
      <description>&lt;p&gt;The new Microsoft.Orleans.Serialization NuGet package pulls in the Microsoft.DotNet.PlatformAbstractions NuGet package when targeting .NET 6. However, it looks to be unused. The only reference I can find is on &lt;a href="https://github.com/dotnet/orleans/blob/339bf24cd6d7946e99b946567d0655916a62b6d5/src/Orleans.Serialization/Hosting/ReferencedAssemblyHelper.cs#L133-L153"&gt;line 142 of &lt;code&gt;ReferencedAssemblyHelper.cs&lt;/code&gt;&lt;/a&gt;, but this is conditionally compiled based on a .NET 5 or greater check.&lt;/p&gt;
&lt;p&gt;The proposed change removes the Microsoft.DotNet.PlatformAbstractions dependency when targeting .NET 6.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7889"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Sun, 31 Jul 2022 03:47:13 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7887</guid>
      <link>https://github.com/dotnet/orleans/pull/7887</link>
      <title>PR: Change QueueId to a struct - @pentp</title>
      <description>&lt;p&gt;null&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7887"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Fri, 29 Jul 2022 13:40:35 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7886</guid>
      <link>https://github.com/dotnet/orleans/pull/7886</link>
      <title>PR: Optimize SiloAddress creation - @pentp</title>
      <description>&lt;p&gt;This removes unnecessary &lt;code&gt;IPEndPoint&lt;/code&gt; allocations when creating &lt;code&gt;SiloAddress&lt;/code&gt; instances.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7886"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Fri, 29 Jul 2022 09:56:28 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/orleans/pull/7885</guid>
      <link>https://github.com/dotnet/orleans/pull/7885</link>
      <title>PR: Remove GrainReference from IReminderTable contract - @pentp</title>
      <description>&lt;p&gt;Grain reminder storage should depend only on grain identity. &lt;code&gt;GrainReference&lt;/code&gt; is too broad type for this and complicates &lt;code&gt;IReminderTable&lt;/code&gt; provider writing.&lt;/p&gt;
&lt;p&gt;This depends on #7870, so only the last commit is actually meant as part of this PR.&lt;/p&gt;
&lt;h6&gt;Microsoft Reviewers: &lt;a href="https://portal.fabricbot.ms/api/codeflow?pullrequest=https://github.com/dotnet/orleans/pull/7885"&gt;Open in CodeFlow&lt;/a&gt;&lt;/h6&gt;
</description>
      <pubDate>Fri, 29 Jul 2022 02:09:12 Z</pubDate>
    </item>
  </channel>
</rss>