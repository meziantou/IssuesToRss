<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dotnet/runtime Pull Requests</title>
    <description>Pull Requests from https://github.com/dotnet/runtime, generated by https://github.com/meziantou/IssuesToRss/</description>
    <managingEditor>meziantousite@outlook.com</managingEditor>
    <ttl>60</ttl>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76081</guid>
      <link>https://github.com/dotnet/runtime/pull/76081</link>
      <title>PR: ci test - @EgorBo</title>
      <description />
      <pubDate>Fri, 23 Sep 2022 16:32:04 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76078</guid>
      <link>https://github.com/dotnet/runtime/pull/76078</link>
      <title>PR: Move TargetsLinuxBionic property, which depends on OutputRid - @directhex</title>
      <description>&lt;p&gt;Fixes build failures in official build. Tested locally&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 15:21:30 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76076</guid>
      <link>https://github.com/dotnet/runtime/pull/76076</link>
      <title>PR: Unroll SpanHelpers.Reverse() for Vector128 - @SwapnilGaikwad</title>
      <description />
      <pubDate>Fri, 23 Sep 2022 14:49:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76075</guid>
      <link>https://github.com/dotnet/runtime/pull/76075</link>
      <title>PR: [release/6.0] [wasm][debugger] Fix debugging an app that has another .NET Wasm instance in a service worker - @thaystg</title>
      <description>&lt;p&gt;Backport of #76072 to release/6.0&lt;/p&gt;
&lt;p&gt;/cc @thaystg&lt;/p&gt;
&lt;h2&gt;Customer Impact&lt;/h2&gt;
&lt;p&gt;It was crashing the debugger when an app has another .NET Wasm instance in a service worker&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Manually tested&lt;/p&gt;
&lt;h2&gt;Risk&lt;/h2&gt;
&lt;p&gt;Low Risk, only ignoring a session id that is not known.&lt;/p&gt;
&lt;p&gt;IMPORTANT: Is this backport for a servicing release? If so and this change touches code that ships in a NuGet package, please make certain that you have added any necessary &lt;a href="https://github.com/dotnet/runtime/blob/main/docs/project/library-servicing.md"&gt;package authoring&lt;/a&gt; and gotten it explicitly reviewed.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 14:47:41 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76074</guid>
      <link>https://github.com/dotnet/runtime/pull/76074</link>
      <title>PR: Disable CheckProjects test on llvmaot. - @naricc</title>
      <description>&lt;p&gt;This test is still failing on llvmaot (I enabled it think it worked). It needs to be disabled.&lt;/p&gt;
&lt;p&gt;Fixes: https://github.com/dotnet/runtime/issues/76070#event-7447977381&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 14:39:23 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76073</guid>
      <link>https://github.com/dotnet/runtime/pull/76073</link>
      <title>PR: [release/7.0] [wasm][debugger] Fix debugging an app that has another .NET Wasm instance in a service worker - @github-actions[bot]</title>
      <description>&lt;p&gt;Backport of #76072 to release/7.0&lt;/p&gt;
&lt;p&gt;/cc @thaystg&lt;/p&gt;
&lt;h2&gt;Customer Impact&lt;/h2&gt;
&lt;p&gt;Customer reported issue.  It was crashing the debugger when an app has another .NET Wasm instance in a service worker&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Manually tested&lt;/p&gt;
&lt;h2&gt;Risk&lt;/h2&gt;
&lt;p&gt;Low Risk, only ignoring a session id that is not known.&lt;/p&gt;
&lt;p&gt;IMPORTANT: Is this backport for a servicing release? If so and this change touches code that ships in a NuGet package, please make certain that you have added any necessary &lt;a href="https://github.com/dotnet/runtime/blob/main/docs/project/library-servicing.md"&gt;package authoring&lt;/a&gt; and gotten it explicitly reviewed.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 14:34:40 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76072</guid>
      <link>https://github.com/dotnet/runtime/pull/76072</link>
      <title>PR: [wasm][debugger] Fix debugging an app that has another .NET Wasm instance in a service worker - @thaystg</title>
      <description>&lt;p&gt;Fixes https://github.com/dotnet/runtime/issues/76026&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 14:29:10 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76071</guid>
      <link>https://github.com/dotnet/runtime/pull/76071</link>
      <title>PR: [NativeAOT/iOS] Fix System.Private.Xml tests - @filipnavara</title>
      <description>&lt;p&gt;Guard tests appropriately with &lt;code&gt;PlatformDetection.IsReflectionEmitSupported&lt;/code&gt; condition.&lt;/p&gt;
&lt;p&gt;Fixes https://github.com/dotnet/runtime/issues/75699
Based on #75730 with additional fix for non-English locales.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 13:54:38 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76068</guid>
      <link>https://github.com/dotnet/runtime/pull/76068</link>
      <title>PR: Use generated runtime.json when building shared framework packages. - @tmds</title>
      <description>&lt;p&gt;Fixes https://github.com/dotnet/runtime/issues/53550
Based on https://github.com/dotnet/runtime/pull/69455&lt;/p&gt;
&lt;p&gt;With this change, when I build:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;./build.sh /p:DotnetBuildFromSource=true /p:AdditionalRuntimeIdentifiers=fedora.45-x64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The new rid shows up in the packages:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;artifacts/obj/Microsoft.NETCore.App.Bundle/Debug/net7.0/linux-x64/output/shared/Microsoft.NETCore.App/8.0.0-dev/Microsoft.NETCore.App.deps.json:    &amp;quot;fedora.45-x64&amp;quot;: [
artifacts/obj/Microsoft.NETCore.App.Composite.Bundle/Debug/net7.0/linux-x64/output/shared/Microsoft.NETCore.App/8.0.0-dev/Microsoft.NETCore.App.deps.json:    &amp;quot;fedora.45-x64&amp;quot;: [
artifacts/obj/Microsoft.NETCore.App.Runtime.Composite/Debug/net7.0/linux-x64/Microsoft.NETCore.App.deps.json:    &amp;quot;fedora.45-x64&amp;quot;: [
artifacts/obj/Microsoft.NETCore.App.Runtime.Composite/Debug/net7.0/linux-x64/output/shared/Microsoft.NETCore.App/8.0.0-dev/Microsoft.NETCore.App.deps.json:    &amp;quot;fedora.45-x64&amp;quot;: [
artifacts/obj/Microsoft.NETCore.App.Runtime/Debug/net7.0/linux-x64/Microsoft.NETCore.App.deps.json:    &amp;quot;fedora.45-x64&amp;quot;: [
artifacts/obj/Microsoft.NETCore.App.Runtime/Debug/net7.0/linux-x64/output/shared/Microsoft.NETCore.App/8.0.0-dev/Microsoft.NETCore.App.deps.json:    &amp;quot;fedora.45-x64&amp;quot;: [
artifacts/bin/Microsoft.NETCore.Platforms/Debug/runtime.json:    &amp;quot;fedora.45-x64&amp;quot;: {
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;@ericstj @ViktorHofer ptal.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 13:34:59 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76065</guid>
      <link>https://github.com/dotnet/runtime/pull/76065</link>
      <title>PR: [wasm][debugger] Support indexing by non-numbers - @ilonatommy</title>
      <description>&lt;p&gt;Partially solves the problem mentioned in https://github.com/dotnet/runtime/issues/67029#issuecomment-1246081658.
The problem is a bit complex so it got divided into a number of smaller PRs.
Changes in this PR (best way would be to read by commits):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;we no longer call &lt;code&gt;ToArray()&lt;/code&gt; on an object to get the indexed value. The reason: not all the objects have this method implemented. E.g. when we manually define indexing on an object scheme there's no &lt;code&gt;ToArray()&lt;/code&gt;. However, a good equivalent is &lt;code&gt;get_Item&lt;/code&gt; because both, objects that have indexing overloaded and Generic Lists have it.&lt;/li&gt;
&lt;li&gt;1d indexing by literal/variables of &lt;code&gt;char&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;bool&lt;/code&gt; type is supported now.&lt;/li&gt;
&lt;li&gt;Fixing cast errors in &lt;code&gt;MonoSDBHelper.cs&lt;/code&gt;. It might have been done somewhere else but during development of this PR I was initially using &lt;code&gt;WriteConst&lt;/code&gt; and it's broken for &lt;code&gt;char&lt;/code&gt; and &lt;code&gt;bool&lt;/code&gt;. There are no actual use cases of the fix I've done because after all the code got refactored and &lt;code&gt;WriteConstant&lt;/code&gt; is not used after all but we can include this one here.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ToDo in the future:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We can try to use &lt;code&gt;get_Item&lt;/code&gt; for &lt;code&gt;string&lt;/code&gt; scheme and maybe even &lt;code&gt;array&lt;/code&gt; scheme to unify the logic. There's no Issue for this because it's a refactoring only, just a comment in the code.&lt;/li&gt;
&lt;li&gt;Indexing with float/double/object, is not supported. These will be probably 2 different problems to be solved separately. Indexing with objects is delegated here: https://github.com/dotnet/runtime/issues/76014. Floats and doubles might be solved when the following point gets solved.&lt;/li&gt;
&lt;li&gt;Optimization of code for overridden methods. When our &lt;code&gt;rootObject&lt;/code&gt; that we're indexing has more than 1 method of &lt;code&gt;get_Item&lt;/code&gt; name, we have a problem. All of these methods come to us with the same info: name only (unless they have default parameters but it's a corner case). We have no means of telling which one the user tries to call till we actually ask the runtime to  execute it and get an exception / successful result. If we added some more info in the Proxy communication so that we could tell which &lt;code&gt;methodId&lt;/code&gt; is the right one without trying out all it would get optimised. It's not urgent though, I saved it only in a form of comment for later.&lt;/li&gt;
&lt;li&gt;There's a bug in Generic objects indexing with &lt;code&gt;string&lt;/code&gt;. With &lt;code&gt;bool&lt;/code&gt; and &lt;code&gt;int&lt;/code&gt; it works. Issue here: https://github.com/dotnet/runtime/issues/76013&lt;/li&gt;
&lt;li&gt;Once we have indexing with non-numbers we can make indexing with non-numeric expressions as well: https://github.com/dotnet/runtime/issues/76015&lt;/li&gt;
&lt;li&gt;And we should start supporting multidimensional indexing in objects, including non-numeric indexes: https://github.com/dotnet/runtime/issues/76062&lt;/li&gt;
&lt;/ol&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 12:28:27 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76061</guid>
      <link>https://github.com/dotnet/runtime/pull/76061</link>
      <title>PR: JIT: Use gtCloneExpr in fgMorphModToSubMulDiv for potentially complex trees - @jakobbotsch</title>
      <description>&lt;p&gt;We may get here for any invariant dividend/divisor but these can be
'complex' address-of trees that gtClone does not handle.&lt;/p&gt;
&lt;p&gt;Fix #76051&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 09:57:48 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76059</guid>
      <link>https://github.com/dotnet/runtime/pull/76059</link>
      <title>PR: ZipArchive.CreateEntry: include file type in default ExternalAttributes. - @tmds</title>
      <description>&lt;p&gt;For Unix-type zip files, ExternalAttributes value matches 'struct stat' st_mode.
Besides permissions it should also include the file type.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 07:59:15 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76057</guid>
      <link>https://github.com/dotnet/runtime/pull/76057</link>
      <title>PR: CI: trigger library tests builds, when building runtime tests - @radical</title>
      <description>&lt;p&gt;.. as they depend on it.&lt;/p&gt;
&lt;p&gt;This fixes mono runtime tests not getting triggered because library tests job didn't build.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 06:32:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76056</guid>
      <link>https://github.com/dotnet/runtime/pull/76056</link>
      <title>PR: [release/7.0] Enable EventSource support in crossgen2 - @github-actions[bot]</title>
      <description>&lt;p&gt;Backport of #76053 to release/7.0&lt;/p&gt;
&lt;p&gt;/cc @MichalStrehovsky&lt;/p&gt;
&lt;h2&gt;Customer Impact&lt;/h2&gt;
&lt;p&gt;#76052 is disabling EventSource support for NativeAOT executables by default. But our perf lab testing relies on EventSource tracing to track crossgen2 perf characteristics. Not generating ETW events might have consequences for perf signoffs.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;CI tests.&lt;/p&gt;
&lt;h2&gt;Risk&lt;/h2&gt;
&lt;p&gt;Next to zero - this is just restoring configuration to how it was before #76052.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 04:55:14 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76055</guid>
      <link>https://github.com/dotnet/runtime/pull/76055</link>
      <title>PR: Increase code coverage for System.Reflection.Context - @JosieBigler</title>
      <description>&lt;p&gt;In regards to issue #26506&lt;/p&gt;
&lt;p&gt;This should push code coverage to 45-50%.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 02:24:46 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76053</guid>
      <link>https://github.com/dotnet/runtime/pull/76053</link>
      <title>PR: Enable EventSource support in crossgen2 - @MichalStrehovsky</title>
      <description>&lt;p&gt;This was disabled by default in #76000. I started filling out the backport template when it hit me that we want to keep it here.&lt;/p&gt;
&lt;p&gt;We'll want to backport these in tandem.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 02:16:22 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76052</guid>
      <link>https://github.com/dotnet/runtime/pull/76052</link>
      <title>PR: [release/7.0] Disable EventSource support in NativeAOT by default - @github-actions[bot]</title>
      <description>&lt;p&gt;Backport of #76000 to release/7.0&lt;/p&gt;
&lt;p&gt;/cc @MichalStrehovsky&lt;/p&gt;
&lt;h2&gt;Customer Impact&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;DiagnosticSource&lt;/code&gt; is currently not AOT compatible. If a machine-wide DiagnosticSource-related event listener is enabled (such as PerfView, or possibly even a managed VS debugging session) it activates &lt;code&gt;DiagnosticSource&lt;/code&gt; code paths within the executable and basically injects a runtime failure into NativeAOT processes due to the AOT-incompatibility of the code.&lt;/p&gt;
&lt;p&gt;E.g. trying to do a &lt;code&gt;HttpClient&lt;/code&gt; web request with PerfView collecting in the background causes a runtime exception to be thrown.&lt;/p&gt;
&lt;p&gt;This uses the documented switch to disable &lt;code&gt;EventSource&lt;/code&gt; support (unless the user specified a different value). Indirectly, it disables &lt;code&gt;DiagnosticSource&lt;/code&gt; as well.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;All NativeAOT testing.&lt;/p&gt;
&lt;h2&gt;Risk&lt;/h2&gt;
&lt;p&gt;This is a supported switch that we're just changing the default value for. The risk is low.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 02:11:14 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76050</guid>
      <link>https://github.com/dotnet/runtime/pull/76050</link>
      <title>PR: [release/7.0] [NativeAOT] Ensure that frozen objects respect the minimum object size - @github-actions[bot]</title>
      <description>&lt;p&gt;Backport of #76031 to release/7.0&lt;/p&gt;
&lt;p&gt;/cc @jkotas @filipnavara&lt;/p&gt;
&lt;h2&gt;Customer Impact&lt;/h2&gt;
&lt;p&gt;Intermittent crash during GC in native AOT apps&lt;/p&gt;
&lt;p&gt;The crash is triggered by a specific virtual address space layout (one GC segment mapped before native binary and second GC segment mapped after the native compiled binary).&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Default native aot CI run&lt;/p&gt;
&lt;h2&gt;Risk&lt;/h2&gt;
&lt;p&gt;Low, the change is specific to native aot compiler.&lt;/p&gt;
&lt;p&gt;IMPORTANT: Is this backport for a servicing release? If so and this change touches code that ships in a NuGet package, please make certain that you have added any necessary &lt;a href="https://github.com/dotnet/runtime/blob/main/docs/project/library-servicing.md"&gt;package authoring&lt;/a&gt; and gotten it explicitly reviewed.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 01:20:07 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76048</guid>
      <link>https://github.com/dotnet/runtime/pull/76048</link>
      <title>PR: Fix impIntrinsic to not raise asserts for the AltJit scenario - @tannergooding</title>
      <description>&lt;p&gt;This is a follow up to https://github.com/dotnet/runtime/pull/75912 and changes the logic slightly so that the AltJit path is slightly more efficient and so it doesn't cause asserts from matching incorrect overloads of APIs like &lt;code&gt;Math.Min&lt;/code&gt;.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 00:33:30 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76046</guid>
      <link>https://github.com/dotnet/runtime/pull/76046</link>
      <title>PR: Ensure gc collects memory for CriticalFinalizer test - @HJLeee</title>
      <description>&lt;p&gt;Test assumes &lt;code&gt;GC.Collect()&lt;/code&gt; successfully collects allocated &lt;code&gt;Normal&lt;/code&gt; and &lt;code&gt;Critical&lt;/code&gt; objects.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Finalized 0 Normal and 0 Critical objects.
The first Critical object was finalized after 0 Normal objects.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;https://helixre107v0xdeko0k025g8.blob.core.windows.net/dotnet-runtime-refs-pull-76007-merge-ac12cc893b1f4aa0bc/baseservices.finalization/1/console.34afcb43.log?helixlogtype=result&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 23:11:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76043</guid>
      <link>https://github.com/dotnet/runtime/pull/76043</link>
      <title>PR: Improve List&lt;T&gt;.AddRange performance for enumerables - @stephentoub</title>
      <description>&lt;p&gt;AddRange is currently implemented as delegating to InsertRange, and InsertRange in turn has a more complicated inner loop as part of adding each item from a source enumerable into the list.  By just copying InsertRange's source into AddRange, deleting all the irrelevant stuff, and changing the Insert call to Add, throughput improves measurably.&lt;/p&gt;
&lt;p&gt;|              Method |         Toolchain | Count |        Mean | Ratio |
|-------------------- |------------------ |------ |------------:|------:|
| AddRange_Enumerable | \main\corerun.exe |     2 |    30.77 ns |  1.00 |
| AddRange_Enumerable |   \pr\corerun.exe |     2 |    26.35 ns |  0.85 |
|                     |                   |       |             |       |
| AddRange_Enumerable | \main\corerun.exe |   256 | 1,584.66 ns |  1.00 |
| AddRange_Enumerable |   \pr\corerun.exe |   256 | 1,069.29 ns |  0.69 |
|                     |                   |       |             |       |
| AddRange_Enumerable | \main\corerun.exe |  1024 | 6,223.58 ns |  1.00 |
| AddRange_Enumerable |   \pr\corerun.exe |  1024 | 4,175.18 ns |  0.67 |&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;private List&amp;lt;int&amp;gt; _list = new List&amp;lt;int&amp;gt;();
private IEnumerable&amp;lt;int&amp;gt; _sourceEnumerable;

[Params(2, 256, 1024)]
public int Count { get; set; }

[GlobalSetup]
public void Setup()
{
    _sourceEnumerable = Enumerable.Range(0, Count);
}

[Benchmark]
public void AddRange_Enumerable()
{
    _list.Clear();
    _list.AddRange(_sourceEnumerable);
}
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 22:01:30 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76042</guid>
      <link>https://github.com/dotnet/runtime/pull/76042</link>
      <title>PR: Optimized StreamPipeReaderInternal InternalTokenSource getter - @Sossenbinder</title>
      <description>&lt;p&gt;As of now, when InternalTokenSource is accessed within the StreamPipeReader, it will acquire a lock for every access.&lt;/p&gt;
&lt;p&gt;However, there is no real point in locking prematurely if the singleton InternalTokenSource is already initialized, since at that point there is a fast path available which does not take the performance hit.&lt;/p&gt;
&lt;p&gt;This also solves the // PERF remark regarding caching&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 21:58:59 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76040</guid>
      <link>https://github.com/dotnet/runtime/pull/76040</link>
      <title>PR: JIT: fix issue with unreachable blocks in redundant branch opt - @AndyAyersMS</title>
      <description>&lt;p&gt;Update &lt;code&gt;fgGetDomSpeculatively&lt;/code&gt; to return nullptr if the idom of a block is unreachable, even if other preds have refs.&lt;/p&gt;
&lt;p&gt;Fixes #72767.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 21:12:25 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76038</guid>
      <link>https://github.com/dotnet/runtime/pull/76038</link>
      <title>PR: Set `AppHostSigningException.ExitCode` - @elinor-fung</title>
      <description>&lt;p&gt;Set the &lt;code&gt;ExitCode&lt;/code&gt; on &lt;code&gt;AppHostSigningException&lt;/code&gt; to the value passed to its constructor. We were never setting it, so it was always 0, resulting in errors strangely saying that we failed with an exit code of 0.&lt;/p&gt;
&lt;p&gt;Noticed this from https://github.com/dotnet/sdk/issues/22201. This change doesn't actually get us any more information for that case, but at least makes the error message accurate.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 20:33:26 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76036</guid>
      <link>https://github.com/dotnet/runtime/pull/76036</link>
      <title>PR: [workloads] Work around main still targeting net7.0 - @lewing</title>
      <description>&lt;p&gt;Until we can target net8 properly use the local runtime build for net7 in addition to net8&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 19:58:10 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76035</guid>
      <link>https://github.com/dotnet/runtime/pull/76035</link>
      <title>PR: [release/6.0] Remove locks from COM events delegate management. - @github-actions[bot]</title>
      <description>&lt;p&gt;Backport of #75863 to release/6.0&lt;/p&gt;
&lt;p&gt;/cc @AaronRobinsonMSFT, @stephentoub&lt;/p&gt;
&lt;h2&gt;Customer Impact&lt;/h2&gt;
&lt;p&gt;This is a customer reported issue - https://github.com/dotnet/runtime/pull/75863, both internal and external to Microsoft. I represents a regression form .NET Framework. It was introduced in .NET Core 3.1, but as more people start to move onto .NET 5+ this will hit more. It is limited to COM Events so narrow in customer base, but those that use it will find it difficult to adopt as there is no workaround.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Validated this using a customer reproduction example. No new test was added due to the complexity of scenario and the narrowness of impact. The implementation was reduced in complexity substantially and is now more in line with best-practice concurrency related solutions in .NET Core.&lt;/p&gt;
&lt;h2&gt;Risk&lt;/h2&gt;
&lt;p&gt;This is a minor risk. Invoke locks were removed and immutability of a collection introduced. The reduction of complexity represented in the functional change makes this lower risk but the scenario is limited to COM Events which are even rarer so supporting a minor risk designation.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 19:31:56 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76034</guid>
      <link>https://github.com/dotnet/runtime/pull/76034</link>
      <title>PR: [release/7.0] Remove locks from COM events delegate management. - @github-actions[bot]</title>
      <description>&lt;p&gt;Backport of #75863 to release/7.0&lt;/p&gt;
&lt;p&gt;/cc @AaronRobinsonMSFT, @stephentoub&lt;/p&gt;
&lt;h2&gt;Customer Impact&lt;/h2&gt;
&lt;p&gt;This is a customer reported issue - https://github.com/dotnet/runtime/pull/75863, both internal and external to Microsoft. I represents a regression form .NET Framework. It was introduced in .NET Core 3.1, but as more people start to move onto .NET 5+ this will hit more. It is limited to COM Events so narrow in customer base, but those that use it will find it difficult to adopt as there is no workaround.&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Validated this using a customer reproduction example. No new test was added due to the complexity of scenario and the narrowness of impact. The implementation was reduced in complexity substantially and is now more in line with best-practice concurrency related solutions in .NET Core.&lt;/p&gt;
&lt;h2&gt;Risk&lt;/h2&gt;
&lt;p&gt;This is a minor risk. Invoke locks were removed and immutability of a collection introduced. The reduction of complexity represented in the functional change makes this lower risk but the scenario is limited to COM Events which are even rarer so supporting a minor risk designation.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 19:30:55 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76033</guid>
      <link>https://github.com/dotnet/runtime/pull/76033</link>
      <title>PR: [mono][aot] Prefer specific instances instead of gshared for methods … - @vargaz</title>
      <description>&lt;p&gt;…containing static virtual calls.&lt;/p&gt;
&lt;p&gt;These calls cannot be resolved at compile time in gshared methods, so they cannot be inlined etc. They are used in perf sensitive BCL code like SpanHelpers. To fix this, modify the AOT compiler so in addition to the gshared versions, it emits specific instances of these methods if possible. This only affects a small subset of gshared methods so it doesn't lead to a noticable code size increase.&lt;/p&gt;
&lt;p&gt;Fixes https://github.com/dotnet/runtime/issues/75801.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 19:25:57 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76031</guid>
      <link>https://github.com/dotnet/runtime/pull/76031</link>
      <title>PR: [NativeAOT] Ensure that frozen objects respect the minimum object size - @filipnavara</title>
      <description>&lt;p&gt;Ref: https://github.com/dotnet/runtime/pull/75421#issuecomment-1255237528&lt;/p&gt;
&lt;p&gt;When System.Memory.Tests was compiled with NativeAOT it produced incorrect data in the frozen heap section for some empty objects:&lt;/p&gt;
&lt;p&gt;First object:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(lldb) image lookup -va 0x10b1c5058
      Address: System.Memory.Tests[0x0000000100d7c058] (System.Memory.Tests.__DATA.__data + 268888)
      Summary: __FrozenObj_xunit_assert_Xunit_Sdk_AssertEqualityComparer_1___c&amp;lt;S_P_CoreLib_System_ReadOnlyMemory_1&amp;lt;Int32&amp;gt;&amp;gt;1
       Module: file = &amp;quot;/Users/teamcity/runtime/runtime/artifacts/bin/System.Memory.Tests/Release/net7.0/native/System.Memory.Tests&amp;quot;, arch = &amp;quot;x86_64&amp;quot;
       Symbol: id = {0x00061771}, range = [0x000000010b1c5058-0x000000010b1c5068), mangled=&amp;quot;__FrozenObj_xunit_assert_Xunit_Sdk_AssertEqualityComparer_1___c&amp;lt;S_P_CoreLib_System_ReadOnlyMemory_1&amp;lt;Int32&amp;gt;&amp;gt;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next object:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      Address: System.Memory.Tests[0x0000000100d7c068] (System.Memory.Tests.__DATA.__data + 268904)
      Summary: __FrozenObj_S_P_CoreLib_System_Array_1_ArrayEnumerator&amp;lt;S_P_CoreLib_System_Nullable_1&amp;lt;Int32&amp;gt;&amp;gt;3
       Module: file = &amp;quot;/Users/teamcity/runtime/runtime/artifacts/bin/System.Memory.Tests/Release/net7.0/native/System.Memory.Tests&amp;quot;, arch = &amp;quot;x86_64&amp;quot;
       Symbol: id = {0x00061772}, range = [0x000000010b1c5068-0x000000010b1c5088), mangled=&amp;quot;__FrozenObj_S_P_CoreLib_System_Array_1_ArrayEnumerator&amp;lt;S_P_CoreLib_System_Nullable_1&amp;lt;Int32&amp;gt;&amp;gt;3&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The dumped vtable of the first object:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(lldb) x/8 0x10b3f3798
0x10b3f3798: 0x52000000 0x00000018 0x0b2b94f8 0x00000001
0x10b3f37a8: 0x00000003 0x63cb6bdc 0x0a6746e0 0x00000001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Second word is the size (&lt;code&gt;0x00000018&lt;/code&gt;) but the difference between the address of the two objects in the data is only 0x10. This fixes the IL Compiler to properly align empty objects and prevents a GC crash as runtime.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 18:00:24 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76030</guid>
      <link>https://github.com/dotnet/runtime/pull/76030</link>
      <title>PR: Removing short name column from compphases.h - @BrianBohe</title>
      <description>&lt;p&gt;As is discussed in &lt;a href="https://github.com/dotnet/runtime/issues/74768"&gt;issue 74768&lt;/a&gt;, we are removing &amp;quot;short name&amp;quot; column from JIT phases described in &lt;em&gt;compphases.h&lt;/em&gt;, using instead the &amp;quot;Enum Name&amp;quot; column without the prefix &amp;quot;PHASE_&amp;quot;.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 17:35:45 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76024</guid>
      <link>https://github.com/dotnet/runtime/pull/76024</link>
      <title>PR: Add back missing conv opcodes when compiling via System.Linq.Expressions - @BrzVlad</title>
      <description>&lt;p&gt;The conversion opcodes are still necessary when the sign of the value might change, in which case the conversion opcode will do a sign/zero extend to the full i32 storage used by the IL execution stack.&lt;/p&gt;
&lt;p&gt;For example, before this change, conversions from ushort to short were ignored. Consider expressions converting the value &lt;code&gt;ushort.MaxValue&lt;/code&gt; to short (testcase ConvertUShortToShortTest). &lt;code&gt;ushort.MaxValue&lt;/code&gt; will be pushed to execution stack as a i32 ldc of value 0xffff. The conv.i2 opcode would change the value on the stack to 0xffffffff so it shouldn't be omitted.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 16:00:15 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76023</guid>
      <link>https://github.com/dotnet/runtime/pull/76023</link>
      <title>PR: [wasi] prevent mono on wasi from crashing on GC - @pavelsavara</title>
      <description>&lt;p&gt;This just prevents the runtime from crashing on GC.
It's not real fix of the underlying issue, that the &lt;code&gt;stack_end&lt;/code&gt; has wrong value.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 15:57:13 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76022</guid>
      <link>https://github.com/dotnet/runtime/pull/76022</link>
      <title>PR: [MONO][TEST] Update issues.targets for CheckProjects tests - @naricc</title>
      <description>&lt;p&gt;Update the reasons for CheckProjects  tests being excluded in wasm, android. Also renable the test on aot-llvm since it is apparently fixed there, according to: https://github.com/dotnet/runtime/issues/52977&lt;/p&gt;
&lt;p&gt;fixes: https://github.com/dotnet/runtime/issues/41520&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 15:51:59 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76021</guid>
      <link>https://github.com/dotnet/runtime/pull/76021</link>
      <title>PR: Update owner/mentionees for System.Transactions - @roji</title>
      <description />
      <pubDate>Thu, 22 Sep 2022 15:32:04 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76017</guid>
      <link>https://github.com/dotnet/runtime/pull/76017</link>
      <title>PR: JIT: Smarter ordering of late args based on register uses - @jakobbotsch</title>
      <description />
      <pubDate>Thu, 22 Sep 2022 14:04:15 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76011</guid>
      <link>https://github.com/dotnet/runtime/pull/76011</link>
      <title>PR: SPMI: Add and utilize number of contexts with diffs  - @jakobbotsch</title>
      <description>&lt;p&gt;Previously, if there was any diff in a collection, that collection would be shown in all tables (i.e. Overall, FullOpts, MinOpts). The main reason was that we only had &amp;quot;has diffs&amp;quot; information on a per-collection basis, not for each of the categories. This changes SPMI to communicate back for each category how many contexts had diffs in them, and uses this to hide tables/rows without any diffs, and to show this information under details.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 11:36:16 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76007</guid>
      <link>https://github.com/dotnet/runtime/pull/76007</link>
      <title>PR: Fix not to create unnecessary `thread_params` - @HJLeee</title>
      <description>&lt;p&gt;In case of &lt;code&gt;EP_THREAD_TYPE_SERVER&lt;/code&gt;, thread_param is a leak in the original code.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 09:18:47 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76003</guid>
      <link>https://github.com/dotnet/runtime/pull/76003</link>
      <title>PR: Remove some extra static arrays used in Split() - @iSazonov</title>
      <description />
      <pubDate>Thu, 22 Sep 2022 07:03:41 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/76000</guid>
      <link>https://github.com/dotnet/runtime/pull/76000</link>
      <title>PR: Disable EventSource support in NativeAOT by default - @MichalStrehovsky</title>
      <description>&lt;p&gt;&lt;code&gt;DiagnosticSource&lt;/code&gt; is currently not AOT compatible. If a machine-wide DiagnosticSource-related event listener is enabled (such as PerfView, or possibly even a managed VS debugging session) it activates &lt;code&gt;DiagnosticSource&lt;/code&gt; code paths within the executable and basically injects a runtime failure into NativeAOT processes due to the AOT-incompatibility of the code.&lt;/p&gt;
&lt;p&gt;E.g. trying to do a &lt;code&gt;HttpClient&lt;/code&gt; web request with PerfView collecting in the background causes a runtime exception to be thrown.&lt;/p&gt;
&lt;p&gt;This uses the documented switch to disable &lt;code&gt;EventSource&lt;/code&gt; support (unless the user specified a different value). Indirectly, it disables &lt;code&gt;DiagnosticSource&lt;/code&gt; as well.&lt;/p&gt;
&lt;p&gt;As a side effect, disabling &lt;code&gt;EventSource&lt;/code&gt; drops the size of a NativeAOT-compiled Hello World from 3.48 MB to 2.85 MB .&lt;/p&gt;
&lt;p&gt;Cc @dotnet/ilc-contrib&lt;/p&gt;
&lt;p&gt;Contributes to #75945&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 02:40:00 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75999</guid>
      <link>https://github.com/dotnet/runtime/pull/75999</link>
      <title>PR: Improve "vec == Vector128&lt;&gt;.Zero" - @EgorBo</title>
      <description>&lt;p&gt;Follow up to https://github.com/dotnet/runtime/pull/75864 to address @TamarChristinaArm's suggestion in https://github.com/dotnet/runtime/issues/75849#issuecomment-1251456498
Btw, previous improvements seem to show nice benefits https://github.com/dotnet/runtime/pull/75864#issuecomment-1254277984&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static bool IsZero1(Vector128&amp;lt;int&amp;gt; v) =&amp;gt; v == Vector128&amp;lt;int&amp;gt;.Zero;
static bool IsZero2(Vector64&amp;lt;int&amp;gt; v) =&amp;gt; v == Vector64&amp;lt;int&amp;gt;.Zero;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Codegen diff:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-diff"&gt;; Method Tests:IsZero1
            stp     fp, lr, [sp, #-0x10]!
            mov     fp, sp

-           umaxv   s16, v0.4s
-           umov    w0, v16.s[0]
-           cmp     w0, #0
+           umaxp   v16.4s, v0.4s, v0.4s
+           umov    x0, v16.d[0]
+           cmp     x0, #0
            cset    x0, eq

            ldp     fp, lr, [sp], #0x10
            ret     lr

; Method Tests:IsZero2
            stp     fp, lr, [sp, #-0x10]!
            mov     fp, sp

-           umaxv   h16, v0.4h
-           umov    w0, v16.s[0]
-           cmp     w0, #0
+           umov    x0, v0.d[0]
+           cmp     x0, #0
            cset    x0, eq

            ldp     fp, lr, [sp], #0x10
            ret     lr
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Should be a nice win for Vector64. For Vector128 I wasn't able to see noticeable improvements on my Apple M1 but we might see improvements on other (hopefully, on Ampere Altra?)&lt;/p&gt;
&lt;p&gt;However, even on M1 it seems to be better:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;UMAXV                                     3          0.25     1        -     -     1     u11-14
UMAXP                                     2          0.25     1        -     -     1     u11-14
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(1st column is Latency, according to https://dougallj.github.io/applecpu/firestorm-simd.html)&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 02:33:17 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75998</guid>
      <link>https://github.com/dotnet/runtime/pull/75998</link>
      <title>PR: [wasm] Update Wasm.Build.Tests to use latest sdk, and target net8.0 - @radical</title>
      <description>&lt;ul&gt;
&lt;li&gt;Use latest sdk&lt;/li&gt;
&lt;li&gt;Target &lt;code&gt;net8.0&lt;/code&gt; for non-blazor test projects&lt;/li&gt;
&lt;li&gt;Target &lt;code&gt;net7.0&lt;/code&gt; for blazor projects because it doesn't have 8.0 packages yet&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 02:01:32 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75996</guid>
      <link>https://github.com/dotnet/runtime/pull/75996</link>
      <title>PR: [release/7.0-rc2] [Mono] Restore old code to solve the recent SpanHelpers regressions - @github-actions[bot]</title>
      <description>&lt;p&gt;Backport of #75917 to release/7.0-rc2. This replaces backport PR #75932.&lt;/p&gt;
&lt;p&gt;/cc @jeffhandley @adamsitnik @radical&lt;/p&gt;
&lt;h2&gt;Customer Impact&lt;/h2&gt;
&lt;p&gt;Fixes large performance regression https://github.com/dotnet/runtime/issues/75709 in library code when running on mono (AOT, interpreter) introduced in rc1 (https://github.com/dotnet/runtime/pull/74086)&lt;/p&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;Benchmarks were manually run before merge into main to ensure we were seeing expected recovery. We also have the automated benchmarks running now, and we will update with the results once available.&lt;/p&gt;
&lt;h2&gt;Risk&lt;/h2&gt;
&lt;p&gt;We explored several approaches to this fix along the way. We concluded that restoring the old implementation of these methods for use on mono only was the best bet, but those had to be adapted to align with other refactoring that had been done. The result is introducing a SpanHelpers.Mono.cs file with implementations that don't use &lt;code&gt;INumber&amp;lt;T&amp;gt;&lt;/code&gt; and carry the previous intrinsics-based implementations.&lt;/p&gt;
&lt;p&gt;This approach keeps the CoreCLR performance improvements intact while avoiding the mono regression.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 00:56:48 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75995</guid>
      <link>https://github.com/dotnet/runtime/pull/75995</link>
      <title>PR: Cache dynamically generated RSA keys in tests - @bartonjs</title>
      <description>&lt;p&gt;Many of our tests want to use generated keys to avoid any notion that the test pass/fail is tied to using a specific key, but they very rarely care that they're using a completely fresh key.&lt;/p&gt;
&lt;p&gt;With this change, the tests that don't involve mutating key objects (via Import*, Dispose, or calling set_KeySize), and otherwise were generating a new key every time, will now share keys across tests.&lt;/p&gt;
&lt;p&gt;OuterLoop for S.S.Cryptography.Tests drops from generating 2,039 RSA keys across the various sizes to generating only about 43 (the specific number will depend on concurrency). (For an inner-loop test run it's 189 dropping to the same 43 or so.)&lt;/p&gt;
&lt;p&gt;The change also lays infrastructure to pool ECDSA/etc keys, and for commonly-imported key values into pooled objects.&lt;/p&gt;
&lt;p&gt;In addition to doing a bit less of a stress-test on the key generator routines, this should speed up the tests a bit.  On Windows, it shaves a couple of seconds off of the outer loop run (~160s -&amp;gt; ~155s).&lt;/p&gt;
&lt;p&gt;At this time the specific-type tests (S.S.C.Cng.Tests, etc) are not using pooling.&lt;/p&gt;
&lt;p&gt;Hopefully contributes to #25979.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 00:09:31 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75993</guid>
      <link>https://github.com/dotnet/runtime/pull/75993</link>
      <title>PR: Issue #75070 - Add PriorityQueue DequeueEnqueue Method - @RyanThomas73</title>
      <description>&lt;p&gt;Add a DequeueEnqueue method to the System.Collections.Generic.PriorityQueue public api
Add unit test cases for the new method&lt;/p&gt;
&lt;p&gt;Fixes #75070&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 22:50:36 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75992</guid>
      <link>https://github.com/dotnet/runtime/pull/75992</link>
      <title>PR: JIT: properly update trees in optOptimizeBoolsGcStress - @AndyAyersMS</title>
      <description>&lt;p&gt;Under jit stress, &lt;code&gt;optOptimizeBoolsGcStress&lt;/code&gt; will modify trees. Since this now happens in a phase that runs after &lt;code&gt;fgSetBlockOrder&lt;/code&gt;, it must also recost and rethread the trees.&lt;/p&gt;
&lt;p&gt;Fixes #75944.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 21:44:50 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75991</guid>
      <link>https://github.com/dotnet/runtime/pull/75991</link>
      <title>PR: JIT: optimize "o is byte[]" casts - @EgorBo</title>
      <description>&lt;p&gt;Follow up to https://github.com/dotnet/runtime/pull/75816 that optimized such checks for exact classes.&lt;/p&gt;
&lt;p&gt;Array of integers, bytes, etc are special and can be casted to their signed/unsigned equivalents, so let's expand &lt;code&gt;isinst&lt;/code&gt; for them to handle at least one of the cases as a fast path. Presumably, it's a rare case when e.g. &lt;code&gt;obj is int[]&lt;/code&gt; and &lt;code&gt;obj&lt;/code&gt; is &lt;code&gt;uint[]&lt;/code&gt;. In theory we can check for both without the fallback but that will require a new JIT-EE API with extra complexity while I think the declaration type is the most likely target.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;bool IsByteArray(IEnumerable o) =&amp;gt; o is byte[];
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Current codegen:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-asm"&gt;; Method Tests:IsByteArray(System.Collections.IEnumerable):bool:this
G_M51298_IG01:             
       4883EC28             sub      rsp, 40
G_M51298_IG02:              
       48B920FD447CFE7F0000 mov      rcx, 0x7FFE7C44FD20      ; ubyte[]
       FF155472FBFF         call     [CORINFO_HELP_ISINSTANCEOFARRAY]
       4885C0               test     rax, rax
       0F95C0               setne    al
       0FB6C0               movzx    rax, al
G_M51298_IG03:            
       4883C428             add      rsp, 40
       C3                   ret      
; Total bytes of code: 34
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;New codegen:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-asm"&gt;; Method Tests:IsByteArray(System.Collections.IEnumerable):bool:this
G_M51298_IG01:              
       4883EC28             sub      rsp, 40
G_M51298_IG02:             
       488BC2               mov      rax, rdx
       4885C0               test     rax, rax
       741F                 je       SHORT G_M51298_IG05
G_M51298_IG03:         
       48B920FDB976FE7F0000 mov      rcx, 0x7FFE76B9FD20      ; ubyte[]
       483908               cmp      qword ptr [rax], rcx
       7410                 je       SHORT G_M51298_IG05
G_M51298_IG04:             
       48B920FDB976FE7F0000 mov      rcx, 0x7FFE76B9FD20      ; ubyte[]
       FF153D72FBFF         call     [CORINFO_HELP_ISINSTANCEOFARRAY]
G_M51298_IG05:             
       4885C0               test     rax, rax
       0F95C0               setne    al
       0FB6C0               movzx    rax, al
G_M51298_IG06:             
       4883C428             add      rsp, 40
       C3                   ret      
; Total bytes of code: 57
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 20:56:15 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75990</guid>
      <link>https://github.com/dotnet/runtime/pull/75990</link>
      <title>PR: JIT: improve scalability of optReachable - @AndyAyersMS</title>
      <description>&lt;p&gt;Use a bit vector to track the visited blocks. This scales much better than using the per-block visited flags.&lt;/p&gt;
&lt;p&gt;Fixes #44341.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 20:01:33 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75989</guid>
      <link>https://github.com/dotnet/runtime/pull/75989</link>
      <title>PR: Add overloads to ReadFromJsonAsync - @N0D4N</title>
      <description>&lt;p&gt;Resolves #72103&lt;/p&gt;
&lt;p&gt;For some reason when updating ref source by &lt;a href="https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/updating-ref-source.md"&gt;guide in docs&lt;/a&gt;, changes were also made to other classes in ref source file, so i rollbacked those changes in those classes. Also for some reason order of attributes in ref source, in class in which overloads were added, got reversed per method, and i decided to keep it in such order.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 19:18:22 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75988</guid>
      <link>https://github.com/dotnet/runtime/pull/75988</link>
      <title>PR: Update solution files under src/libraries - @ViktorHofer</title>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/commit/71a3985b40c05087579ba41ddb3ad371a1233096"&gt;Update slngen version to work with .NET 7 SDKs&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/dotnet/runtime/commit/14f15ff1d7ccc53be5f5cb1b25768f719564ecdb"&gt;Batch update all solution files under src/libs&lt;/a&gt; ... by invoking the following command: &amp;quot;dotnet.cmd build
src/libraries/slngen.proj&amp;quot;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;@carlossanlop this includes your desired change in the System.Formats.Tar solution file.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 19:15:24 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75986</guid>
      <link>https://github.com/dotnet/runtime/pull/75986</link>
      <title>PR: [wasm][debugger] Support create, debugging and running wasmbrowser template from VS - @thaystg</title>
      <description>&lt;p&gt;https://user-images.githubusercontent.com/4503299/191583813-add3768b-7eb4-4eef-914d-55d677a4bcd0.mp4&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 18:35:39 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75985</guid>
      <link>https://github.com/dotnet/runtime/pull/75985</link>
      <title>PR: [release/7.0] Enable doc generation for source-build - @github-actions[bot]</title>
      <description>&lt;p&gt;Backport of #75981 to release/7.0&lt;/p&gt;
&lt;p&gt;/cc @carlossanlop&lt;/p&gt;
&lt;p&gt;release/7.0 fix for https://github.com/dotnet/source-build/issues/2877&lt;/p&gt;
&lt;h2&gt;Customer Impact&lt;/h2&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;h2&gt;Risk&lt;/h2&gt;
&lt;p&gt;IMPORTANT: Is this backport for a servicing release? If so and this change touches code that ships in a NuGet package, please make certain that you have added any necessary &lt;a href="https://github.com/dotnet/runtime/blob/main/docs/project/library-servicing.md"&gt;package authoring&lt;/a&gt; and gotten it explicitly reviewed.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 18:19:57 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75983</guid>
      <link>https://github.com/dotnet/runtime/pull/75983</link>
      <title>PR: [release/7.0-rc2] Enable doc generation for source-build - @github-actions[bot]</title>
      <description>&lt;p&gt;Backport of #75981 to release/7.0-rc2&lt;/p&gt;
&lt;p&gt;/cc @carlossanlop&lt;/p&gt;
&lt;p&gt;This is the rc2 fix for: https://github.com/dotnet/source-build/issues/2877&lt;/p&gt;
&lt;p&gt;cc @mmitche, this is needed.&lt;/p&gt;
&lt;h2&gt;Customer Impact&lt;/h2&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;h2&gt;Risk&lt;/h2&gt;
&lt;p&gt;IMPORTANT: Is this backport for a servicing release? If so and this change touches code that ships in a NuGet package, please make certain that you have added any necessary &lt;a href="https://github.com/dotnet/runtime/blob/main/docs/project/library-servicing.md"&gt;package authoring&lt;/a&gt; and gotten it explicitly reviewed.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 18:06:42 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75982</guid>
      <link>https://github.com/dotnet/runtime/pull/75982</link>
      <title>PR: Remove hardcoded limit in deserialization constructor arguments - @eiriktsarpalis</title>
      <description>&lt;p&gt;See https://github.com/dotnet/runtime/issues/71984#issuecomment-1253880150 for an explanation on why this limit is not needed.&lt;/p&gt;
&lt;p&gt;Fix #71984.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 18:04:22 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/runtime/pull/75981</guid>
      <link>https://github.com/dotnet/runtime/pull/75981</link>
      <title>PR: Enable doc generation for source-build - @carlossanlop</title>
      <description>&lt;p&gt;Fixes https://github.com/dotnet/source-build/issues/2877&lt;/p&gt;
&lt;p&gt;This is a forward port of this 6.0 change: https://github.com/dotnet/runtime/pull/59937&lt;/p&gt;
&lt;p&gt;Will backport to 7.0.&lt;/p&gt;
&lt;p&gt;Kudos to @MichaelSimons for helping me find the missing change.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 18:04:09 Z</pubDate>
    </item>
  </channel>
</rss>