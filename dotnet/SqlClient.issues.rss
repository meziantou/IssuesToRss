<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dotnet/SqlClient Issues</title>
    <description>Issues from https://github.com/dotnet/SqlClient, generated by https://github.com/meziantou/IssuesToRss/</description>
    <managingEditor>meziantousite@outlook.com</managingEditor>
    <ttl>60</ttl>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1770</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1770</link>
      <title>Issue: 'Authentication=Active Directory Default' Login Fails For SPA Site Running VS2022 - @summitabrown</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;I am running a React SPA site locally in VS 2022. I cannot establish a connection to an Azure SQL Database. I have another web app that is an ASP.NET core MVC site and it works successfully in VS 2022. I have narrowed it down to being related to the SPA site.&lt;/p&gt;
&lt;h3&gt;Exception:&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;Exception message: Login failed for user '&amp;lt;token-identified principal&amp;gt;'.
Stack Trace:
   at Microsoft.Data.ProviderBase.DbConnectionPool.CheckPoolBlockingPeriod(Exception e)
   at Microsoft.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal&amp;amp; connection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal&amp;amp; connection)
   at Microsoft.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal&amp;amp; connection)
   at Microsoft.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   at Microsoft.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry, SqlConnectionOverrides overrides)
   at Microsoft.Data.SqlClient.SqlConnection.Open(SqlConnectionOverrides overrides)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternal(Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open(Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(RelationalCommandParameterObject parameterObject)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.InitializeReader(Enumerator enumerator)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.Enumerator.MoveNext()
   at System.Linq.Enumerable.TryGetSingle[TSource](IEnumerable`1 source, Boolean&amp;amp; found)
   at lambda_method31(Closure , QueryContext )
   at System.Linq.Queryable.FirstOrDefault[TSource](IQueryable`1 source, Expression`1 predicate)

&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;Establish connection to database just like a regular ASP.NET core web application does.&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;Microsoft.Data.SqlClient version: 5.0.0 and 4.0.0
.NET target: 6
SQL Server version: Azure SQL Database
Operating system: Windows 10/VS 2022&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 19:15:17 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1765</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1765</link>
      <title>Issue: SELECT SqlCommand (async) never finishes for 100 MB file in EF Core 6 but finishes fine in SSMS - @janseris</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;Setup:&lt;/p&gt;
&lt;p&gt;Sample project: https://github.com/janseris/EFCoreTest&lt;/p&gt;
&lt;p&gt;&amp;quot;Image&amp;quot; table with Data of FILESTREAM (varbinary(max)).
Table cotains 1 item with 100 MB file.
&lt;img src="https://user-images.githubusercontent.com/64279914/190830448-054b85d3-8f67-432e-8707-477d7246bba0.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/SqlClient/files/9590553/CancellationTokenTestDB.sql.txt"&gt;CancellationTokenTestDB.sql.txt&lt;/a&gt;
(sorry, GitHub &amp;quot;doesn't support&amp;quot; files with names ending with &lt;code&gt;.sql&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Select all query takes 1 minute 31 seconds on 1,5 MB/s download in SSMS (expected).&lt;/p&gt;
&lt;p&gt;Select all query called with EF Core never finishes (I wanted 5 and then another attempt 10 minutes) and no exception is thrown.
The finally block after the try block with the query never executes.&lt;/p&gt;
&lt;p&gt;Also, cancelling for the query never finishes (I waited for 2 minutes):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;info: 17.09.2022 01:36:18.015 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executed DbCommand (123ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT [i].[ID], [i].[Name], [i0].[Data]
      FROM [IMAGE] AS [i]
      LEFT JOIN [IMAGE_DATA] AS [i0] ON [i].[ID] = [i0].[ImageID]
Operation cancel request submitted at 01:36:19.695
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;private async Task LoadAll()
        {
            try
            {
                cts = new CancellationTokenSource();
                var token = cts.Token;
                loadAllButton.Enabled = false;
                cancelLoadingButton.Enabled = true;
                var items = await DAO.LoadAllAsync(token);  //takes 1m 31s to execute in SSMS
                Trace.WriteLine($&amp;quot;Loaded {items.Count} items, total size: {items.Sum(i =&amp;gt; i.Data.Length / 1024*1024)} MB&amp;quot;);
            }
            catch (Exception ex)
            {
                Trace.WriteLine(ex.GetType() + ex.Message);
            }
            finally
            {
                Trace.WriteLine($&amp;quot;Operation was really cancelled at {GetTime()}&amp;quot;);
                cts.Dispose();
                cts = null;
                loadAllButton.Enabled = true;
                cancelLoadingButton.Enabled = false;
            }
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;EF Core 6 log claims that the command had already finished in 130 milliseconds.
Network activity is fine first ~10 seconds but then starts slowing down and running randomly (approx 5 to 10 seconds 0 Kb/s and then half speed for 1 second and then again nothging for 5 to 10 seconds and the interval length is raising progressively).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dbug: 17.09.2022 01:25:13.276 RelationalEventId.ConnectionOpened[20001] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Opened connection to database 'devRemin' on server 'myServer'.
dbug: 17.09.2022 01:25:13.287 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executing DbCommand [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT [i].[ID], [i].[Name], [i0].[Data]
      FROM [IMAGE] AS [i]
      LEFT JOIN [IMAGE_DATA] AS [i0] ON [i].[ID] = [i0].[ImageID]
info: 17.09.2022 01:25:13.425 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executed DbCommand (137ms) [Parameters=[], CommandType='Text', CommandTimeout='30']
      SELECT [i].[ID], [i].[Name], [i0].[Data]
      FROM [IMAGE] AS [i]
      LEFT JOIN [IMAGE_DATA] AS [i0] ON [i].[ID] = [i0].[ImageID]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The EF query:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;public async Task&amp;lt;List&amp;lt;Image&amp;gt;&amp;gt; LoadAllAsync(CancellationToken token = default) 
        {
            using var db = factory.CreateDbContext();
            var query = from image in db.IMAGE.Include(image =&amp;gt; image.IMAGE_DATA)
                        select new Image
                        {
                            ID = image.ID,
                            Name = image.Name,
                            Data = image.IMAGE_DATA.Data
                        };
            return await query.ToListAsync(token);
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;Query uses all network capacity and runs similar to SSMS&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;&amp;quot;Microsoft.EntityFrameworkCore.SqlServer&amp;quot; Version=&amp;quot;6.0.9&amp;quot;
Microsoft Windows 10 Home 10.0.19043 N/A Build 19043&lt;/p&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 23:28:27 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1764</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1764</link>
      <title>Issue: CommandTimeout doesn't work for insert with EF Core 6 - @janseris</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;Sample project: Sample project: https://github.com/janseris/EFCoreTest&lt;/p&gt;
&lt;p&gt;Database tables:
&lt;img src="https://user-images.githubusercontent.com/64279914/190830461-6f9f1ba0-00a2-4425-9681-868f3abafc21.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/SqlClient/files/9590553/CancellationTokenTestDB.sql.txt"&gt;CancellationTokenTestDB.sql.txt&lt;/a&gt;
(sorry, GitHub &amp;quot;doesn't support&amp;quot; files with names ending with &lt;code&gt;.sql&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;When inserting a 100 MB file, from EF Core 6 log I can see the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
Executed DbCommand (151ms) [Parameters=[@p0='?' (Size = 50)], CommandType='Text', CommandTimeout='30']
      SET NOCOUNT ON;
      INSERT INTO [IMAGE] ([Name])
      VALUES (@p0);
      SELECT [ID]
      FROM [IMAGE]
      WHERE @@ROWCOUNT = 1 AND [ID] = scope_identity();

...

dbug: 17.09.2022 00:09:03.728 RelationalEventId.CommandExecuting[20100] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executing DbCommand [Parameters=[@p1='?' (DbType = Int32), @p2='?' (Size = -1) (DbType = Binary)], CommandType='Text', CommandTimeout='30']
      SET NOCOUNT ON;
      INSERT INTO [IMAGE_DATA] ([ImageID], [Data])
      VALUES (@p1, @p2);
      SELECT [FS_GUID]
      FROM [IMAGE_DATA]
      WHERE @@ROWCOUNT = 1 AND [ImageID] = @p1;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Because of my slow internet connection, after 5 minutes, the insert db call finishes.
It is not supposed to because default timeout for SqlCommand is 30 seconds. After this period, it should fail.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;info: 17.09.2022 00:14:20.314 RelationalEventId.CommandExecuted[20101] (Microsoft.EntityFrameworkCore.Database.Command) 
      Executed DbCommand (316,587ms) [Parameters=[@p1='?' (DbType = Int32), @p2='?' (Size = -1) (DbType = Binary)], CommandType='Text', CommandTimeout='30']
      SET NOCOUNT ON;
      INSERT INTO [IMAGE_DATA] ([ImageID], [Data])
      VALUES (@p1, @p2);
      SELECT [FS_GUID]
      FROM [IMAGE_DATA]
      WHERE @@ROWCOUNT = 1 AND [ImageID] = @p1;
dbug: 17.09.2022 00:14:20.325 RelationalEventId.DataReaderDisposing[20300] (Microsoft.EntityFrameworkCore.Database.Command) 
      A data reader was disposed.
dbug: 17.09.2022 00:14:20.335 RelationalEventId.TransactionCommitting[20210] (Microsoft.EntityFrameworkCore.Database.Transaction) 
      Committing transaction.
dbug: 17.09.2022 00:14:20.382 RelationalEventId.TransactionCommitted[20202] (Microsoft.EntityFrameworkCore.Database.Transaction) 
      Committed transaction.
dbug: 17.09.2022 00:14:20.393 RelationalEventId.ConnectionClosing[20002] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Closing connection to database 'devRemin' on server 'myServer'.
dbug: 17.09.2022 00:14:20.408 RelationalEventId.ConnectionClosed[20003] (Microsoft.EntityFrameworkCore.Database.Connection) 
      Closed connection to database 'devRemin' on server 'myServer'.
dbug: 17.09.2022 00:14:20.419 RelationalEventId.TransactionDisposed[20204] (Microsoft.EntityFrameworkCore.Database.Transaction) 
      Disposing transaction.
dbug: 17.09.2022 00:14:20.434 CoreEventId.StateChanged[10807] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      An entity of type 'IMAGE' tracked by 'CancellationTokenTestContext' changed state from 'Added' to 'Unchanged'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
dbug: 17.09.2022 00:14:20.443 CoreEventId.StateChanged[10807] (Microsoft.EntityFrameworkCore.ChangeTracking) 
      An entity of type 'IMAGE_DATA' tracked by 'CancellationTokenTestContext' changed state from 'Added' to 'Unchanged'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see key values.
dbug: 17.09.2022 00:14:20.451 CoreEventId.SaveChangesCompleted[10005] (Microsoft.EntityFrameworkCore.Update) 
      SaveChanges completed for 'CancellationTokenTestContext' with 2 entities written to the database.
dbug: 17.09.2022 00:14:20.457 CoreEventId.ContextDisposed[10407] (Microsoft.EntityFrameworkCore.Infrastructure) 
      'CancellationTokenTestContext' disposed.
Inserted
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;p&gt;Set up a SQL Server with a slow internet connection to be able to simulate this.
I am using a SQL Server 2012 with latest patch.&lt;/p&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;Command fails after 30 seconds which is the default timeout.&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;&amp;quot;Microsoft.EntityFrameworkCore.SqlServer&amp;quot; Version=&amp;quot;6.0.9&amp;quot;
Microsoft Windows 10 Home 10.0.19043 N/A Build 19043
&lt;img src="https://user-images.githubusercontent.com/64279914/190815565-5cabf61d-6002-4a0f-84af-1755ae0d0f13.png" alt="image" /&gt;&lt;/p&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 22:19:10 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1762</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1762</link>
      <title>Issue: ExecuteReaderAsync hangs when Column Encryption is enabled and the worker usage of Azure DB is 100% - @TungKJ</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;SqlCommand ExecuteReaderAsync hangs when Column Encryption is enabled and  the worker usage of Azure DB is 100%
In the EventSource trace, there is an SqlError, but the app doesn't doesn't receive the exception.
The error message in the trace is  &amp;quot;SqlError.ctor | ERR | Info Number 10928, Error State 1, Error Class 20, Error Message 'Resource ID : 1. The request limit for the database is 60 and has been reached. See 'https://docs.microsoft.com/azure/azure-sql/database/resource-limits-logical-server' for assistance.', Procedure '', Line Number 1&amp;quot;&lt;/p&gt;
&lt;p&gt;If using ExecuteReader instead of ExecuteReaderAsync, Column Encryption disabled, or the stored procedure without any parameters,  the app works fine.&lt;/p&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a Azure DB S0&lt;/li&gt;
&lt;li&gt;Execute below sql to create a store procedure with a parameter in which WAITFOR is executed&lt;/li&gt;
&lt;li&gt;Run ConsoleAppCore in the attached file to call the store procedure constantly&lt;/li&gt;
&lt;li&gt;Run ConsoleAppCore2 to occupy all the workers of Azure DB&lt;/li&gt;
&lt;li&gt;ConsoleAppCore hangs in 2 minutes&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;stored procedure&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;ALTER PROC [dbo].[GetBlogs] (@__para_0 datetime2(7))  
AS  
BEGIN  
WAITFOR DELAY '00:00:02'
END  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;test code: &lt;a href="https://github.com/dotnet/SqlClient/files/9572570/TestProject.zip"&gt;TestProject.zip&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EventSource trace&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;0&amp;quot; message=&amp;quot;&amp;lt;prov.DbConnectionHelper.ConnectionString_Set|API&amp;gt; 36, 'Server=tcp:jsqasg.database.windows.net,1433;Database=TestModel;Encrypt=True;TrustServerCertificate=False;Connection Timeout=120;MultipleActiveResultSets=True;User ID=JSQALottery;Max Pool Size=100;Column Encryption Setting=enabled'&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;0&amp;quot; message=&amp;quot;&amp;lt;sc.SqlConfigurableRetryLogicManager.ConnectionProvider|INFO&amp;gt; Requested the ConnectionProvider value.&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;0&amp;quot; message=&amp;quot;SqlCommand.Set_CommandText | API | Object Id 36, String Value = 'GetBlogs', Client Connection Id null&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;0&amp;quot; message=&amp;quot;SqlCommand.Set_Connection | API | ObjectId 36, Client Connection Id ec0b9261-8ea2-4324-ab16-ff356f224421&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;0&amp;quot; message=&amp;quot;SqlCommand.Set_CommandType | API | ObjectId 36, Command type value 4, Client Connection Id ec0b9261-8ea2-4324-ab16-ff356f224421&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;0&amp;quot; message=&amp;quot;&amp;lt;sc.SqlConfigurableRetryLogicManager.CommandProvider|INFO&amp;gt; Requested the CommandProvider value.&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;0&amp;quot; message=&amp;quot;SqlCommand.InternalExecuteReaderAsync | API&amp;gt; 36, Client Connection Id ec0b9261-8ea2-4324-ab16-ff356f224421, Command Text = 'GetBlogs'&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;0&amp;quot; message=&amp;quot;SqlCommand.RunExecuteReaderTds | Info | Object Id 36, Activity Id 9829f214-a1e0-4e4f-9d0e-b48af043eb2f:1, Client Connection Id ec0b9261-8ea2-4324-ab16-ff356f224421, Command executed as RPC, RPC Name 'GetBlogs' &amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;5&amp;quot; message=&amp;quot;SqlCommand.SetActiveConnectionAndResult | API | ObjectId 36, Client Connection Id ec0b9261-8ea2-4324-ab16-ff356f224421, MARS=True&amp;quot; 
ThreadID=&amp;quot;16,448&amp;quot; ProcessorNumber=&amp;quot;6&amp;quot; message=&amp;quot;TdsParserStateObject.ReadAsyncCallback | Info | State Object Id 3, received error 0 on idle connection&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;3&amp;quot; message=&amp;quot;SqlCommand.InternalEndExecuteReader | INFO | ObjectId 36, Client Connection Id ec0b9261-8ea2-4324-ab16-ff356f224421, MARS=True, AsyncCommandInProgress=True&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;3&amp;quot; message=&amp;quot;SqlCommand.VerifyEndExecuteState | API | ObjectId 36, Client Connection Id ec0b9261-8ea2-4324-ab16-ff356f224421, MARS=True, AsyncCommandInProgress=True&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;3&amp;quot; message=&amp;quot;SqlCommand.VerifyEndExecuteState | API | ObjectId 36, Client Connection Id ec0b9261-8ea2-4324-ab16-ff356f224421, MARS=True, AsyncCommandInProgress=True&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;4&amp;quot; message=&amp;quot;SqlError.ctor | ERR | Info Number 10928, Error State 1, Error Class 20, Error Message 'Resource ID : 1. The request limit for the database is 60 and has been reached. See 'https://docs.microsoft.com/azure/azure-sql/database/resource-limits-logical-server' for assistance.', Procedure '', Line Number 1&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;4&amp;quot; message=&amp;quot;TdsParserStateObject.DecrementOpenResultCount | INFO | State Object Id 3, Processing Attention.&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;4&amp;quot; message=&amp;quot;SqlConnection.OnError | Info | Object Id 36, Connection broken.&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;1&amp;quot; message=&amp;quot;CachedAsyncState.ResetAsyncState | API | ObjectId 36, Client Connection Id ec0b9261-8ea2-4324-ab16-ff356f224421, AsyncCommandInProgress=True&amp;quot; 
ThreadID=&amp;quot;8,808&amp;quot; ProcessorNumber=&amp;quot;6&amp;quot; message=&amp;quot;&amp;lt;comm.ADP.TraceException|ERR|THROW&amp;gt; 'System.InvalidOperationException: Invalid operation. The connection is closed.'&amp;quot; 

&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;Sql Command should receive an exception and should not hang&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;Microsoft.Data.SqlClient version: 5.0.0
.NET target: Core 6.0
SQL Server version: Azure DB
Operating system: Windows&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 06:52:04 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1758</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1758</link>
      <title>Issue: Starting multiple transactions in separate threads causes unexpected behavior - @Charles-Gagnon</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;If multiple transactions are started in separate threads, but using the same connection, then you can end up with multiple transaction objects. This is unexpected since normally if you try to begin multiple transactions on the same connection it throws an InvalidOperationException.&lt;/p&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;p&gt;This results in no errors being produced and both tables being created.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    var conn = new SqlConnection(...);
    var task1 = Task.Run(() =&amp;gt;
    {
        return conn.BeginTransaction(System.Data.IsolationLevel.RepeatableRead);
    });
    var task2 = Task.Run(() =&amp;gt;
    {
        return conn.BeginTransaction(System.Data.IsolationLevel.RepeatableRead);
    });

    SqlTransaction t1 = await task1;
    SqlTransaction t2 = await task2;
    using (SqlCommand cmd1 = new SqlCommand(&amp;quot;CREATE TABLE t1 (c1 int)&amp;quot;, conn, t1))
    {
        cmd1.ExecuteNonQuery();
    }

    using (SqlCommand cmd2 = new SqlCommand(&amp;quot;CREATE TABLE t2 (c1 int)&amp;quot;, conn, t2))
    {
        cmd2.ExecuteNonQuery();
    }

    t1.Commit();
    t2.Commit();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If I await the first task though before starting the second then it errors as expected&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    var conn = new SqlConnection(...);
    var task1 = Task.Run(() =&amp;gt;
    {
        return conn.BeginTransaction(System.Data.IsolationLevel.RepeatableRead);
    });
    SqlTransaction t1 = await task1;
    var task2 = Task.Run(() =&amp;gt;
    {
        return conn.BeginTransaction(System.Data.IsolationLevel.RepeatableRead); // This now throws
    });

    SqlTransaction t2 = await task2;
    using (SqlCommand cmd1 = new SqlCommand(&amp;quot;CREATE TABLE t1 (c1 int)&amp;quot;, conn, t1))
    {
        cmd1.ExecuteNonQuery();
    }

    using (SqlCommand cmd2 = new SqlCommand(&amp;quot;CREATE TABLE t2 (c1 int)&amp;quot;, conn, t2))
    {
        cmd2.ExecuteNonQuery();
    }

    t1.Commit();
    t2.Commit();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;I would expect this to throw an exception, like what happens if you try to begin two transactions on the same thread :&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    var t1 = conn.BeginTransaction(System.Data.IsolationLevel.RepeatableRead);
    var t2 = conn.BeginTransaction(System.Data.IsolationLevel.RepeatableRead); // This throws
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;Microsoft.Data.SqlClient version: 5.0.0
.NET target: .NET 6
SQL Server version: 2022
Operating system: Windows 11 Enterprise&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An interesting thing I noticed was that the TransactionId of the internal transaction object is 0 for the second transaction object :&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/28519865/189421423-88d5cb57-bfa9-4990-9948-acc9a4068b41.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;There's also some interesting behavior where it seems like the transactions are linked somehow, none of the transactions are committed until both of the SqlTransaction objects have Commit called. Calling it on just one results in nothing happening (although I haven't dug into the SQL server side to see what all is happening there yet - just verified that the table isn't created)&lt;/p&gt;
</description>
      <pubDate>Fri, 09 Sep 2022 18:41:47 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1753</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1753</link>
      <title>Issue: Microsoft.Data.SqlClient 4.1.0 error - provider: SSL Provider, error: 0 - The target principal name is incorrect - @qizu0302</title>
      <description>&lt;p&gt;I met this
&lt;em&gt;SqlError: 'A connection was successfully established with the server, but then an error occurred during the login process. (provider: SSL Provider, error: 0 - The target principal name is incorrect.)'    Source: 'Framework Microsoft SqlClient Data Provider' Number: -2146893022 State: 0 Class: 20 Procedure: '' LineNumber: 0 Server: 'sql'&lt;/em&gt;
when I establish a connection from SharePoint to SQL server. SharePoint is using Microsoft.Data.SqlClient lib while SQL Server is still using System.Data.SqlClient.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I create a self-signed cert on sql server and import it to SharePoint server, set 'Force Encryption' to Yes and 'Trust Server Certificate' to Yes of both SQL Server network configuration and sql native client 11.0 configuration via SSCM.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Is it possible that sql server version isn't compatible with Microsoft.Data.SqlClient lib version?&lt;/p&gt;
</description>
      <pubDate>Wed, 07 Sep 2022 07:50:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1752</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1752</link>
      <title>Issue: Unable to load SQLUserInstance.dll from the location specified...  - @wbalzer</title>
      <description>&lt;p&gt;I have LocalDB installed with Visual Studio 2022 on Windows 11 (ARM).   I have no issues creating databases or using SSMS.  However using the package manager to run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Update-Database&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I get the following error.   It appears that the tools are expecting a valid Win32 application... which it I would expect would work because Visual Studio works fine in Windows 11 (ARM).   I have a MacBook Pro - M1 Max, running Windows 11 (ARM) in Parallels.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Microsoft.EntityFrameworkCore.Infrastructure[10403]
      Entity Framework Core 6.0.4 initialized 'ApplicationDbContext' using provider 'Microsoft.EntityFrameworkCore.SqlServer:6.0.4' with options: None
Microsoft.Data.SqlClient.SqlException (0x80131904): A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SNI_PN11, error: 56 - Unable to load the SQLUserInstance.dll from the location specified in the registry. Verify that the Local Database Runtime feature of SQL Server Express is properly installed.)
 ---&amp;gt; System.ComponentModel.Win32Exception (193): %1 is not a valid Win32 application.
   at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, Boolean ignoreSniOpenTimeout, Int64 timerExpire, Boolean encrypt, Boolean trustServerCert, Boolean integratedSecurity, Boolean withFailover, SqlAuthenticationMethod authType)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean ignoreSniOpenTimeout, TimeoutTimer timeout, Boolean withFailover)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, SqlCredential credential, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance)
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling, String accessToken, DbConnectionPool pool)
   at Microsoft.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
   at Microsoft.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
   at Microsoft.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal&amp;amp; connection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal&amp;amp; connection)
   at Microsoft.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal&amp;amp; connection)
   at Microsoft.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   at Microsoft.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   at Microsoft.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry, SqlConnectionOverrides overrides)
   at Microsoft.Data.SqlClient.SqlConnection.Open(SqlConnectionOverrides overrides)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerConnection.OpenDbConnection(Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenInternal(Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open(Boolean errorsExpected)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.&amp;lt;&amp;gt;c__DisplayClass18_0.&amp;lt;Exists&amp;gt;b__0(DateTime giveUp)
   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.&amp;lt;&amp;gt;c__DisplayClass12_0`2.&amp;lt;Execute&amp;gt;b__0(DbContext c, TState s)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerExecutionStrategy.Execute[TState,TResult](TState state, Func`3 operation, Func`3 verifySucceeded)
   at Microsoft.EntityFrameworkCore.ExecutionStrategyExtensions.Execute[TState,TResult](IExecutionStrategy strategy, TState state, Func`2 operation, Func`2 verifySucceeded)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.Exists(Boolean retryOnNotExists)
   at Microsoft.EntityFrameworkCore.SqlServer.Storage.Internal.SqlServerDatabaseCreator.Exists()
   at Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Exists()
   at Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(String targetMigration)
   at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.UpdateDatabase(String targetMigration, String connectionString, String contextType)
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.UpdateDatabaseImpl(String targetMigration, String connectionString, String contextType)
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.UpdateDatabase.&amp;lt;&amp;gt;c__DisplayClass0_0.&amp;lt;.ctor&amp;gt;b__0()
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.Execute(Action action)
ClientConnectionId:00000000-0000-0000-0000-000000000000
Error Number:193,State:0,Class:20
A network-related or instance-specific error occurred while establishing a connection to SQL Server. The server was not found or was not accessible. Verify that the instance name is correct and that SQL Server is configured to allow remote connections. (provider: SNI_PN11, error: 56 - Unable to load the SQLUserInstance.dll from the location specified in the registry. Verify that the Local Database Runtime feature of SQL Server Express is properly installed.)
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Wed, 07 Sep 2022 02:24:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1745</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1745</link>
      <title>Issue: I think this might be a duplicate of #1656 - @gshzr</title>
      <description>&lt;p&gt;I think this might be a duplicate of #1656&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted by @lcheunglci in https://github.com/dotnet/SqlClient/issues/1740#issuecomment-1227454284&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;it's not work&lt;/p&gt;
</description>
      <pubDate>Sat, 27 Aug 2022 02:58:42 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1743</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1743</link>
      <title>Issue: Crash with 5.0.0 when DacFx is referenced - @ErikEJ</title>
      <description>&lt;p&gt;Error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Unhandled exception. System.TypeLoadException: Could not load type 'Microsoft.Data.SqlClient.Server.IBinarySerialize' from assembly 'Microsoft.Data.SqlClient, Version=5.0.0.0, Culture=neutral, PublicKeyToken=23ec7fc2d6eaa4a5'.
   at System.Reflection.RuntimeAssembly.GetType(QCallAssembly assembly, String name, Boolean throwOnError, Boolean ignoreCase, ObjectHandleOnStack type, ObjectHandleOnStack keepAlive, ObjectHandleOnStack assemblyLoadContext)
   at System.Reflection.RuntimeAssembly.GetType(String name, Boolean throwOnError, Boolean ignoreCase)
   at System.TypeNameParser.ResolveType(Assembly assembly, String[] names, Func`4 typeResolver, Boolean throwOnError, Boolean ignoreCase, StackCrawlMark&amp;amp; stackMark)
   at System.TypeNameParser.ConstructType(Func`2 assemblyResolver, Func`4 typeResolver, Boolean throwOnError, Boolean ignoreCase, StackCrawlMark&amp;amp; stackMark)
   at System.TypeNameParser.GetType(String typeName, Func`2 assemblyResolver, Func`4 typeResolver, Boolean throwOnError, Boolean ignoreCase, StackCrawlMark&amp;amp; stackMark)
   at System.Type.GetType(String typeName, Func`2 assemblyResolver, Func`4 typeResolver, Boolean throwOnError)
   at Microsoft.Data.SqlClient.SqlConnection.CheckGetExtendedUDTInfo(SqlMetaDataPriv metaData, Boolean fThrow)
   at Microsoft.Data.SqlClient.SqlDataReader.GetFieldTypeInternal(_SqlMetaData metaData)
   at Microsoft.Data.SqlClient.SqlDataReader.BuildSchemaTable()
   at Microsoft.Data.SqlClient.SqlDataReader.GetSchemaTable()
   at Program.&amp;lt;Main&amp;gt;$(String[] args) in C:\Code\Demo\SqlClient5Crash\Program.cs:line 38

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Project file:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net6.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
    &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.Data.SqlClient&amp;quot; Version=&amp;quot;5.0.0&amp;quot; /&amp;gt;
	&amp;lt;PackageReference Include=&amp;quot;Microsoft.SqlServer.DacFx&amp;quot; Version=&amp;quot;160.6161.0&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Program.cs:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Microsoft.Data.SqlClient;
using System.Data;

using var connection = new SqlConnection(&amp;quot;Data Source=.\\SQLEXPRESS;Initial Catalog=Northwind;Integrated Security=true;Encrypt=false&amp;quot;);
connection.Open();

using var dmlCommand = connection.CreateCommand();

dmlCommand.CommandText = @&amp;quot;CREATE OR ALTER PROCEDURE [dbo].[SpecialTypes] (
        @Parents hierarchyid,
        @geo geography,
        @geom geometry) 
        AS
        BEGIN
            SELECT 1 AS Id, @geo AS Geo, @Parents AS Parents, @geom as Geom;
        END;&amp;quot;;

dmlCommand.ExecuteNonQuery();

using var sqlCommand = connection.CreateCommand();

using var command = connection.CreateCommand();

command.CommandText = &amp;quot;[dbo].[SpecialTypes]&amp;quot;;
command.CommandType = CommandType.StoredProcedure;

var param1 = new SqlParameter(&amp;quot;@Parents&amp;quot;, DBNull.Value);
command.Parameters.Add(param1);

var param2 = new SqlParameter(&amp;quot;@geo&amp;quot;, DBNull.Value);
command.Parameters.Add(param2);

var param3 = new SqlParameter(&amp;quot;@geom&amp;quot;, DBNull.Value);
command.Parameters.Add(param3);

using var schemaReader = command.ExecuteReader(CommandBehavior.SchemaOnly);

using var schemaTable = schemaReader.GetSchemaTable();

foreach (DataRow row in schemaTable.Rows)
{
    Console.WriteLine(row[&amp;quot;ColumnName&amp;quot;].ToString());
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Non-failing cases:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;  &amp;lt;ItemGroup&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.Data.SqlClient&amp;quot; Version=&amp;quot;4.1.0&amp;quot; /&amp;gt;
	&amp;lt;PackageReference Include=&amp;quot;Microsoft.SqlServer.DacFx&amp;quot; Version=&amp;quot;160.6161.0&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;  &amp;lt;ItemGroup&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.Data.SqlClient&amp;quot; Version=&amp;quot;5.0.0&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Could be related to the fact that DacFx includes a Microsoft.SqlServer.Types.dll file, but I am just guessing here.&lt;/p&gt;
&lt;p&gt;@dzsquared What are the plans for adopting SqlClient 5 in DacFx?&lt;/p&gt;
</description>
      <pubDate>Fri, 26 Aug 2022 10:10:30 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1741</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1741</link>
      <title>Issue: System.AccessViolationException at SNIOpenSyncExWrapper - @joe-green-uk</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;When connecting to a SQL instance in Azure App Services if the connection fails we don't get a graceful connection error but we recieve the following exception.&lt;/p&gt;
&lt;p&gt;This code is .NET Framework 4.8
Deployed to Azure App Services&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Application: w3wp.exe
Framework Version: v4.0.30319
Description: System.AccessViolationException
Exception message: The process was terminated due to an unhandled exception.
Stack trace:

Exception Info: System.AccessViolationException
   at &amp;lt;Module&amp;gt;.SNIOpenSyncExWrapper(SNI_CLIENT_CONSUMER_INFO*, SNI_ConnWrapper**)
   at SNINativeMethodWrapper.SNIOpenSyncEx(ConsumerInfo, System.String, IntPtr ByRef, Byte[], Byte[], Boolean, Boolean, Int32, Boolean, Int32, Int32, Boolean)
   at System.Data.SqlClient.SNIHandle..ctor(ConsumerInfo, System.String, Byte[], Boolean, Int32, Byte[] ByRef, Boolean, Boolean, Boolean, System.Data.SqlClient.TransparentNetworkResolutionState, Int32)
   at System.Data.SqlClient.TdsParserStateObject.CreatePhysicalSNIHandle(System.String, Boolean, Int64, Byte[] ByRef, Byte[], Boolean, Boolean, Boolean, System.Data.SqlClient.TransparentNetworkResolutionState, Int32)
   at System.Data.SqlClient.TdsParser.Connect(System.Data.SqlClient.ServerInfo, System.Data.SqlClient.SqlInternalConnectionTds, Boolean, Int64, Boolean, Boolean, Boolean, Boolean, Boolean, System.Data.SqlClient.SqlAuthenticationMethod, Boolean, System.Data.SqlClient.SqlAuthenticationProviderManager)
   at System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(System.Data.SqlClient.ServerInfo, System.String, System.Security.SecureString, Boolean, System.Data.ProviderBase.TimeoutTimer, Boolean, Boolean, Boolean)
   at System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(System.Data.SqlClient.ServerInfo, System.String, System.Security.SecureString, Boolean, System.Data.SqlClient.SqlConnectionString, System.Data.SqlClient.SqlCredential, System.Data.ProviderBase.TimeoutTimer)
   at System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(System.Data.ProviderBase.TimeoutTimer, System.Data.SqlClient.SqlConnectionString, System.Data.SqlClient.SqlCredential, System.String, System.Security.SecureString, Boolean)
   at System.Data.SqlClient.SqlInternalConnectionTds..ctor(System.Data.ProviderBase.DbConnectionPoolIdentity, System.Data.SqlClient.SqlConnectionString, System.Data.SqlClient.SqlCredential, System.Object, System.String, System.Security.SecureString, Boolean, System.Data.SqlClient.SqlConnectionString, System.Data.SqlClient.SessionData, System.Data.ProviderBase.DbConnectionPool, System.String, Boolean, System.Data.SqlClient.SqlAuthenticationProviderManager)
   at System.Data.SqlClient.SqlConnectionFactory.CreateConnection(System.Data.Common.DbConnectionOptions, System.Data.Common.DbConnectionPoolKey, System.Object, System.Data.ProviderBase.DbConnectionPool, System.Data.Common.DbConnection, System.Data.Common.DbConnectionOptions)
   at System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(System.Data.ProviderBase.DbConnectionPool, System.Data.Common.DbConnection, System.Data.Common.DbConnectionOptions, System.Data.Common.DbConnectionPoolKey, System.Data.Common.DbConnectionOptions)
   at System.Data.ProviderBase.DbConnectionPool.CreateObject(System.Data.Common.DbConnection, System.Data.Common.DbConnectionOptions, System.Data.ProviderBase.DbConnectionInternal)
   at System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(System.Data.Common.DbConnection, System.Data.Common.DbConnectionOptions, System.Data.ProviderBase.DbConnectionInternal)
   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(System.Data.Common.DbConnection, UInt32, Boolean, Boolean, System.Data.Common.DbConnectionOptions, System.Data.ProviderBase.DbConnectionInternal ByRef)
   at System.Data.ProviderBase.DbConnectionPool.TryGetConnection(System.Data.Common.DbConnection, System.Threading.Tasks.TaskCompletionSource`1&amp;lt;System.Data.ProviderBase.DbConnectionInternal&amp;gt;, System.Data.Common.DbConnectionOptions, System.Data.ProviderBase.DbConnectionInternal ByRef)
   at System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(System.Data.Common.DbConnection, System.Threading.Tasks.TaskCompletionSource`1&amp;lt;System.Data.ProviderBase.DbConnectionInternal&amp;gt;, System.Data.Common.DbConnectionOptions, System.Data.ProviderBase.DbConnectionInternal, System.Data.ProviderBase.DbConnectionInternal ByRef)
   at System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(System.Data.Common.DbConnection, System.Data.ProviderBase.DbConnectionFactory, System.Threading.Tasks.TaskCompletionSource`1&amp;lt;System.Data.ProviderBase.DbConnectionInternal&amp;gt;, System.Data.Common.DbConnectionOptions)
   at System.Data.SqlClient.SqlConnection.TryOpenInner(System.Threading.Tasks.TaskCompletionSource`1&amp;lt;System.Data.ProviderBase.DbConnectionInternal&amp;gt;)
   at System.Data.SqlClient.SqlConnection.TryOpen(System.Threading.Tasks.TaskCompletionSource`1&amp;lt;System.Data.ProviderBase.DbConnectionInternal&amp;gt;)
   at System.Data.SqlClient.SqlConnection.Open()
   at System.Threading.ExecutionContext.RunInternal(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object, Boolean)
   at System.Threading.TimerQueueTimer.CallCallback()
   at System.Threading.TimerQueueTimer.Fire()
   at System.Threading.TimerQueue.FireNextTimers()

&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;p&gt;Include a complete code listing (or project/solution) that we can run to reproduce the issue.&lt;/p&gt;
&lt;p&gt;Partial code listings, or multiple fragments of code, will slow down our response or cause us to push the issue back to you to provide code to reproduce the issue.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;private static bool TestConnection(string connectionString)
{
    const string SqlQuery = &amp;quot;SELECT TOP 1 message_id FROM sys.messages&amp;quot;;
	
    try
    {
        using (var connection = new SqlConnection(connectionString))
        {
            connection.Open();

            using (var sqlCommand = new SqlCommand(SqlQuery, connection) {CommandType = CommandType.Text})
            {
                return sqlCommand.ExecuteReader().HasRows;
            }
        }
    }
    catch (Exception ex)
    {
        _logger.LogError(ex);
        throw;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;I'd expect if we're having issues connecting to a SQL instance that a sensible error is returned. As the System.AccessViolationException bypasses the try { } catch { } due to &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.accessviolationexception?redirectedfrom=MSDN&amp;amp;view=netframework-4.8#accessviolationexception-and-trycatch-blocks"&gt;behaviour changes in .NET Framework 4&lt;/a&gt;  we don't want to set &lt;a href="https://docs.microsoft.com/en-us/dotnet/framework/configure-apps/file-schema/runtime/legacycorruptedstateexceptionspolicy-element"&gt;legacyCorruptedStateExceptionsPolicy&lt;/a&gt; due to the impact it would have on other exceptions.&lt;/p&gt;
&lt;p&gt;Correct handling of the connection error and appropriate SQL exception raised back to the caller.&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;Microsoft.Data.SqlClient version: (found on the nuget or Microsoft.Data.SqlClient.dll)
.NET target: Framework 4.8
SQL Server version: SQL Server 2017 (Distributed Availability Group)
Operating system: App Services Windows&lt;/p&gt;
</description>
      <pubDate>Thu, 25 Aug 2022 10:31:26 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1740</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1740</link>
      <title>Issue: Maui andriod use microsoft.data.sqlclient report error 35 - @gshzr</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;A clear and concise description of what the bug is.
★sql :Microsoft SQL Server 2012 (SP4) (KB4018073) - 11.0.7001.0 (X64)   Aug 15 2017 10:23:29   Copyright (c) Microsoft Corporation  Standard Edition (64-bit) on Windows NT 6.3 &lt;X64&gt; (Build 9600: ) (Hypervisor)
★bug:
$exception	{Microsoft.Data.SqlClient.SqlException (0x80131904): A connection was successfully established with the server, but then an error occurred during the pre-login handshake. (provider: TCP Provider, error: 35 - An internal exception was caught)
---&amp;gt; System.Security.Authentication.AuthenticationException: Authentication failed, see inner exception.
---&amp;gt; System.PlatformNotSupportedException: Setting an SNI hostname is not supported on this API level.
at Interop.AndroidCrypto.SSLStreamSetTargetHost(SafeSslHandle sslHandle, String targetHost)
at System.Net.SafeDeleteSslContext.InitializeSslContext(SafeSslHandle handle, SSLReadCallback readCallback, SSLWriteCallback writeCallback, SafeFreeSslCredentials credential, SslAuthenticationOptions authOptions)
at System.Net.SafeDeleteSslContext..ctor(SafeFreeSslCredentials credential, SslAuthenticationOptions authOptions)
at System.Net.Security.SslStreamPal.HandshakeInternal(SafeFreeCredentials credential, SafeDeleteSslContext&amp;amp; context, ReadOnlySpan&lt;code&gt;1 inputBuffer, Byte[]&amp;amp; outputBuffer, SslAuthenticationOptions sslAuthenticationOptions) --- End of inner exception stack trace --- at System.Net.Security.SslStream.&amp;lt;ForceAuthenticationAsync&amp;gt;d__175&lt;/code&gt;1[[System.Net.Security.SyncReadWriteAdapter, System.Net.Security, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]].MoveNext()
at System.Net.Security.SslStream.AuthenticateAsClient(SslClientAuthenticationOptions sslClientAuthenticationOptions)
at System.Net.Security.SslStream.AuthenticateAsClient(String targetHost, X509CertificateCollection clientCertificates, SslProtocols enabledSslProtocols, Boolean checkCertificateRevocation)
at System.Net.Security.SslStream.AuthenticateAsClient(String targetHost)
at Microsoft.Data.SqlClient.SNI.SNITCPHandle.EnableSsl(UInt32 options) in /&lt;em&gt;/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SNI/SNITcpHandle.cs:line 506
at Microsoft.Data.SqlClient.SqlInternalConnection.OnError(SqlException exception, Boolean breakConnection, Action&lt;code&gt;1 wrapCloseInAction) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlInternalConnection.cs:line 617 at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/TdsParser.cs:line 1327 at Microsoft.Data.SqlClient.TdsParser.ConsumePreLoginHandshake(Boolean encrypt, Boolean trustServerCert, Boolean integratedSecurity, Boolean&amp;amp; marsCapable, Boolean&amp;amp; fedAuthRequired) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/TdsParser.cs:line 967 at Microsoft.Data.SqlClient.TdsParser.Connect(ServerInfo serverInfo, SqlInternalConnectionTds connHandler, Boolean ignoreSniOpenTimeout, Int64 timerExpire, Boolean encrypt, Boolean trustServerCert, Boolean integratedSecurity, Boolean withFailover, SqlAuthenticationMethod authType) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/TdsParser.cs:line 514 at Microsoft.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean ignoreSniOpenTimeout, TimeoutTimer timeout, Boolean withFailover) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlInternalConnectionTds.cs:line 1874 at Microsoft.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(ServerInfo serverInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlInternalConnectionTds.cs:line 1578 at Microsoft.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, SqlCredential credential, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlInternalConnectionTds.cs:line 1426 at Microsoft.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, Object providerInfo, String newPassword, SecureString newSecurePassword, Boolean redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, Boolean applyTransientFaultHandling, String accessToken, DbConnectionPool pool) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlInternalConnectionTds.cs:line 519 at Microsoft.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, Object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlConnectionFactory.cs:line 133 at Microsoft.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions) in /_/src/Microsoft.Data.SqlClient/netcore/src/Common/src/Microsoft/Data/ProviderBase/DbConnectionFactory.cs:line 138 at Microsoft.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/ProviderBase/DbConnectionPool.cs:line 809 at Microsoft.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/ProviderBase/DbConnectionPool.cs:line 1737 at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal&amp;amp; connection) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/ProviderBase/DbConnectionPool.cs:line 1207 at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource&lt;/code&gt;1 retry, DbConnectionOptions userOptions, DbConnectionInternal&amp;amp; connection) in /&lt;/em&gt;/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/ProviderBase/DbConnectionPool.cs:line 1115
at Microsoft.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource&lt;code&gt;1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal&amp;amp; connection) in /_/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/ProviderBase/DbConnectionFactory.cs:line 121 at Microsoft.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource&lt;/code&gt;1 retry, DbConnectionOptions userOptions) in /&lt;em&gt;/src/Microsoft.Data.SqlClient/netcore/src/Common/src/Microsoft/Data/ProviderBase/DbConnectionInternal.cs:line 347
at Microsoft.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource&lt;code&gt;1 retry, DbConnectionOptions userOptions) in /_/src/Microsoft.Data.SqlClient/netcore/src/Common/src/Microsoft/Data/ProviderBase/DbConnectionClosed.cs:line 39 at Microsoft.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource&lt;/code&gt;1 retry, SqlConnectionOverrides overrides) in /&lt;/em&gt;/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlConnection.cs:line 1687
at Microsoft.Data.SqlClient.SqlConnection.Open(SqlConnectionOverrides overrides) in /&lt;em&gt;/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlConnection.cs:line 1191
at Microsoft.Data.SqlClient.SqlConnection.Open() in /&lt;/em&gt;/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SqlConnection.cs:line 1162
at MauiApp2.firstp.OnCounterClicked(Object sender, EventArgs e) in G:\APP\multiplam\MauiApp2\MauiApp2\firstp.xaml.cs:line 62
at Microsoft.Maui.Controls.Button.Microsoft.Maui.Controls.Internals.IButtonElement.PropagateUpClicked() in D:\a_work\1\s\src\Controls\src\Core\Button.cs:line 196
at Microsoft.Maui.Controls.ButtonElement.ElementClicked(VisualElement visualElement, IButtonElement ButtonElementManager) in D:\a_work\1\s\src\Controls\src\Core\ButtonElement.cs:line 61
at Microsoft.Maui.Controls.Button.SendClicked() in D:\a_work\1\s\src\Controls\src\Core\Button.cs:line 179
at Microsoft.Maui.Controls.Button.Microsoft.Maui.IButton.Clicked() in D:\a_work\1\s\src\Controls\src\Core\HandlerImpl\Button\Button.Impl.cs:line 23
at Microsoft.Maui.Handlers.ButtonHandler.OnClick(IButton button, View v) in D:\a_work\1\s\src\Core\src\Handlers\Button\ButtonHandler.Android.cs:line 197
at Microsoft.Maui.Handlers.ButtonHandler.ButtonClickListener.OnClick(View v) in D:\a_work\1\s\src\Core\src\Handlers\Button\ButtonHandler.Android.cs:line 212
at Android.Views.View.IOnClickListenerInvoker.n_OnClick_Landroid_view_View_(IntPtr jnienv, IntPtr native__this, IntPtr native_v) in /Users/runner/work/1/s/xamarin-android/src/Mono.Android/obj/Release/net6.0/android-31/mcw/Android.Views.View.cs:line 2280
at Android.Runtime.JNINativeWrapper.Wrap_JniMarshal_PPL_V(_JniMarshal_PPL_V callback, IntPtr jnienv, IntPtr klazz, IntPtr p0) in /Users/runner/work/1/s/xamarin-android/src/Mono.Android/Android.Runtime/JNINativeWrapper.g.cs:line 121
ClientConnectionId:7d088faf-3326-49a4-acd8-b9929e1f0104}	Microsoft.Data.SqlClient.SqlException&lt;/p&gt;
&lt;p&gt;★code:
string connStr = &amp;quot;Server=192.166.62.100;Initial Catalog=DapperDB;uid=pps;pwd=www&amp;quot;;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    using (SqlConnection conn = new SqlConnection(connStr))
    {
        conn.Open();//Microsoft.Data.SqlClient.SqlException: 'A connection was successfully established with the server, but then an error occurred during the pre-login handshake. (provider: TCP Provider, error: 35 - An internal exception was caught)'
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you are seeing an exception, include the full exceptions details (message and stack trace).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Exception message:
Stack trace:
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;p&gt;Include a complete code listing (or project/solution) that we can run to reproduce the issue.&lt;/p&gt;
&lt;p&gt;Partial code listings, or multiple fragments of code, will slow down our response or cause us to push the issue back to you to provide code to reproduce the issue.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;Console.WriteLine(&amp;quot;Hello World!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;A clear and concise description of what you expected to happen.&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;Microsoft.Data.SqlClient version: (using Microsoft.Data.SqlClient;)
.NET target: (.net6)
SQL Server version: (e.g. SQL Server 2012 (SP4))
Operating system: (e.g. window10)
visual studio 2022
&lt;strong&gt;Additional context&lt;/strong&gt;
Add any other context about the problem here.&lt;/p&gt;
</description>
      <pubDate>Thu, 25 Aug 2022 03:50:00 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1737</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1737</link>
      <title>Issue: Use better link for AAD auth  - @ErikEJ</title>
      <description>&lt;p&gt;Currently the &amp;quot;Authentication&amp;quot; keyword links to this page: https://docs.microsoft.com/en-us/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring?view=sqlclient-dotnet-standard-4.1&lt;/p&gt;
&lt;p&gt;I think it would be much more helpful with a link to https://docs.microsoft.com/en-us/sql/connect/ado-net/sql/azure-active-directory-authentication?view=sql-server-ver16 - but the page above does not even have a link to this helpful page.&lt;/p&gt;
&lt;p&gt;This could be adressed in the docs here, or on the first page above. Not sure which is better.&lt;/p&gt;
</description>
      <pubDate>Tue, 23 Aug 2022 07:01:08 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1736</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1736</link>
      <title>Issue: Inconsistent documentation - @ErikEJ</title>
      <description>&lt;p&gt;The docs for &lt;code&gt;Host Name In Certificate&lt;/code&gt; seems to not follow the standard version indication pattern used in the connection string docs:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/4169187/186090951-ecf112a8-a0f2-42d0-a3a9-e820c50a0ecb.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;https://docs.microsoft.com/en-us/dotnet/api/microsoft.data.sqlclient.sqlconnection.connectionstring?view=sqlclient-dotnet-standard-4.1&lt;/p&gt;
</description>
      <pubDate>Tue, 23 Aug 2022 06:55:31 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1733</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1733</link>
      <title>Issue: Unable to connect to SqlServer instance with managed SNI and Timeout=0 on SqlClient 5.0 - @vonzshik</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;While attempting to establish the connection to SqlServer instance while having &lt;code&gt;Timeout=0&lt;/code&gt; in the connection string the app becomes unresponsive. I'm able to reproduce this problem on linux and windows with &lt;code&gt;AppContext.SetSwitch(&amp;quot;Switch.Microsoft.Data.SqlClient.UseManagedNetworkingOnWindows&amp;quot;, true)&lt;/code&gt;. It works fine on SqlClient 4.1.0.&lt;/p&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;AppContext.SetSwitch(&amp;quot;Switch.Microsoft.Data.SqlClient.UseManagedNetworkingOnWindows&amp;quot;, true);

var sw = Stopwatch.StartNew();
using var connection = new SqlConnection(&amp;quot;Server=.;Database=master;Integrated Security=false;User ID=sa;Password=SomePassword;Pooling=true;Max Pool Size=1024;TrustServerCertificate=true;Timeout=0&amp;quot;);
await connection.OpenAsync();

using var cmd = connection.CreateCommand();
cmd.CommandText = &amp;quot;SELECT 1&amp;quot;;
await cmd.ExecuteNonQueryAsync();
Console.WriteLine($&amp;quot;Connection established successfully in {sw.ElapsedMilliseconds}ms. Press any key to continue...&amp;quot;);
Console.ReadKey();
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;SqlClient should be able to establish a connection with &lt;code&gt;Timeout=0&lt;/code&gt;, just like in previous verions&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;Microsoft.Data.SqlClient 5.0
.NET target: .NET 6.0
SQL Server version: SQL Server 2017
Operating system: CentOS 7, Windows 10&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The problem is because while waiting for the dns, the timeout passed there is the default &lt;code&gt;TimeSpan&lt;/code&gt;, which is 0, and that's why it fails immediately (it should have been -1):&lt;/p&gt;
&lt;p&gt;https://github.com/dotnet/SqlClient/blob/bd21d762e2362256aab49866e5ad9797b4a037b4/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SNI/SNITcpHandle.cs#L150-L159&lt;/p&gt;
&lt;p&gt;https://github.com/dotnet/SqlClient/blob/bd21d762e2362256aab49866e5ad9797b4a037b4/src/Microsoft.Data.SqlClient/netcore/src/Microsoft/Data/SqlClient/SNI/SNITcpHandle.cs#L362&lt;/p&gt;
&lt;p&gt;This was introduced in #1578.&lt;/p&gt;
</description>
      <pubDate>Mon, 22 Aug 2022 09:24:06 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1732</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1732</link>
      <title>Issue: i'm confused.. - @koolinoor</title>
      <description>&lt;p&gt;is that supposed to be like a new System.Data.SqlClient ? or why does it share the same namespace,
except have a tons of unnecessary assemblies attached to it?&lt;/p&gt;
&lt;p&gt;congrats!&lt;/p&gt;
</description>
      <pubDate>Sun, 21 Aug 2022 14:29:57 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1731</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1731</link>
      <title>Issue: InvalidOperationException: Internal connection fatal error when calling SQL2022 from Linux docker container - @eshmurus</title>
      <description>&lt;p&gt;I am trying to connect to sql2022 from a docker Linux container and am getting the error as described below. This code is working fine with sql2019&lt;/p&gt;
&lt;p&gt;Docker Linux container: base image is aspnet:6.0
SQL Server: Windows Server 2022 Standard (10.0), Version is 16.0.700.4&lt;/p&gt;
&lt;p&gt;Version of System.Data.SqlClient is 4.8.3&lt;/p&gt;
&lt;p&gt;code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;using System.Data.SqlClient;
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddRazorPages();
var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler(&amp;quot;/Error&amp;quot;);
}
app.UseStaticFiles();
app.UseRouting();
app.UseAuthorization();
app.MapRazorPages();
app.MapGet(&amp;quot;&amp;quot;, () =&amp;gt;
{
    var _config = app.Services.GetRequiredService&amp;lt;IConfiguration&amp;gt;();
    var connectionstring = _config.GetConnectionString(&amp;quot;SQLServer&amp;quot;);
    using (SqlConnection conn = new SqlConnection(connectionstring))
    {
        conn.Open();
    }   
});
app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stack trace:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;InvalidOperationException: Internal connection fatal error.
System.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, out bool dataReady)
System.Data.SqlClient.TdsParser.Run(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj)
System.Data.SqlClient.SqlInternalConnectionTds.CompleteLogin(bool enlistOK)
System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(ServerInfo serverInfo, string newPassword, SecureString newSecurePassword, bool ignoreSniOpenTimeout, TimeoutTimer timeout, bool withFailover)
System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(ServerInfo serverInfo, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance, SqlConnectionString connectionOptions, SqlCredential credential, TimeoutTimer timeout)
System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(TimeoutTimer timeout, SqlConnectionString connectionOptions, SqlCredential credential, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance)
System.Data.SqlClient.SqlInternalConnectionTds..ctor(DbConnectionPoolIdentity identity, SqlConnectionString connectionOptions, SqlCredential credential, object providerInfo, string newPassword, SecureString newSecurePassword, bool redirectedUserInstance, SqlConnectionString userConnectionOptions, SessionData reconnectSessionData, bool applyTransientFaultHandling, string accessToken)
System.Data.SqlClient.SqlConnectionFactory.CreateConnection(DbConnectionOptions options, DbConnectionPoolKey poolKey, object poolGroupProviderInfo, DbConnectionPool pool, DbConnection owningConnection, DbConnectionOptions userOptions)
System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(DbConnectionPool pool, DbConnection owningObject, DbConnectionOptions options, DbConnectionPoolKey poolKey, DbConnectionOptions userOptions)
System.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, uint waitForMultipleObjectsTimeout, bool allowCreate, bool onlyOneCheckConnection, DbConnectionOptions userOptions, out DbConnectionInternal connection)
System.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource&amp;lt;DbConnectionInternal&amp;gt; retry, DbConnectionOptions userOptions, out DbConnectionInternal connection)
System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource&amp;lt;DbConnectionInternal&amp;gt; retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, out DbConnectionInternal connection)
System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource&amp;lt;DbConnectionInternal&amp;gt; retry, DbConnectionOptions userOptions)
System.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource&amp;lt;DbConnectionInternal&amp;gt; retry)
System.Data.SqlClient.SqlConnection.Open()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;P.S. Microsoft.Data.SqlClient (5.0.0) doesn't work as well - returns the error: Value cannot be null. (Parameter 'source')&lt;/p&gt;
</description>
      <pubDate>Fri, 19 Aug 2022 10:47:29 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1725</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1725</link>
      <title>Issue: Crash in SNINativeMethodWrapper.SNIOpenSyncEx - @marcomorain</title>
      <description>&lt;p&gt;Our Azure App Service is crashing several times per day, and the callstack indicates that SqlClient is the cause. Since the exception is a System.AccessViolationException, we are having a hard time tracking down the cause.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Exception Code:	0xC0000005
Exception Information:	The thread tried to read from or write to a virtual address for which it does not have the appropriate access.
Exception message: &amp;quot;Attempted to read or write protected memory. This is often an indication that other memory is corrupt.&amp;quot;
Stack trace:
 	SNIOpenSync()	Unknown
 	Connect()	Unknown
 	SNIOpenSyncEx()	Unknown
 	SNIOpenSyncExWrapper()	Unknown
 	[Managed to Native Transition]	
 	SNINativeMethodWrapper.SNIOpenSyncEx(consumerInfo, constring, pConn, spnBuffer, instanceName, fOverrideCache, fSync, timeout, fParallel, transparentNetworkResolutionStateNo, totalTimeout, isAzureSqlServerEndpoint)	Unknown
 	System.Data.SqlClient.SNIHandle.SNIHandle(myInfo, serverName, spnBuffer, ignoreSniOpenTimeout, timeout, instanceName, flushCache, fSync, fParallel, transparentNetworkResolutionState, totalTimeout)	Unknown
 	System.Data.SqlClient.TdsParserStateObject.CreatePhysicalSNIHandle(serverName, ignoreSniOpenTimeout, timerExpire, instanceName, spnBuffer, flushCache, async, fParallel, transparentNetworkResolutionState, totalTimeout)	Unknown
 	System.Data.SqlClient.TdsParser.Connect(serverInfo, connHandler, ignoreSniOpenTimeout, timerExpire, encrypt, trustServerCert, integratedSecurity, withFailover, isFirstTransparentAttempt, authType, disableTnir, sqlAuthProviderManager)	Unknown
&amp;gt;	System.Data.SqlClient.SqlInternalConnectionTds.AttemptOneLogin(serverInfo, newPassword, newSecurePassword, ignoreSniOpenTimeout, timeout, withFailover, isFirstTransparentAttempt, disableTnir)	Unknown
 	System.Data.SqlClient.SqlInternalConnectionTds.LoginNoFailover(serverInfo, newPassword, newSecurePassword, redirectedUserInstance, connectionOptions, credential, timeout)	Unknown
 	System.Data.SqlClient.SqlInternalConnectionTds.OpenLoginEnlist(timeout, connectionOptions, credential, newPassword, newSecurePassword, redirectedUserInstance)	Unknown
 	System.Data.SqlClient.SqlInternalConnectionTds.SqlInternalConnectionTds(identity, connectionOptions, credential, providerInfo, newPassword, newSecurePassword, redirectedUserInstance, userConnectionOptions, reconnectSessionData, pool, accessToken, applyTransientFaultHandling, sqlAuthProviderManager)	Unknown
 	System.Data.SqlClient.SqlConnectionFactory.CreateConnection(options, poolKey, poolGroupProviderInfo, pool, owningConnection, userOptions)	Unknown
 	System.Data.ProviderBase.DbConnectionFactory.CreatePooledConnection(pool, owningObject, options, poolKey, userOptions)	Unknown
 	System.Data.ProviderBase.DbConnectionPool.CreateObject(owningObject, userOptions, oldConnection)	Unknown
 	System.Data.ProviderBase.DbConnectionPool.UserCreateRequest(owningObject, userOptions, oldConnection)	Unknown
 	System.Data.ProviderBase.DbConnectionPool.TryGetConnection(owningObject, waitForMultipleObjectsTimeout, allowCreate, onlyOneCheckConnection, userOptions, connection)	Unknown
 	System.Data.ProviderBase.DbConnectionPool.TryGetConnection(owningObject, retry, userOptions, connection)	Unknown
 	System.Data.ProviderBase.DbConnectionFactory.TryGetConnection(owningConnection, retry, userOptions, oldConnection, connection)	Unknown
 	System.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(outerConnection, connectionFactory, retry, userOptions)	Unknown
 	System.Data.SqlClient.SqlConnection.TryOpenInner(retry)	Unknown
 	System.Data.SqlClient.SqlConnection.TryOpen(retry)	Unknown
 	System.Data.SqlClient.SqlConnection.Open()	Unknown
 	System.Data.Entity.Infrastructure.Interception.InternalDispatcher&amp;lt;System.Data.Entity.Infrastructure.Interception.IDbConnectionInterceptor&amp;gt;.Dispatch&amp;lt;System.Data.Common.DbConnection, System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext&amp;gt;(target, operation, interceptionContext, executing, executed)	Unknown
 	System.Data.Entity.Infrastructure.Interception.DbConnectionDispatcher.Open(connection, interceptionContext)	Unknown
 	System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute.AnonymousMethod__0()	Unknown
 	System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute&amp;lt;object&amp;gt;(operation)	Unknown
 	System.Data.Entity.Core.EntityClient.EntityConnection.Open()	Unknown
 	System.Data.Entity.Core.Objects.ObjectContext.EnsureConnection(shouldMonitorTransactions)	Unknown
 	System.Data.Entity.Core.Objects.ObjectContext.ExecuteInTransaction&amp;lt;System.__Canon&amp;gt;(func, executionStrategy, startLocalTransaction, releaseConnectionOnSuccess)	Unknown
 	[Native to Managed Transition]	
 	[Managed to Native Transition]	
 	System.Data.Entity.Core.Objects.ObjectQuery&amp;lt;int&amp;gt;.GetResults.AnonymousMethod__5()	Unknown
 	System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute&amp;lt;System.Data.Entity.Core.Objects.ObjectResult&amp;lt;int&amp;gt;&amp;gt;(operation)	Unknown
 	System.Data.Entity.Core.Objects.ObjectQuery&amp;lt;int&amp;gt;.GetResults(forMergeOption)	Unknown
 	System.Data.Entity.Core.Objects.ObjectQuery&amp;lt;int&amp;gt;.System.Collections.Generic.IEnumerable&amp;lt;T&amp;gt;.GetEnumerator.AnonymousMethod__0()	Unknown
 	System.Data.Entity.Internal.LazyEnumerator&amp;lt;int&amp;gt;.MoveNext()	Unknown
 	System.Collections.Generic.List&amp;lt;int&amp;gt;.List(collection)	Unknown
 	System.Linq.Enumerable.ToList&amp;lt;int&amp;gt;(source)	Unknown
 	Flipdish.Domain.DomainModel.Services.Webhook.WebhookSubscriptionOwnerAuthorization.GetAuthorizedByMenuId(menuId)	Unknown
 	Flipdish.Domain.DomainModel.Services.ServiceBus.Subscribers.HydraSignalRFlipdishEventSubscriber.HandleMessage(message)	Unknown
 	Flipdish.ServiceBus.Abstractions.MessageQueueSubscriber&amp;lt;Flipdish.Domain.DomainModel.Services.ServiceBus.Messages.FlipdishEventMessage&amp;gt;.HandleMessage(message)	Unknown
 	Microsoft.ServiceBus.Messaging.MessageReceivePump.BeginTaskCallback(message, callback, state)	Unknown
 	Microsoft.ServiceBus.Messaging.MessageReceivePump.DispatchAsyncResult.GetAsyncSteps.AnonymousMethod__8_0(thisPtr, t, c, s)	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.MessageReceivePump.DispatchAsyncResult&amp;gt;.EnumerateSteps(state)	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.MessageReceivePump.DispatchAsyncResult&amp;gt;.Start()	Unknown
 	Microsoft.ServiceBus.Messaging.MessageReceivePump.PumpAsyncResult.GetAsyncSteps()	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.MessageReceivePump.PumpAsyncResult&amp;gt;.EnumerateSteps(state)	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.MessageReceivePump.PumpAsyncResult&amp;gt;.StepCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.AsyncCompletionWrapperCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.TryComplete(didCompleteSynchronously, exception)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.Complete(didCompleteSynchronously, e)	Unknown
 	Microsoft.ServiceBus.Messaging.MessageReceiver.RetryReceiveAsyncResult.GetAsyncSteps()	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.MessageReceiver.RetryReceiveAsyncResult&amp;gt;.EnumerateSteps(state)	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.MessageReceiver.RetryReceiveAsyncResult&amp;gt;.StepCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.AsyncCompletionWrapperCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.TryComplete(didCompleteSynchronously, exception)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.Complete(didCompleteSynchronously, e)	Unknown
 	Microsoft.ServiceBus.Messaging.Sbmp.SbmpMessageReceiver.ReceiveAsyncResult.GetAsyncSteps()	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.Sbmp.SbmpMessageReceiver.ReceiveAsyncResult&amp;gt;.EnumerateSteps(state)	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.Sbmp.SbmpMessageReceiver.ReceiveAsyncResult&amp;gt;.StepCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.AsyncCompletionWrapperCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.TryComplete(didCompleteSynchronously, exception)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.Complete(didCompleteSynchronously, e)	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.Channels.ReconnectBindingElement.ReconnectChannelFactory&amp;lt;System.ServiceModel.Channels.IRequestSessionChannel&amp;gt;.RequestSessionChannel.RequestAsyncResult&amp;gt;.EnumerateSteps(state)	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.Channels.ReconnectBindingElement.ReconnectChannelFactory&amp;lt;System.ServiceModel.Channels.IRequestSessionChannel&amp;gt;.RequestSessionChannel.RequestAsyncResult&amp;gt;.StepCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.AsyncCompletionWrapperCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.TryComplete(didCompleteSynchronously, exception)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.Complete(didCompleteSynchronously, e)	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.Sbmp.RedirectBindingElement.RedirectContainerChannelFactory&amp;lt;System.ServiceModel.Channels.IRequestSessionChannel&amp;gt;.RedirectContainerSessionChannel.RequestAsyncResult&amp;gt;.EnumerateSteps(state)	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.Sbmp.RedirectBindingElement.RedirectContainerChannelFactory&amp;lt;System.ServiceModel.Channels.IRequestSessionChannel&amp;gt;.RedirectContainerSessionChannel.RequestAsyncResult&amp;gt;.StepCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.AsyncCompletionWrapperCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.TryComplete(didCompleteSynchronously, exception)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.Complete(didCompleteSynchronously, e)	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.Channels.ReconnectBindingElement.ReconnectChannelFactory&amp;lt;System.ServiceModel.Channels.IRequestSessionChannel&amp;gt;.RequestSessionChannel.RequestAsyncResult&amp;gt;.EnumerateSteps(state)	Unknown
 	Microsoft.ServiceBus.Messaging.IteratorAsyncResult&amp;lt;Microsoft.ServiceBus.Messaging.Channels.ReconnectBindingElement.ReconnectChannelFactory&amp;lt;System.ServiceModel.Channels.IRequestSessionChannel&amp;gt;.RequestSessionChannel.RequestAsyncResult&amp;gt;.StepCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.AsyncCompletionWrapperCallback(result)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.TryComplete(didCompleteSynchronously, exception)	Unknown
 	Microsoft.ServiceBus.Common.AsyncResult.Complete(didCompleteSynchronously, e)	Unknown
 	Microsoft.ServiceBus.Messaging.Sbmp.DuplexRequestBindingElement.DuplexRequestSessionChannel.DuplexCorrelationAsyncResult.TryComplete(completedSynchronously, exception)	Unknown
 	Microsoft.ServiceBus.Common.IOThreadScheduler.ScheduledOverlapped.IOCallback(errorCode, numBytes, nativeOverlappedCallback)	Unknown
 	Microsoft.ServiceBus.Common.Fx.IOCompletionThunk.UnhandledExceptionFrame(error, bytesRead, nativeOverlapped)	Unknown
 	System.Threading._IOCompletionCallback.PerformIOCompletionCallback(errorCode, numBytes, pOVERLAP)	Unknown
 	[Native to Managed Transition]	
 	BaseThreadInitThunk()	Unknown
 	RtlUserThreadStart()	Unknown


&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;p&gt;We don't have a reproducable test case. We run ~10 instances of this application on an Azure App Service, and the crash happens ~3 times per day.&lt;/p&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;I would not expect this exception to be thrown.&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;Microsoft.Data.SqlClient  version=&amp;quot;1.1.3&amp;quot; targetFramework=&amp;quot;net462&amp;quot;
Microsoft.Data.SqlClient.SNI version=&amp;quot;1.1.0&amp;quot; targetFramework=&amp;quot;net462&amp;quot;
SNI.dll	C:\home\site\wwwroot\bin\x64\SNI.dll	1.1.0.0
.NET Framework 4.6.2&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;Dump information&lt;/summary&gt;
&lt;p&gt;
&lt;pre&gt;&lt;code&gt;
Dump Summary
------------
Dump File:	w3wp__azr-eun-production-background-appservice-01__f6fd__PID__8368__Date__08_03_2022__Time_01_40_38PM__956__Second_Chance_Exception_C0000005.dmp : C:\Users\micro\Downloads\w3wp__azr-eun-production-background-appservice-01__f6fd__PID__8368__Date__08_03_2022__Time_01_40_38PM__956__Second_Chance_Exception_C0000005.dmp
Last Write Time:	03/08/2022 14:40:40
Process Name:	w3wp.exe : C:\Windows\system32\inetsrv\w3wp.exe
Process Architecture:	x64
Exception Code:	0xC0000005
Exception Information:	The thread tried to read from or write to a virtual address for which it does not have the appropriate access.
Heap Information:	Present

System Information
------------------
OS Version:	10.0.14393
CLR Version(s):	4.8.4480.0

Modules
-------
Module Name	Module Path	Module Version
-----------	-----------	--------------
w3wp.exe	C:\Windows\system32\inetsrv\w3wp.exe	6.2.14393.0
ntdll.dll	C:\Windows\System32\ntdll.dll	6.2.14393.5006
kernel32.dll	C:\Windows\System32\kernel32.dll	6.2.14393.5066
KERNELBASE.dll	C:\Windows\System32\KERNELBASE.dll	6.2.14393.5066
msvcrt.dll	C:\Windows\System32\msvcrt.dll	7.0.14393.2457
combase.dll	C:\Windows\System32\combase.dll	6.2.14393.5066
ucrtbase.dll	C:\Windows\System32\ucrtbase.dll	6.2.14393.3659
picohelper.dll	C:\Windows\System32\picohelper.dll	99.0.0.510
rpcrt4.dll	C:\Windows\System32\rpcrt4.dll	6.2.14393.5066
bcryptPrimitives.dll	C:\Windows\System32\bcryptPrimitives.dll	6.2.14393.4770
iisutil.dll	C:\Windows\System32\inetsrv\iisutil.dll	6.2.14393.4169
advapi32.dll	C:\Windows\System32\advapi32.dll	6.2.14393.4886
sechost.dll	C:\Windows\System32\sechost.dll	6.2.14393.5006
ws2_32.dll	C:\Windows\System32\ws2_32.dll	6.2.14393.3241
normaliz.dll	C:\Windows\System32\normaliz.dll	6.2.14393.0
crypt32.dll	C:\Windows\System32\crypt32.dll	6.2.14393.4946
IPHLPAPI.DLL	C:\Windows\System32\IPHLPAPI.DLL	6.2.14393.2339
msasn1.dll	C:\Windows\System32\msasn1.dll	6.2.14393.0
user32.dll	C:\Windows\System32\user32.dll	6.2.14393.4169
win32u.dll	C:\Windows\System32\win32u.dll	6.2.14393.0
version.dll	C:\Windows\System32\version.dll	6.2.14393.0
gdi32.dll	C:\Windows\System32\gdi32.dll	6.2.14393.4169
gdi32full.dll	C:\Windows\System32\gdi32full.dll	6.2.14393.4886
ole32.dll	C:\Windows\System32\ole32.dll	6.2.14393.4651
oleaut32.dll	C:\Windows\System32\oleaut32.dll	6.2.14393.4402
msvcp_win.dll	C:\Windows\System32\msvcp_win.dll	6.2.14393.2999
msvcp140.dll	C:\Windows\System32\msvcp140.dll	14.30.30704.0
VCRUNTIME140.dll	C:\Windows\System32\VCRUNTIME140.dll	14.30.30704.0
VCRUNTIME140_1.dll	C:\Windows\System32\VCRUNTIME140_1.dll	14.30.30704.0
kernel.appcore.dll	C:\Windows\System32\kernel.appcore.dll	6.2.14393.2312
ntmarta.dll	C:\Windows\System32\ntmarta.dll	6.2.14393.0
w3wphost.dll	C:\Windows\System32\inetsrv\w3wphost.dll	6.2.14393.1794
nativerd.dll	C:\Windows\System32\inetsrv\nativerd.dll	6.2.14393.4169
ncrypt.dll	C:\Windows\System32\ncrypt.dll	6.2.14393.4046
bcrypt.dll	C:\Windows\System32\bcrypt.dll	6.2.14393.4583
xmllite.dll	C:\Windows\System32\xmllite.dll	6.2.14393.3143
ktmw32.dll	C:\Windows\System32\ktmw32.dll	6.2.14393.0
ntasn1.dll	C:\Windows\System32\ntasn1.dll	6.2.14393.0
iisres.dll	C:\Windows\System32\inetsrv\iisres.dll	6.2.14393.0
cryptsp.dll	C:\Windows\System32\cryptsp.dll	6.2.14393.2969
rsaenh.dll	C:\Windows\System32\rsaenh.dll	6.2.14393.4467
CRYPTBASE.dll	C:\Windows\System32\CRYPTBASE.dll	6.2.14393.0
clbcatq.dll	C:\Windows\System32\clbcatq.dll	2001.12.10941.16384
mlang.dll	C:\Windows\System32\mlang.dll	6.2.14393.4169
mscoree.dll	C:\Windows\System32\mscoree.dll	6.2.14393.0
mscoreei.dll	C:\Windows\Microsoft.NET\Framework64\v4.0.30319\mscoreei.dll	4.8.4180.0
shlwapi.dll	C:\Windows\System32\shlwapi.dll	6.2.14393.4169
clr.dll	C:\Windows\Microsoft.NET\Framework64\v4.0.30319\clr.dll	4.8.4480.0
VCRUNTIME140_CLR0400.dll	C:\Windows\System32\VCRUNTIME140_CLR0400.dll	14.10.25028.0
ucrtbase_clr0400.dll	C:\Windows\System32\ucrtbase_clr0400.dll	14.10.25028.0
iiscore.dll	C:\Windows\System32\inetsrv\iiscore.dll	6.2.14393.3241
sspicli.dll	C:\Windows\System32\sspicli.dll	6.2.14393.5006
w3tp.dll	C:\Windows\System32\inetsrv\w3tp.dll	6.2.14393.0
w3dt.dll	C:\Windows\System32\inetsrv\w3dt.dll	6.2.14393.2758
httpapi.dll	C:\Windows\System32\httpapi.dll	6.2.14393.1532
NapiNSP.dll	C:\Windows\System32\NapiNSP.dll	6.2.14393.0
mswsock.dll	C:\Windows\System32\mswsock.dll	6.2.14393.3659
dnsapi.dll	C:\Windows\System32\dnsapi.dll	6.2.14393.4350
nsi.dll	C:\Windows\System32\nsi.dll	6.2.14393.3297
winrnr.dll	C:\Windows\System32\winrnr.dll	6.2.14393.0
nlaapi.dll	C:\Windows\System32\nlaapi.dll	6.2.14393.3808
rasadhlp.dll	C:\Windows\System32\rasadhlp.dll	6.2.14393.0
EnvVarSetModule.dll	C:\Program Files\IIS\Microsoft Web Hosting Framework\DWASMod\EnvVarSetModule.dll	10.0.10011.16384
loghttp.dll	C:\Windows\System32\inetsrv\loghttp.dll	6.2.14393.0
cachuri.dll	C:\Windows\System32\inetsrv\cachuri.dll	6.2.14393.0
cachfile.dll	C:\Windows\System32\inetsrv\cachfile.dll	6.2.14393.0
cachtokn.dll	C:\Windows\System32\inetsrv\cachtokn.dll	6.2.14393.0
cachhttp.dll	C:\Windows\System32\inetsrv\cachhttp.dll	6.2.14393.0
compdyn.dll	C:\Windows\System32\inetsrv\compdyn.dll	6.2.14393.0
compstat.dll	C:\Windows\System32\inetsrv\compstat.dll	6.2.14393.0
defdoc.dll	C:\Windows\System32\inetsrv\defdoc.dll	6.2.14393.0
dirlist.dll	C:\Windows\System32\inetsrv\dirlist.dll	6.2.14393.0
protsup.dll	C:\Windows\System32\inetsrv\protsup.dll	6.2.14393.0
redirect.dll	C:\Windows\System32\inetsrv\redirect.dll	6.2.14393.0
iis_ssi.dll	C:\Windows\System32\inetsrv\iis_ssi.dll	6.2.14393.0
static.dll	C:\Windows\System32\inetsrv\static.dll	6.2.14393.0
authanon.dll	C:\Windows\System32\inetsrv\authanon.dll	6.2.14393.0
iprestr.dll	C:\Windows\System32\inetsrv\iprestr.dll	6.2.14393.0
modrqflt.dll	C:\Windows\System32\inetsrv\modrqflt.dll	6.2.14393.3024
custerr.dll	C:\Windows\System32\inetsrv\custerr.dll	6.2.14393.953
iisetw.dll	C:\Windows\System32\inetsrv\iisetw.dll	6.2.14393.0
iisfreb.dll	C:\Windows\System32\inetsrv\iisfreb.dll	6.2.14393.0
iisreqs.dll	C:\Windows\System32\inetsrv\iisreqs.dll	6.2.14393.0
isapi.dll	C:\Windows\System32\inetsrv\isapi.dll	6.2.14393.2758
filter.dll	C:\Windows\System32\inetsrv\filter.dll	6.2.14393.0
cgi.dll	C:\Windows\System32\inetsrv\cgi.dll	6.2.14393.2758
iisfcgi.dll	C:\Windows\System32\inetsrv\iisfcgi.dll	6.2.14393.0
webengine4.dll	C:\Windows\Microsoft.NET\Framework64\v4.0.30319\webengine4.dll	4.8.4494.0
psapi.dll	C:\Windows\System32\psapi.dll	6.2.14393.0
userenv.dll	C:\Windows\System32\userenv.dll	6.2.14393.4583
profapi.dll	C:\Windows\System32\profapi.dll	6.2.14393.0
SHCore.dll	C:\Windows\System32\SHCore.dll	6.2.14393.5066
validcfg.dll	C:\Windows\System32\inetsrv\validcfg.dll	6.2.14393.0
warmup.dll	C:\Windows\System32\inetsrv\warmup.dll	6.2.14393.0
iiswsock.dll	C:\Windows\System32\inetsrv\iiswsock.dll	6.2.14393.0
websocket.dll	C:\Windows\System32\websocket.dll	6.2.14393.3503
rewrite.dll	C:\Windows\System32\inetsrv\rewrite.dll	7.1.1949.0
aspnetcorev2.dll	C:\Program Files\IIS\Asp.Net Core Module\V2\aspnetcorev2.dll	13.1.19331.0
shell32.dll	C:\Windows\System32\shell32.dll	6.2.14393.5066
cfgmgr32.dll	C:\Windows\System32\cfgmgr32.dll	6.2.14393.0
windows.storage.dll	C:\Windows\System32\windows.storage.dll	6.2.14393.5066
powrprof.dll	C:\Windows\System32\powrprof.dll	6.2.14393.0
aspnetcore.dll	C:\Windows\System32\inetsrv\aspnetcore.dll	12.2.18346.1
winhttp.dll	C:\Windows\System32\winhttp.dll	6.2.14393.5006
ondemandconnroutehelper.dll	C:\Windows\System32\ondemandconnroutehelper.dll	6.2.14393.4169
ModSecurityIIS.dll	C:\Windows\System32\inetsrv\ModSecurityIIS.dll	0.0.0.0
libapr-1.dll	C:\Windows\System32\inetsrv\libapr-1.dll	1.5.1.0
libaprutil-1.dll	C:\Windows\System32\inetsrv\libaprutil-1.dll	1.5.3.0
pcre.dll	C:\Windows\System32\inetsrv\pcre.dll	0.0.0.0
libxml2.dll	C:\Windows\System32\inetsrv\libxml2.dll	0.0.0.0
lua5.1.dll	C:\Windows\System32\inetsrv\lua5.1.dll	0.0.0.0
msvcr120.dll	C:\Windows\System32\msvcr120.dll	12.0.40660.0
msvcr110.dll	C:\Windows\System32\msvcr110.dll	11.0.51106.1
libapriconv-1.dll	C:\Windows\System32\inetsrv\libapriconv-1.dll	1.2.1.0
wsock32.dll	C:\Windows\System32\wsock32.dll	6.2.14393.0
iisnode.dll	C:\Program Files\iisnode\iisnode.dll	0.2.27.0
requestRouter.dll	C:\Program Files\IIS\Application Request Routing\requestRouter.dll	7.1.1994.0
pdh.dll	C:\Windows\System32\pdh.dll	6.2.14393.3930
gzip.dll	C:\Program Files\IIS\Application Request Routing\gzip.dll	7.1.1994.0
arrhelper.dll	C:\Program Files\IIS\Microsoft Web Hosting Framework\ARRHelper\arrhelper.dll	0.0.0.0
diprestr.dll	C:\Windows\System32\inetsrv\diprestr.dll	6.2.14393.0
httpplatformhandler.dll	C:\Windows\System32\inetsrv\httpplatformhandler.dll	1.0.1866.16
msxml6.dll	C:\Windows\System32\msxml6.dll	6.30.14393.5006
pipestat.dll	C:\Program Files\IIS\Microsoft Web Hosting Framework\DWASMod\pipestat.dll	10.0.10011.16384
ProcessMonitoring.dll	C:\Program Files\IIS\Microsoft Web Hosting Framework\DWASMod\ProcessMonitoring.dll	10.0.10011.16384
appIdModule.dll	C:\Program Files\IIS\Microsoft Web Hosting Framework\DWASMod\appIdModule.dll	10.0.10011.16384
WebSocketMonitoringModule.dll	C:\Program Files\IIS\Microsoft Web Hosting Framework\DWASMod\WebSocketMonitoringModule.dll	10.0.10011.16384
dwasmod.dll	C:\Program Files\IIS\Microsoft Web Hosting Framework\DWASMod\dwasmod.dll	10.0.10011.16384
azureSla.dll	C:\Windows\System32\inetsrv\azureSla.dll	10.0.10011.16384
aspnet_filter.dll	C:\Windows\Microsoft.NET\Framework64\v4.0.30319\aspnet_filter.dll	4.8.3761.0
wbhst_pm.dll	C:\Windows\System32\inetsrv\wbhst_pm.dll	6.2.14393.2339
webengine.dll	C:\Windows\Microsoft.NET\Framework64\v4.0.30319\webengine.dll	4.8.4494.0
Datadog.Trace.ClrProfiler.Native.dll	C:\home\SiteExtensions\Datadog.AzureAppServices.DotNet\v2_11_000\Tracer\win-x64\Datadog.Trace.ClrProfiler.Native.dll	2.11.0.0
mscorlib.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\mscorlib\69b0bde39fe503f232a82a1d8860827c\mscorlib.ni.dll	4.8.4480.0
System.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System\6296b25f171a10d692e706134315c276\System.ni.dll	4.8.4494.0
System.Core.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Core\d55562ed899da3b1a519259199091b4a\System.Core.ni.dll	4.8.4480.0
System.Web.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Web\45b99d272e4f34b122ff52816a75da84\System.Web.ni.dll	4.8.4494.0
sxs.dll	C:\Windows\System32\sxs.dll	6.2.14393.4169
clrjit.dll	C:\Windows\Microsoft.NET\Framework64\v4.0.30319\clrjit.dll	4.8.4480.0
System.Web.ApplicationServices.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Web.8dc504e4#\136ffd1e8835ca2c329b574d9caa9600\System.Web.ApplicationServices.ni.dll	4.8.4494.0
System.Configuration.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Configuration\7b2bd6581194ca657f9d37987b849f60\System.Configuration.ni.dll	4.8.4190.0
System.Xml.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Xml\46d3311b1d9a482b4718041928190d70\System.Xml.ni.dll	4.8.3761.0
System.Web.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Web\5c08443b4e4122ffb392529fcfa76f49\System.Web.ni.dll	4.8.4494.0
System.Data.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Data\4212734b801198831e2ebc804fdeb50f\System.Data.ni.dll	4.8.4465.0
System.EnterpriseServices.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Ente96d83b35#\8318de65b78950fbebe15c6987d9efb3\System.EnterpriseServices.ni.dll	4.8.3761.0
System.Drawing.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Drawing\f77e88474887296b0e035c84f6d6ffb2\System.Drawing.ni.dll	4.8.4395.0
System.ComponentModel.DataAnnotations.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Comp46f2b404#\96ef24b83b75e0b5a7db1ab0940e811c\System.ComponentModel.DataAnnotations.ni.dll	4.8.3761.0
System.DirectoryServices.Protocols.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Dire5d62f0a2#\07e4756d622d54d8653746ad20edaca5\System.DirectoryServices.Protocols.ni.dll	4.8.3761.0
System.DirectoryServices.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Dired13b18a9#\53158d9ce16f758eca780339ef6d0656\System.DirectoryServices.ni.dll	4.8.3761.0
Microsoft.Build.Utilities.v4.0.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\Microsoft.B83e9cb53#\92318e7a296919e6a4a6525ff782b480\Microsoft.Build.Utilities.v4.0.ni.dll	4.8.3761.0
System.Runtime.Caching.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Runt19c51595#\6a67b27ce54af49d06df5e1f860e566f\System.Runtime.Caching.ni.dll	4.8.3761.0
Microsoft.Build.Framework.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\Microsoft.B3325a29b#\e228bae6884c587e4c00ebe39aa45283\Microsoft.Build.Framework.ni.dll	14.0.23107.0
System.Web.RegularExpressions.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Web.82d5542b#\cc6c4a14cbe678bb85d479cfff799b00\System.Web.RegularExpressions.ni.dll	4.8.3761.0
System.Design.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Design\d6f1ebebda2cc56e01379fe33a28b180\System.Design.ni.dll	4.8.3761.0
System.Security.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Security\7d00421f7e4244aee6106aefa9d5dfde\System.Security.ni.dll	4.8.4261.0
System.ServiceProcess.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Serv759bfb78#\9f3c3c968cbc2d15daa7815c20d558ec\System.ServiceProcess.ni.dll	4.8.3761.0
System.Web.Services.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Web.Services\fa0a0c046f54643dd181c234941a4651\System.Web.Services.ni.dll	4.8.3761.0
Microsoft.Build.Tasks.v4.0.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\Microsoft.Baa2ca56b#\4981241d64b5543f149a3dce15dad7c2\Microsoft.Build.Tasks.v4.0.ni.dll	4.8.3761.0
System.Windows.Forms.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Windows.Forms\5288a6f92559d3a1bd19bb448723abd0\System.Windows.Forms.ni.dll	4.8.4494.0
System.Data.SqlXml.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Data.SqlXml\cad00a8e0a163fbe3ab234de58e1fa27\System.Data.SqlXml.ni.dll	4.8.3761.0
System.Numerics.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Numerics\2c494fe99d879a94cb4807aea31824a0\System.Numerics.ni.dll	4.8.3761.0
System.Transactions.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Transactions\1c470074d54f6351508908b88fdcde76\System.Transactions.ni.dll	4.8.3761.0
System.Runtime.Remoting.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Runt73a1fc9d#\62e0032cb59ab61e481b17f37793e3a3\System.Runtime.Remoting.ni.dll	4.8.3761.0
System.Xaml.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Xaml\6d3b9f266a99c8be33d47de79e7a3d70\System.Xaml.ni.dll	4.8.4480.0
System.Drawing.Design.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Draw0a54d252#\ac16683c41051c33a8050be673af4d9d\System.Drawing.Design.ni.dll	4.8.4210.0
Accessibility.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\Accessibility\90311fba1b7eec7044513ea9f1fa223d\Accessibility.ni.dll	4.8.3761.0
System.Data.OracleClient.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Data86569bbf#\164f8b6c6857c378f079abcecdafd68a\System.Data.OracleClient.ni.dll	4.8.3761.0
System.Runtime.Serialization.Formatters.Soap.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Runt9064068c#\b5f416b9b428183368c5f0ec236bf030\System.Runtime.Serialization.Formatters.Soap.ni.dll	4.8.3761.0
System.Configuration.Install.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Confe64a9051#\52d4cc06636793b53b1efb99fe0c8f96\System.Configuration.Install.ni.dll	4.8.3761.0
System.Deployment.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Deployment\aebf5d23bbf2fed5bfe82bbfc3c69650\System.Deployment.ni.dll	4.8.4290.0
System.Runtime.Serialization.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Runteb92aa12#\2b5d4806bd8a767688bbe182f8c5c38c\System.Runtime.Serialization.ni.dll	4.8.4465.0
SMDiagnostics.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\SMDiagnostics\ecec2e7c81e4d397fbf47981feeaff8e\SMDiagnostics.ni.dll	4.8.4465.0
System.ServiceModel.Internals.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Servd1dec626#\751e6d9a4ce40a4159e6baf70a2b3564\System.ServiceModel.Internals.ni.dll	4.8.4465.0
Microsoft.JScript.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\Microsoft.JScript\fd942801042c09b8c21d22d8c6f69266\Microsoft.JScript.ni.dll	14.8.3761.0
System.Web.WebPages.Deployment.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Web.b3fa0d97#\0e56c2bf7b6d4fed6ab7d9d7a00aef15\System.Web.WebPages.Deployment.ni.dll	1.0.20105.407
wldp.dll	C:\Windows\System32\wldp.dll	6.2.14393.5006
wintrust.dll	C:\Windows\System32\wintrust.dll	6.2.14393.4946
amsi.dll	C:\Windows\System32\amsi.dll	6.2.14393.4169
System.Data.dll	C:\Windows\Microsoft.Net\assembly\GAC_64\System.Data\v4.0_4.0.0.0__b77a5c561934e089\System.Data.dll	4.8.4465.0
rasapi32.dll	C:\Windows\System32\rasapi32.dll	6.2.14393.4283
rasman.dll	C:\Windows\System32\rasman.dll	6.2.14393.0
Microsoft.Web.Infrastructure.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\Microsoft.Wccf05646#\efff860fa563dd0dfc8133378289eee7\Microsoft.Web.Infrastructure.ni.dll	1.0.20105.407
secur32.dll	C:\Windows\System32\secur32.dll	6.2.14393.2273
schannel.dll	C:\Windows\System32\schannel.dll	6.2.14393.5076
diasymreader.dll	C:\Windows\Microsoft.NET\Framework64\v4.0.30319\diasymreader.dll	14.8.3761.0
mskeyprotect.dll	C:\Windows\System32\mskeyprotect.dll	6.2.14393.4046
ncryptsslp.dll	C:\Windows\System32\ncryptsslp.dll	6.2.14393.4583
System.Web.Abstractions.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Web.188dd00b#\de971bb93a85f4a46e8046e03b3d99ef\System.Web.Abstractions.ni.dll	4.8.3761.0
System.Transactions.dll	C:\Windows\Microsoft.Net\assembly\GAC_64\System.Transactions\v4.0_4.0.0.0__b77a5c561934e089\System.Transactions.dll	4.8.3761.0
System.Xml.Linq.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Xml.Linq\7da3cc906bdf481871cad3f29b58d0b5\System.Xml.Linq.ni.dll	4.8.3761.0
System.ComponentModel.Composition.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Compba577418#\aff62f22904f104a555699af299abe9c\System.ComponentModel.Composition.ni.dll	4.8.3761.0
System.EnterpriseServices.Wrapper.dll	C:\Windows\Microsoft.Net\assembly\GAC_64\System.EnterpriseServices\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.EnterpriseServices.Wrapper.dll	4.8.3761.0
security.dll	C:\Windows\System32\security.dll	6.2.14393.0
System.IdentityModel.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.IdentityModel\58121612fb6f2bd73da5c0edb9c05153\System.IdentityModel.ni.dll	4.8.4465.0
System.Web.DataVisualization.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Web.8da3333a#\13a7b701d56b5b4560b3024ee3f9338a\System.Web.DataVisualization.ni.dll	4.8.3761.0
System.Data.Linq.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Data.Linq\f0609490a8aa72e1732105ef38034575\System.Data.Linq.ni.dll	4.8.3761.0
System.Xaml.Hosting.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Xaml.Hosting\fc6a484a40b56096c53db068792d2416\System.Xaml.Hosting.ni.dll	4.8.3761.0
Microsoft.Transactions.Bridge.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\Microsoft.Te49ad7d9#\7a3f7e7b3bb9111bf4c682664652f17c\Microsoft.Transactions.Bridge.ni.dll	4.8.3761.0
System.Messaging.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Messaging\5c1c8ac4bdfdde83a97cf4183050e283\System.Messaging.ni.dll	4.8.3761.0
System.Runtime.DurableInstancing.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Runt93d54979#\b1b13ee7de78943a384c7af28de46690\System.Runtime.DurableInstancing.ni.dll	4.8.3761.0
cryptnet.dll	C:\Windows\System32\cryptnet.dll	6.2.14393.2035
Microsoft.CSharp.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\Microsoft.CSharp\b41d9cecf42e3acec16fb15ac2c6f63e\Microsoft.CSharp.ni.dll	4.8.3761.0
System.Activities.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Activities\f95f512874a693a88430937b513bcb38\System.Activities.ni.dll	4.8.4465.0
System.ServiceModel.Activities.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Serv14259fd9#\3c4001d803cb51c55b6b42a31829f1a6\System.ServiceModel.Activities.ni.dll	4.8.4261.0
System.WorkflowServices.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Workd8194f73#\91ab9d79c2b95bb9a411a5fbf3a87540\System.WorkflowServices.ni.dll	4.8.3761.0
System.Data.DataSetExtensions.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Data7706cdc8#\e99384686321a937d29927e3fe0b0235\System.Data.DataSetExtensions.ni.dll	4.8.3761.0
dpapi.dll	C:\Windows\System32\dpapi.dll	6.2.14393.0
gzip.dll	C:\Windows\System32\inetsrv\gzip.dll	6.2.14393.0
System.Data.OracleClient.dll	C:\Windows\Microsoft.Net\assembly\GAC_64\System.Data.OracleClient\v4.0_4.0.0.0__b77a5c561934e089\System.Data.OracleClient.dll	4.8.3761.0
System.Web.Mobile.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Web.Mobile\43eac68266736ca3a837b35c23d69118\System.Web.Mobile.ni.dll	4.8.3761.0
SNI.dll	C:\home\site\wwwroot\bin\x64\SNI.dll	1.1.0.0
gpapi.dll	C:\Windows\System32\gpapi.dll	6.2.14393.4467
System.Workflow.Runtime.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Work0493292f#\69c48ce2ff5ae45aed19aac5a7cf5d0a\System.Workflow.Runtime.ni.dll	4.8.4110.0
System.Workflow.ComponentModel.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Workca489553#\237bd8f8f3e3c8d705c2669462fe3926\System.Workflow.ComponentModel.ni.dll	4.8.4110.0
System.Workflow.Activities.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Workfffcbcd8#\45e93c2150881c669981e1f990b54a90\System.Workflow.Activities.ni.dll	4.8.4110.0
Microsoft.VisualBasic.Activities.Compiler.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\Microsoft.Vf4833439#\5531b9fae9c28405fc7882b22ef8a053\Microsoft.VisualBasic.Activities.Compiler.ni.dll	14.8.3761.0
Microsoft.VisualBasic.Activities.Compiler.dll	C:\Windows\Microsoft.Net\assembly\GAC_64\Microsoft.VisualBasic.Activities.Compiler\v4.0_10.0.0.0__b03f5f7f11d50a3a\Microsoft.VisualBasic.Activities.Compiler.dll	14.8.3761.0
MSVCP140_CLR0400.dll	C:\Windows\System32\MSVCP140_CLR0400.dll	14.10.25028.0
System.Dynamic.ni.dll	C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Dynamic\ce0076cdecfb1e0c1a3f0485a15bf778\System.Dynamic.ni.dll	4.8.3761.0
msshrtmi.dll	C:\Windows\Microsoft.Net\assembly\GAC_64\msshrtmi\v4.0_2.7.0.0__31bf3856ad364e35\msshrtmi.dll	2.7.1198.726

&lt;/code&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;/details&gt;
</description>
      <pubDate>Tue, 16 Aug 2022 09:56:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1717</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1717</link>
      <title>Issue: Version 5.0.0 causing permission error reading .config files on Azure - @dargavin</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;Updating NuGet package from 4.1.0 to 5.0.0 in a .Net 6.0 project, and then deploying to Azure, the web site get a 500 error.&lt;/p&gt;
&lt;p&gt;Digging into the app logs it is a generic security error reading config files with the app service principle.  (Using the system generate principle option)&lt;/p&gt;
&lt;p&gt;Downgrading just this package back to 4.1.0 in Azure allowed app to function again.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Exception message:
Stack trace:
Connecting...
2022-08-15T16:52:02  Welcome, you are now connected to log-streaming service. The default timeout is 2 hours. Change the timeout with the App Setting SCM_LOGSTREAM_TIMEOUT (in seconds).
&amp;lt;!DOCTYPE html PUBLIC &amp;quot;-//W3C//DTD XHTML 1.0 Strict//EN&amp;quot; &amp;quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&amp;quot;&amp;gt;&amp;lt;html xmlns=&amp;quot;http://www.w3.org/1999/xhtml&amp;quot;&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;IIS Detailed Error - 500.0 - Internal Server Error&amp;lt;/title&amp;gt;&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;&amp;lt;!--body{margin:0;font-size:.7em;font-family:Verdana,Arial,Helvetica,sans-serif;}code{margin:0;color:#006600;font-size:1.1em;font-weight:bold;}.config_source code{font-size:.8em;color:#000000;}pre{margin:0;font-size:1.4em;word-wrap:break-word;}ul,ol{margin:10px 0 10px 5px;}ul.first,ol.first{margin-top:5px;}fieldset{padding:0 15px 10px 15px;word-break:break-all;}.summary-container fieldset{padding-bottom:5px;margin-top:4px;}legend.no-expand-all{padding:2px 15px 4px 10px;margin:0 0 0 -12px;}legend{color:#333333;;margin:4px 0 8px -12px;_margin-top:0px;font-weight:bold;font-size:1em;}a:link,a:visited{color:#007EFF;font-weight:bold;}a:hover{text-decoration:none;}h1{font-size:2.4em;margin:0;color:#FFF;}h2{font-size:1.7em;margin:0;color:#CC0000;}h3{font-size:1.4em;margin:10px 0 0 0;color:#CC0000;}h4{font-size:1.2em;margin:10px 0 5px 0;}#header{width:96%;margin:0 0 0 0;padding:6px 2% 6px 2%;font-family:&amp;quot;trebuchet MS&amp;quot;,Verdana,sans-serif;color:#FFF;background-color:#5C87B2;
}#content{margin:0 0 0 2%;position:relative;}.summary-container,.content-container{background:#FFF;width:96%;margin-top:8px;padding:10px;position:relative;}.content-container p{margin:0 0 10px 0;}#details-left{width:35%;float:left;margin-right:2%;}#details-right{width:63%;float:left;overflow:hidden;}#server_version{width:96%;_height:1px;min-height:1px;margin:0 0 5px 0;padding:11px 2% 8px 2%;color:#FFFFFF;background-color:#5A7FA5;border-bottom:1px solid #C1CFDD;border-top:1px solid #4A6C8E;font-weight:normal;font-size:1em;color:#FFF;text-align:right;}#server_version p{margin:5px 0;}table{margin:4px 0 4px 0;width:100%;border:none;}td,th{vertical-align:top;padding:3px 0;text-align:left;font-weight:normal;border:none;}th{width:30%;text-align:right;padding-right:2%;font-weight:bold;}thead th{background-color:#ebebeb;width:25%;}#details-right th{width:20%;}table tr.alt td,table tr.alt th{}.highlight-code{color:#CC0000;font-weight:bold;font-style:italic;}.clear{clear:both;}.preferred{padding:0 5px 2px 5px;font-weight:normal;background:#006633;color:#FFF;font-size:.8em;}--&amp;gt;&amp;lt;/style&amp;gt;
&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;div id=&amp;quot;content&amp;quot;&amp;gt;&amp;lt;div class=&amp;quot;content-container&amp;quot;&amp;gt;&amp;lt;h3&amp;gt;HTTP Error 500.0 - Internal Server Error&amp;lt;/h3&amp;gt;&amp;lt;h4&amp;gt;The page cannot be displayed because an internal server error has occurred.&amp;lt;/h4&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;content-container&amp;quot;&amp;gt;&amp;lt;fieldset&amp;gt;&amp;lt;h4&amp;gt;Most likely causes:&amp;lt;/h4&amp;gt;&amp;lt;ul&amp;gt; 	&amp;lt;li&amp;gt;IIS received the request; however, an internal error occurred during the processing of the request. The root cause of this error depends on which module handles the request and what was happening in the worker process when this error occurred.&amp;lt;/li&amp;gt; 	&amp;lt;li&amp;gt;IIS was not able to access the web.config file for the Web site or application. This can occur if the NTFS permissions are set incorrectly.&amp;lt;/li&amp;gt; 	&amp;lt;li&amp;gt;IIS was not able to process configuration for the Web site or application.&amp;lt;/li&amp;gt; 	&amp;lt;li&amp;gt;The authenticated user does not have permission to use this DLL.&amp;lt;/li&amp;gt; 	&amp;lt;li&amp;gt;The request is mapped to a managed handler but the .NET Extensibility Feature is not installed.&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;&amp;lt;/fieldset&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=&amp;quot;content-container&amp;quot;&amp;gt;&amp;lt;fieldset&amp;gt;&amp;lt;h4&amp;gt;Things you can try:&amp;lt;/h4&amp;gt;&amp;lt;ul&amp;gt; 	&amp;lt;li&amp;gt;Ensure that the NTFS permissions for the web.config file are correct and allow access to the Web server's machine account.&amp;lt;/li&amp;gt; 	&amp;lt;li&amp;gt;Check the event logs to see if any additional information was logged.&amp;lt;/li&amp;gt; 	&amp;lt;li&amp;gt;Verify the permissions for the DLL.&amp;lt;/li&amp;gt; 	&amp;lt;li&amp;gt;Install the .NET Extensibility feature if the request is mapped to a managed handler.&amp;lt;/li&amp;gt; 	&amp;lt;li&amp;gt;Create a tracing rule to track failed requests for this HTTP status code. For more information about creating a tracing rule for failed requests, click &amp;lt;a href=&amp;quot;http://go.microsoft.com/fwlink/?LinkID=66439&amp;quot;&amp;gt;here&amp;lt;/a&amp;gt;. &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt;&amp;lt;/fieldset&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;content-container&amp;quot;&amp;gt;&amp;lt;fieldset&amp;gt;&amp;lt;h4&amp;gt;Detailed Error Information:&amp;lt;/h4&amp;gt;&amp;lt;div id=&amp;quot;details-left&amp;quot;&amp;gt;&amp;lt;table border=&amp;quot;0&amp;quot; cellpadding=&amp;quot;0&amp;quot; cellspacing=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;tr class=&amp;quot;alt&amp;quot;&amp;gt;&amp;lt;th&amp;gt;Module&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;AspNetCoreModuleV2&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Notification&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;ExecuteRequestHandler&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr class=&amp;quot;alt&amp;quot;&amp;gt;&amp;lt;th&amp;gt;Handler&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;aspNetCore&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Error Code&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;0x00000000&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div id=&amp;quot;details-right&amp;quot;&amp;gt;&amp;lt;table border=&amp;quot;0&amp;quot; cellpadding=&amp;quot;0&amp;quot; cellspacing=&amp;quot;0&amp;quot;&amp;gt;&amp;lt;tr class=&amp;quot;alt&amp;quot;&amp;gt;&amp;lt;th&amp;gt;Requested URL&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;https://oha-survey-dev:80/&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Physical Path&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;C:\home\site\wwwroot&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr class=&amp;quot;alt&amp;quot;&amp;gt;&amp;lt;th&amp;gt;Logon Method&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Anonymous&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;th&amp;gt;Logon User&amp;lt;/th&amp;gt;&amp;lt;td&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Anonymous&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;
&amp;lt;/table&amp;gt;&amp;lt;div class=&amp;quot;clear&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/fieldset&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class=&amp;quot;content-container&amp;quot;&amp;gt;&amp;lt;fieldset&amp;gt;&amp;lt;h4&amp;gt;More Information:&amp;lt;/h4&amp;gt;This error means that there was a problem while processing the request. The request was received by the Web server, but during processing a fatal error occurred, causing the 500 error.&amp;lt;p&amp;gt;&amp;lt;a href=&amp;quot;http://go.microsoft.com/fwlink/?LinkID=62293&amp;amp;amp;IIS70Error=500,0,0x00000000,14393&amp;quot;&amp;gt;View more information &amp;amp;raquo;&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;&amp;lt;p&amp;gt;Microsoft Knowledge Base Articles:&amp;lt;/p&amp;gt;
&amp;lt;/fieldset&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;

### To reproduce
  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.AspNetCore.Authentication&amp;quot; Version=&amp;quot;2.2.0&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.AspNetCore.Authentication.Negotiate&amp;quot; Version=&amp;quot;6.0.8&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.AspNetCore.Authentication.OpenIdConnect&amp;quot; Version=&amp;quot;6.0.8&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.AspNetCore.Mvc.Razor.RuntimeCompilation&amp;quot; Version=&amp;quot;6.0.8&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.Data.SqlClient&amp;quot; Version=&amp;quot;5.0.0&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.EntityFrameworkCore.SqlServer&amp;quot; Version=&amp;quot;6.0.8&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Microsoft.EntityFrameworkCore.Tools&amp;quot; Version=&amp;quot;6.0.8&amp;quot;&amp;gt;
      &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
      &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
    &amp;lt;/PackageReference&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Newtonsoft.Json&amp;quot; Version=&amp;quot;13.0.1&amp;quot; /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

### Expected behavior
Expected no permission issues reading configs with update from 4.1.0 to 5.0.0

### Further technical details
Microsoft.Data.SqlClient version: 5.0.0
.NET target: 6.0
SQL Server version: 2017
Operating system: Azure

**Additional context**
Add any other context about the problem here.
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Mon, 15 Aug 2022 16:58:18 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1714</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1714</link>
      <title>Issue: Can you remove the dependency on System.Threading.Tasks.Extensions? - @shueybubbles</title>
      <description>&lt;h3&gt;Is your feature request related to a problem? Please describe.&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;System.Threading.Tasks.Extensions&lt;/code&gt; package hasn't been updated since March 2020. It depends on version 4.5.3 of package &lt;code&gt;System.Runtime.CompilerServices.Unsafe&lt;/code&gt;
Meanwhile M.D.S also has a dependency on &lt;code&gt;System.Text.Encoding.CodePages&lt;/code&gt; version 5, who has a dependency on &lt;code&gt;System.Runtime.CompilerServices.Unsafe&lt;/code&gt; version 5.&lt;/p&gt;
&lt;p&gt;On Net462 these versions conflict, leading us to having to implement binding redirects and workarounds for unit tests to run.&lt;/p&gt;
&lt;p&gt;AutoGenerateBindingRedirects is fine for EXEs but we run our unit tests at build time and the only binding redirect we can readily do there is in code with an AssemblyResolve implementation.&lt;/p&gt;
&lt;h3&gt;Describe the solution you'd like&lt;/h3&gt;
&lt;p&gt;Either: Get rid of the dependency on the old package. The rest of the .Net world seems to have upgraded to &lt;code&gt;System.Runtime.CompilerServices.Unsafe&lt;/code&gt; version 5 and pulling in version 4 to get &lt;code&gt;Microsoft.Data.SqlClient&lt;/code&gt; complicates builds.&lt;/p&gt;
&lt;p&gt;Or:
Add an explicit dependency on version 5 of &lt;code&gt;System.Runtime.CompilerServices.Unsafe&lt;/code&gt; to trump the indirect dependency&lt;/p&gt;
&lt;h3&gt;Describe alternatives you've considered&lt;/h3&gt;
&lt;p&gt;Force M.D.S consumers to implement binding redirects even for test DLLs.&lt;/p&gt;
&lt;h3&gt;Additional context&lt;/h3&gt;
&lt;p&gt;Add any other context about the feature request here.&lt;/p&gt;
</description>
      <pubDate>Fri, 12 Aug 2022 03:53:18 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1702</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1702</link>
      <title>Issue: SQLConnectionStringBuilder 5.0 is not Backwards Compatible - @PeteSL</title>
      <description>&lt;p&gt;Pull request 1608 states that the Encrypt property is backwards compatible with boolean interfaces.  It is not.  Microsoft.SqlServer.Management.Smo.Server(&amp;quot;servername&amp;quot;) constructor is failing with &amp;quot;Method not found: 'Void Microsoft.Data.SqlClient.SqlConnectionStringBuilder.set_Encrypt(Boolean)'.&amp;quot; during the construction. This is a bug as 1608 states it is backwards compatible.  Rolling back to 4.1.0 fixes the issue, as expected.&lt;/p&gt;
</description>
      <pubDate>Tue, 09 Aug 2022 12:45:08 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1698</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1698</link>
      <title>Issue: Enabling Long Paths Ignored (Filename or Extension is Too Long) - @dattaei-eb</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;When attempting to build my microservice I am getting a build error in the form of a dependency filename or extension being too long. This only appears to be happening the DLLs from SqlClient as after enabling &amp;quot;long path&amp;quot; support other issues caused by a long path went away.&lt;/p&gt;
&lt;p&gt;In order to fix this issue I have attempted the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Setting git config --system core.longpaths true&lt;/li&gt;
&lt;li&gt;Enabling the &amp;quot;long paths&amp;quot; Group Policy and confirming the proper change was made in the registry.&lt;/li&gt;
&lt;li&gt;Including  &amp;quot;longPathAware&amp;quot; in the application manifest.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The last two suggested solutions from:
https://docs.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation?tabs=registry&lt;/p&gt;
&lt;p&gt;For whatever reason, those settings seem to work for all DLLs except those coming from dotnet/SqlClient.&lt;/p&gt;
&lt;p&gt;Exception message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The type initializer for 'Microsoft.Data.SqlClient.SNILoadHandle' threw an exception. ---&amp;gt; System.DllNotFoundException: Unable to load DLL 'Microsoft.Data.SqlClient.SNI.dll' or one of its dependencies: The filename or extension is too long. (0x800700CE)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;p&gt;Simply create a dummy solution using SqlClient and nest it into a parent directory/directories causing a &amp;gt;260 character path.&lt;/p&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;After enabling long paths the solution should be able to build properly.&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;Microsoft.Data.SqlClient version: (found on the nuget or Microsoft.Data.SqlClient.dll)
.NET target: net6.0
Operating system: Windows Server 2019 Standard&lt;/p&gt;
</description>
      <pubDate>Tue, 09 Aug 2022 00:03:47 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1697</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1697</link>
      <title>Issue: Getting MSAL to work with Microsoft.Data.SqlClient to create an azure database on sql server - @dgxhubbard</title>
      <description>&lt;p&gt;We have a desktop app our customers purchase, and some customers want to access azure while running azure ad. We use a DbConnectionInterceptor to determine if azure is used and get the access token. This code is put together from the &lt;a href="https://docs.microsoft.com/en-us/azure/active-directory/develop/tutorial-v2-windows-desktop"&gt;WPF app example&lt;/a&gt;.  What should the Authentication setting be, for Microsoft.Data.SqlClient connection string, is my first question. Next why does this have an error with the connection string:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Data Source=tcp:foo.database.windows.net,1433;Pooling=True;Authentication=ActiveDirectoryIntegrated&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;We are not setting a password.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/5032382/183533926-f2b554c5-512c-4155-a8d8-cd67e1c23d15.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/5032382/183533990-114d3787-e437-4eec-8c43-a85298fe4343.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;Our code not event make it to our DbConnectionInterceptor.&lt;/p&gt;
&lt;p&gt;`    public class AzureAdDbConnectorInterceptor : DbConnectionInterceptor
{
private static string ClientId = &amp;quot;c32c25e9-2f19-4171-ad22-83e969f65e57&amp;quot;;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    private static string Tenant = &amp;quot;common&amp;quot;;

    private static IPublicClientApplication _clientApp;

    public static IPublicClientApplication PublicClientApp { get { return _clientApp; } }

    static AzureAdDbConnectorInterceptor ()
    {
        _clientApp = PublicClientApplicationBuilder.Create ( ClientId )
                    .WithAuthority ( AzureCloudInstance.AzurePublic, Tenant )
                    .WithDefaultRedirectUri ()
                    .Build ();
    }

    public override InterceptionResult ConnectionOpening (
        DbConnection connection,
        ConnectionEventData eventData,
        InterceptionResult result )
    {
        
        var sqlConnection = ( SqlConnection ) connection;
        if ( DoesConnectionNeedAccessToken ( sqlConnection ) )
        {
            sqlConnection.AccessToken = GetAuthenticationToken ();
        }

        return base.ConnectionOpening ( connection, eventData, result );
    }

    public override async ValueTask&amp;lt;InterceptionResult&amp;gt; ConnectionOpeningAsync (
        DbConnection connection,
        ConnectionEventData eventData,
        InterceptionResult result,
        CancellationToken cancellationToken = default )
    {
        var sqlConnection = ( SqlConnection ) connection;
        if ( DoesConnectionNeedAccessToken ( sqlConnection ) )
        {

            sqlConnection.AccessToken = GetAuthenticationToken ();
        }

        return await base.ConnectionOpeningAsync ( connection, eventData, result, cancellationToken );
    }

    private static bool DoesConnectionNeedAccessToken ( SqlConnection connection )
    {
        var connectionStringBuilder = new SqlConnectionStringBuilder ( connection.ConnectionString );

        var dataSource = connectionStringBuilder.DataSource;

        var contains = false;

        if ( dataSource.Contains ( MsSqlConstants.AzureUrl, StringComparison.OrdinalIgnoreCase ) )
            contains = true;

        return contains;
            
            //&amp;amp;&amp;amp; string.IsNullOrEmpty ( connectionStringBuilder.UserID );
    }

    public string ResultText
    { get; set; }

    private string GetAuthenticationToken ()
    {
        AuthenticationResult authResult = null;

        var scopes = new List&amp;lt;string&amp;gt; () { &amp;quot;user.read&amp;quot;, &amp;quot;user.write&amp;quot; };

        var accountResult = _clientApp.GetAccountsAsync ();
        accountResult.Wait ();

        var firstAccount = accountResult.Result.FirstOrDefault ();


        try
        {
            Task&amp;lt;AuthenticationResult&amp;gt; result = _clientApp.AcquireTokenSilent ( scopes, firstAccount ).ExecuteAsync ();

            result.Wait ();

            authResult = result.Result;


        }
        catch ( MsalUiRequiredException ex )
        {
            // A MsalUiRequiredException happened on AcquireTokenSilent.
            // This indicates you need to call AcquireTokenInteractive to acquire a token
            System.Diagnostics.Debug.WriteLine ( $&amp;quot;MsalUiRequiredException: {ex.Message}&amp;quot; );

            try
            {
                Task&amp;lt;AuthenticationResult&amp;gt; result = 
                    _clientApp.AcquireTokenInteractive ( scopes ).
                        WithUseEmbeddedWebView ( true ).
                        ExecuteAsync ();

                result.Wait ();

                authResult = result.Result;

            }
            catch ( MsalException msalex )
            {
                ResultText = $&amp;quot;Error Acquiring Token:{System.Environment.NewLine}{msalex}&amp;quot;;
            }
        }
        catch ( Exception ex )
        {
            ResultText = $&amp;quot;Error Acquiring Token Silently:{System.Environment.NewLine}{ex}&amp;quot;;

        }

        if ( authResult != null )
            return authResult.AccessToken;
        else
            return null;

    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;`&lt;/p&gt;
</description>
      <pubDate>Mon, 08 Aug 2022 23:58:12 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1693</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1693</link>
      <title>Issue: Access Violation in Microsoft.Data.SqlClient.SNI build 5.0.0 - @rozeboosje</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;Our application - .NET Framework 4.8 - uses Microsoft.Data.SqlClient and this also pulled in Microsoft.Data.SqlClient.SNI build 4.0.0&lt;/p&gt;
&lt;p&gt;Checking the NuGet Package Manager for our solution I see there is an upgrade to build 5.0.0 of Microsoft.Data.SqlClient.SNI so I installed that. Upon which the software throws an AccessViolation when opening a connection.&lt;/p&gt;
&lt;p&gt;If you are seeing an exception, include the full exceptions details (message and stack trace).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Exception message: Exception thrown: 'System.AccessViolationException' in Microsoft.Data.SqlClient.dll
Stack trace:
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;p&gt;As described above&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
### Expected behavior
No Access Violation? 

### Further technical details
Microsoft.Data.SqlClient version: 4.1.0 
.NET target: Framework 4.8
SQL Server version: Azure SQL

**Additional context**
I suspect that Microsoft.Data.SqlClient.SNI build 5.0.0 might need to be included with an update to a build 5.something for Microsoft.Data.SqlClient which is not yet available, and that if you run build 5.0.0 against build 4.1.0 of Microsoft.Data.SqlClient the two will not be mutually compatible....

.... or something like that?
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Thu, 04 Aug 2022 17:08:12 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1687</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1687</link>
      <title>Issue: Microsoft.Data.SqlClient is not compatible with AssemblyLoadContext unloading - @agocke</title>
      <description>&lt;p&gt;See https://github.com/dotnet/runtime/issues/31377 for context. The fundamental issue is that unloadability is based on GC references, so SqlClient containing a strong references via event handlers and similar. The suggested fix is that for callbacks like the TimerCallback in Microsoft.Data.SqlClient.SqlConnectionFactory, support for listening to the Unload event could be added and these roots could be cleared, so that the app could be unloaded.&lt;/p&gt;
</description>
      <pubDate>Thu, 28 Jul 2022 17:48:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1684</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1684</link>
      <title>Issue: GetSqlBinary fails with NRE on null rowversion - @Wraith2</title>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;select cast(null as rowversion) rv&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Wow that's impressive that you were able to boil it down to that.  Very cool.  Now just try to read that in with &lt;code&gt;GetSqlBinary&lt;/code&gt;.  It does in fact throw I just tried it.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/6945499/181352009-334424ad-f7f1-4d14-8af9-986b8172899e.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted by @rclabo in https://github.com/dotnet/SqlClient/issues/255#issuecomment-1197249952&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Wed, 27 Jul 2022 19:05:22 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1682</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1682</link>
      <title>Issue: Memory leak when an exception is raised during execution of SqlCommand with CancellationToken - @olegkv</title>
      <description>&lt;h3&gt;Description&lt;/h3&gt;
&lt;p&gt;When using CancellationToken, an exception raised by sqlCommand.ExecuteNonQueryAsync() causes memory leaks.
When not using CancellationToken, an exception raised by sqlCommand.ExecuteNonQueryAsync() does not cause any memory leaks.&lt;/p&gt;
&lt;h3&gt;More details about context&lt;/h3&gt;
&lt;p&gt;When we run a background process which executes sql commands in regular (scheduled) manner (execute-sleep-execute), and using global CancellationToken, process would go out of memory if some commands generate errors.&lt;/p&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;p&gt;Run the code below. Comment and uncomment calls of ExecuteNonQueryAsync to see the difference between using CancellationToken and not using it.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;CancellationToken stoppingToken = new CancellationTokenSource().Token;
using var connection = new SqlConnection(&amp;quot;Data Source=localhost&amp;quot;);
while (!stoppingToken.IsCancellationRequested)
{
	try
	{
		using var command = connection.CreateCommand();
		string myString = new string('*', 1000000);
		command.CommandText = &amp;quot;select * from Table1 where Name = @p1&amp;quot;;
		var tvpParam = command.Parameters.AddWithValue(&amp;quot;@p1&amp;quot;, myString);
		tvpParam.SqlDbType = SqlDbType.VarChar;
		//memory leak
		await command.ExecuteNonQueryAsync(stoppingToken);
		//no memory leak
		//await command.ExecuteNonQueryAsync();
	}
	catch
	{
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;When using CancellationToken, memory usage should be the same as in the case of not using CancellationToken&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;Microsoft.Data.SqlClient version: (4.1.0)
.NET target: (Net 5 and 6)
Operating system: (Windows)&lt;/p&gt;
</description>
      <pubDate>Wed, 27 Jul 2022 16:36:23 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1679</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1679</link>
      <title>Issue: The GetSchemaTable method returns metadata, and the column IsKey obtained by querying the table sys.columns is wrong? - @netnr</title>
      <description>&lt;pre&gt;&lt;code&gt;[Fact]
public void SchemaInfo()
{
    var cmdText = &amp;quot;select c.name AS ColumnName, c.column_id AS ColumnOrder from sys.columns c&amp;quot;;

    var connectionString = &amp;quot;Server=local.host;uid=sa;pwd=Abc123....;Database=netnr;TrustServerCertificate=True&amp;quot;;
    using var connection = new SqlConnection(connectionString);
    connection.Open();

    using var command = new SqlCommand(cmdText, connection);
    var reader = command.ExecuteReader(CommandBehavior.KeyInfo | CommandBehavior.CloseConnection);
    var schemaTable = reader.GetSchemaTable();

    foreach (DataRow row in schemaTable.Rows)
    {
        if ((bool)row[&amp;quot;IsKey&amp;quot;] &amp;amp;&amp;amp; !(bool)row[&amp;quot;IsHidden&amp;quot;])
        {
            Debug.WriteLine(row[0]); // ColumnOrder
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;PackageReference Include=&amp;quot;Microsoft.Data.SqlClient&amp;quot; Version=&amp;quot;4.1.0&amp;quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;At present, it is found that the &amp;quot;column_id&amp;quot; column of the &amp;quot;sys.columns&amp;quot; table is returned as the primary key, and other tables are normal&lt;/p&gt;
</description>
      <pubDate>Mon, 25 Jul 2022 02:32:55 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1675</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1675</link>
      <title>Issue: TransactionAbortedException when performing queries in parallel inside a transaction scope - @joostmeijles</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;When performing multiple queries in parallel, and each pair of 2 queries are inside a transaction scope, an unexpected transaction error is thrown (see below).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Exception message: System.Transactions.TransactionAbortedException: The transaction has aborted.
Stack trace:
Unhandled exception. System.Transactions.TransactionAbortedException: The transaction has aborted.
 ---&amp;gt; System.Transactions.TransactionPromotionException: Failure while attempting to promote transaction.
 ---&amp;gt; System.InvalidOperationException: The requested operation cannot be completed because the connection has been broken.
   at Microsoft.Data.SqlClient.SqlInternalConnectionTds.ExecuteTransaction(TransactionRequest transactionRequest, String name, IsolationLevel iso, SqlInternalTransaction internalTransaction, Boolean isDelegateControlRequest)
   at Microsoft.Data.SqlClient.SqlDelegatedTransaction.Promote()
   --- End of inner exception stack trace ---
   at Microsoft.Data.SqlClient.SqlDelegatedTransaction.Promote()
   at System.Transactions.TransactionStatePSPEOperation.PSPEPromote(InternalTransaction tx)
   at System.Transactions.TransactionStateDelegatedBase.EnterState(InternalTransaction tx)
   --- End of inner exception stack trace ---
   at System.Transactions.TransactionStateAborted.CheckForFinishedTransaction(InternalTransaction tx)
   at System.Transactions.EnlistableStates.Promote(InternalTransaction tx)
   at System.Transactions.Transaction.Promote()
   at System.Transactions.TransactionInterop.ConvertToDistributedTransaction(Transaction transaction)
   at System.Transactions.TransactionInterop.GetExportCookie(Transaction transaction, Byte[] whereabouts)
   at Microsoft.Data.SqlClient.SqlInternalConnection.GetTransactionCookie(Transaction transaction, Byte[] whereAbouts)
   at Microsoft.Data.SqlClient.SqlInternalConnection.EnlistNonNull(Transaction tx)
   at Microsoft.Data.ProviderBase.DbConnectionInternal.ActivateConnection(Transaction transaction)
   at Microsoft.Data.ProviderBase.DbConnectionPool.PrepareConnection(DbConnection owningObject, DbConnectionInternal obj, Transaction transaction)
   at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInterna
l&amp;amp; connection)
   at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal&amp;amp; connection)
   at Microsoft.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal&amp;amp; connection)
   at Microsoft.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
   at Microsoft.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry, SqlConnectionOverrides overrides)
   at Microsoft.Data.SqlClient.SqlConnection.InternalOpenAsync(CancellationToken cancellationToken)
--- End of stack trace from previous location ---
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;p&gt;Below code reproduces the error. It runs 100K times 2 queries in parallel where each 2 queries are inside a single transaction scope.
Note that after each query the database connection is disposed (and thus closed). This is important to trigger the error.
When we change the code, and use 1 connection for both queries &lt;em&gt;and&lt;/em&gt; only open 1 connection the error does not occur (see also code comments below).&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;using System.Transactions;
using Microsoft.Data.SqlClient;

static async Task PerformTransactionWithQuery(int num)
{
    try
    {
        using (new TransactionScope(TransactionScopeAsyncFlowOption.Enabled))
        {
            // Adding &amp;quot;max pool size=1000;&amp;quot; to the connection string seems to trigger the problem less often
            string connStr = @&amp;quot;Server=.\SQLEXPRESS;Database=master;Trusted_Connection=True;Encrypt=False&amp;quot;;

            var query = &amp;quot;SELECT COUNT(*) FROM sys.dm_tran_active_transactions&amp;quot;;

            await using (var dbConn = new SqlConnection(connStr))
            {
                await dbConn.OpenAsync();

                await using (var command1 = new SqlCommand(query, dbConn))
                {
                    await command1.ExecuteScalarAsync();
                }
            } // Connection is disposed (and thus closed)

            await using (var dbConn = new SqlConnection(connStr)) 
            {
                // Reopening the connection triggers the following error:
                // System.Transactions.TransactionAbortedException: The transaction has aborted.
                //
                // NB. Using a single connection and opening it once does NOT trigger the error
                await dbConn.OpenAsync();
                
                await using (var command2 = new SqlCommand(query, dbConn))
                {
                    await command2.ExecuteScalarAsync();
                }
            } // Connection is disposed (and thus closed)
            
            //Do not complete transaction
        }
    }
    catch (Exception e)
    {
        Console.WriteLine($&amp;quot;Failed {num}&amp;quot;);
        throw;
    }
} 

var tasks = Enumerable.Range(0, 100000).ToList().Select(PerformTransactionWithQuery);
await Task.WhenAll(tasks);
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;Being able to use multiple connections (with the same connection string) in sequence within the same transaction without errors.&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;Microsoft.Data.SqlClient version: 4.1.0
.NET target: .NET 6
SQL Server version: SQL Server 2019
Operating system: Windows 11&lt;/p&gt;
</description>
      <pubDate>Wed, 20 Jul 2022 14:12:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1674</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1674</link>
      <title>Issue: Too Many TimerQueueTime objects retained by DBConnectionPool of sqlClient - @arthurvaverko-kaltura</title>
      <description>&lt;p&gt;We are running an API server that is using Microsoft.Data.SqlClient 4.1.0
The api is async all the way and here is a sample that runs a stored procedure.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;            using (var con = new SqlConnection(sConn))
            {
                try
                {
                    await con.OpenAsync().ConfigureAwait(false);
                    command.Connection = con;

                    IEnumerable&amp;lt;T&amp;gt; result;
                    
                    var queryParams = new DynamicParameters(m_Parameters);
                    result = await con.QueryAsync&amp;lt;T&amp;gt;(procedureNameWithDbVersionPrefix, queryParams, commandType: CommandType.StoredProcedure).ConfigureAwait(false);


                    await con.CloseAsync().ConfigureAwait(false);
                    return result;
                }
                catch (Exception ex)
                {
                    LogException(ex);
                    return null;
                }
            }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;.NET target: Core 3.1&lt;/p&gt;
&lt;p&gt;over time with a load of 5K requests per second we are seeing our service ramps up to 80% cpu and then keeps rising even though the load is the same .. until process gets to 100% cpu.
in addition memory keep rising and over 15 min it gets to to ~1.2Gb&lt;/p&gt;
&lt;p&gt;then we took a mem dump and this is the result
&lt;img src="https://user-images.githubusercontent.com/3643617/179984158-4ed9300a-1adc-4062-86cd-0fef38f9b78d.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;after inspecting this TimerQueueTimer in perfView we see this ref:
&lt;img src="https://user-images.githubusercontent.com/3643617/179984459-ef1146ee-c95e-48ff-a7fb-61619c9b7223.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;what could cause such a behavior ?&lt;/p&gt;
</description>
      <pubDate>Wed, 20 Jul 2022 12:41:25 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1670</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1670</link>
      <title>Issue: Migrate to NegotiateAuthentication for GSSAPI authentication on .NET 7 - @filipnavara</title>
      <description>&lt;h3&gt;Is your feature request related to a problem? Please describe.&lt;/h3&gt;
&lt;p&gt;Currently SqlClient uses custom interop to call into the System.Net.Security.Native interop on .NET Core / 5 / 6. This is an internal API that is not intended for public consumption. It was previously broken on at least one occasion (https://github.com/dotnet/runtime/commit/e334603d8230873b91fde94210acaca19c710e72).  On .NET 7 a new public &lt;code&gt;NegotiateAuthentication&lt;/code&gt; API was added (https://github.com/dotnet/runtime/issues/69920, https://github.com/dotnet/runtime/issues/70909) to address the scenarios. Furthermore, the &lt;code&gt;NegotiateAuthentication&lt;/code&gt; is supported on platforms like Android where the native GSSAPI shim is not available.&lt;/p&gt;
&lt;h3&gt;Describe the solution you'd like&lt;/h3&gt;
&lt;p&gt;Remove any interop dependency on &lt;code&gt;System.Net.Security.Native&lt;/code&gt; for .NET 7 and newer, migrate to &lt;code&gt;NegotiateAuthentication&lt;/code&gt; API instead.&lt;/p&gt;
</description>
      <pubDate>Wed, 13 Jul 2022 08:32:58 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1669</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1669</link>
      <title>Issue: Reconsider throwing errors by default when the server uses a self-signed certificate - @airbreather</title>
      <description>&lt;p&gt;In 4.0, there was an intentional breaking change to enable encryption by default on connections.  I wholeheartedly appreciate the intent: I truly believe that all internet traffic should be encrypted in transit by default.&lt;/p&gt;
&lt;p&gt;Now, as I understand it, SQL Server instances use self-signed certificates by default unless they are intentionally set up otherwise.  As far as I can tell, whenever &lt;strong&gt;any&lt;/strong&gt; SSL/TLS encryption is in use in &lt;strong&gt;any&lt;/strong&gt; application, for some reason there seems to be this ingrained assumption that people therefore need to be screamed at if there is a potential for MITM attacks, presumably because that's a problem that SSL/TLS encryption &lt;strong&gt;could&lt;/strong&gt; solve, and therefore the user &lt;strong&gt;might&lt;/strong&gt; be using SSL/TLS encryption for that reason.&lt;/p&gt;
&lt;p&gt;So that brings us to a world today that looks something like:&lt;/p&gt;
&lt;p&gt;|&lt;code&gt;Encrypt&lt;/code&gt;|Does the server actually use a self-signed cert?|&lt;code&gt;TrustServerCertificate&lt;/code&gt;|Can packet sniffers steal your data?|Is MITM viable?|Do we throw any errors because MITM is viable?|
|-|-|-|-|-|-|
|&lt;code&gt;False&lt;/code&gt;|&lt;em&gt;|&lt;/em&gt;|Yes|Yes|No|
|unspecified or &lt;code&gt;True&lt;/code&gt;|No|*|No|No|No|
|unspecified or &lt;code&gt;True&lt;/code&gt;|Yes|unspecified or &lt;code&gt;False&lt;/code&gt;|No|Yes|Yes|
|unspecified or &lt;code&gt;True&lt;/code&gt;|Yes|&lt;code&gt;True&lt;/code&gt;|No|Yes|No|&lt;/p&gt;
&lt;p&gt;So in other words, in all versions of &lt;code&gt;Microsoft.Data.SqlClient&lt;/code&gt; prior to 4.x, as well as all versions of &lt;code&gt;System.Data.SqlClient&lt;/code&gt; dating back to when it was first added to .NET Framework 1.x, without any explicit action taken by someone in charge of creating a &lt;code&gt;SqlConnection&lt;/code&gt; (or writing the corresponding connection string), an unsophisticated packet sniffer could easily steal your data over the wire, and a sophisticated attacker could even alter the data in transit without you ever knowing anything.&lt;/p&gt;
&lt;p&gt;Starting with 4.x, &lt;code&gt;Microsoft.Data.SqlClient&lt;/code&gt; has changed that so that connections by default are less vulnerable to unsophisticated attacks, and in many cases they are &lt;strong&gt;also&lt;/strong&gt; less vulnerable to the sophisticated attack I described above (depending on server configuration), but connections to many servers are still just as vulnerable as they have always been.&lt;/p&gt;
&lt;p&gt;To be more explicit, the part of this situation that's weird to me is that 4.x and higher are &lt;strong&gt;more secure in all cases&lt;/strong&gt; by default, but then there are &lt;strong&gt;some cases&lt;/strong&gt; where 4.x and higher aren't &lt;strong&gt;even more extra secure than that&lt;/strong&gt;, and it's the fact that we aren't &lt;strong&gt;even more extra secure&lt;/strong&gt; that leads to &lt;strong&gt;more error messages about security&lt;/strong&gt; even though we're &lt;strong&gt;more secure than ever&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;As someone who has been developing .NET applications using SQL Server databases for over 10 years, I find it odd that I am required to engage with this topic, especially since all our SQL Server instances are only accessible through either intranet or VPN.  I would understand it a bit more if I were &lt;strong&gt;opting-in&lt;/strong&gt; to encryption, as you have no way of knowing my intentions for doing so (do I intend for encryption to be a defense against MITM attacks, or do I just want to thwart unsophisticated packet sniffers?).&lt;/p&gt;
&lt;p&gt;Is there a viable path that can get us to a world that looks something like:
|&lt;code&gt;Encrypt&lt;/code&gt;|Does the server actually use a self-signed cert?|&lt;code&gt;TrustServerCertificate&lt;/code&gt;|Can packet sniffers steal your data?|Is MITM viable?|Do we throw any errors because MITM is viable?|
|-|-|-|-|-|-|
|&lt;code&gt;False&lt;/code&gt;|&lt;em&gt;|&lt;/em&gt;|Yes|Yes|No|
|unspecified or &lt;code&gt;True&lt;/code&gt;|No|*|No|No|No|
|unspecified or &lt;code&gt;True&lt;/code&gt;|Yes|&lt;strong&gt;specified&lt;/strong&gt; as &lt;code&gt;False&lt;/code&gt;|No|Yes|Yes|
|&lt;strong&gt;specified&lt;/strong&gt; as &lt;code&gt;True&lt;/code&gt;|Yes|unspecified or &lt;code&gt;False&lt;/code&gt;|No|Yes|Yes|
|unspecified|Yes|unspecified or &lt;code&gt;True&lt;/code&gt;|No|Yes|No|&lt;/p&gt;
&lt;p&gt;Considering each of those scenarios from the perspective of someone upgrading from &lt;code&gt;System.Data.SqlClient&lt;/code&gt; or from &lt;code&gt;Microsoft.Data.SqlClient&lt;/code&gt; pre-4.x, everything that used to work before is going to continue to work going forward (unless my workflow involves using Wireshark to sniff packets entering / leaving my own system, but I certainly don't want to advocate for avoiding &lt;a href="https://xkcd.com/1172"&gt;&lt;strong&gt;every&lt;/strong&gt; conceivable breaking change&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Compared to &lt;code&gt;Microsoft.Data.SqlClient&lt;/code&gt; 4.x and what I've observed from preview of 5.0.0 so far, the only people who will be negatively impacted are those who &lt;strong&gt;implicitly&lt;/strong&gt; rely on &lt;strong&gt;both&lt;/strong&gt; the encryption &lt;strong&gt;and&lt;/strong&gt; the MITM protection offered by encryption.  I honestly can't advocate for this group, but I suspect that people who specifically need the full range of protections offered by TLS will accept that they will have to opt-in to them, as long as they're made aware of it.&lt;/p&gt;
&lt;p&gt;Thoughts?&lt;/p&gt;
&lt;p&gt;(edit 1: make the new proposed behavior the last row in the table, instead of sandwiching it between two &amp;quot;current behavior&amp;quot; rows)
(edit 2: fix a mistake on one of the rows.  it's when &lt;code&gt;TrustServerCertificate&lt;/code&gt; is unspecified or &lt;strong&gt;&lt;code&gt;False&lt;/code&gt;&lt;/strong&gt; that should error out)&lt;/p&gt;
</description>
      <pubDate>Thu, 07 Jul 2022 19:42:09 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1668</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1668</link>
      <title>Issue: Microsoft.Data.SQLClient throws exception trying to access Azure SQL Database - @sh4d0v1</title>
      <description>&lt;p&gt;I am running two .NET6 apps on Linux Azure Web App containers, which need connections to a Azure SQL database.
The first one connects to the DB without problem, the second one, deployed on the same service plan with the same configuration, throws the following generic exception:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; Unhandled exception. Microsoft.Data.SqlClient.SqlException (0x80131904): A connection was successfully established with the server, but then an error occurred during the login process. (provider: TCP Provider, error: 35 - An internal exception was caught)
  ---&amp;gt; System.IO.IOException: Unable to write data to the transport connection: Connection reset by peer.
  ---&amp;gt; System.Net.Sockets.SocketException (104): Connection reset by peer
    at System.Net.Sockets.NetworkStream.Write(Byte[] buffer, Int32 offset, Int32 count)
    --- End of inner exception stack trace ---
    at System.Net.Sockets.NetworkStream.Write(Byte[] buffer, Int32 offset, Int32 count)
    at System.IO.Stream.Write(ReadOnlySpan`1 buffer)
    at System.Net.Sockets.NetworkStream.Write(ReadOnlySpan`1 buffer)
    at Microsoft.Data.SqlClient.SNI.SslOverTdsStream.Write(ReadOnlySpan`1 buffer)
    at Microsoft.Data.SqlClient.SNI.SslOverTdsStream.Write(Byte[] buffer, Int32 offset, Int32 count)
    at System.Net.Security.SslStream.WriteSingleChunk[TIOAdapter](TIOAdapter writeAdapter, ReadOnlyMemory`1 buffer)
    at System.Net.Security.SslStream.WriteAsyncInternal[TIOAdapter](TIOAdapter writeAdapter, ReadOnlyMemory`1 buffer)
    at System.Net.Security.SslStream.Write(Byte[] buffer, Int32 offset, Int32 count)
    at Microsoft.Data.SqlClient.SNI.SNIPacket.WriteToStream(Stream stream)
    at Microsoft.Data.SqlClient.SNI.SNITCPHandle.Send(SNIPacket packet)
    at Microsoft.Data.ProviderBase.DbConnectionPool.CheckPoolBlockingPeriod(Exception e)
    at Microsoft.Data.ProviderBase.DbConnectionPool.CreateObject(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
    at Microsoft.Data.ProviderBase.DbConnectionPool.UserCreateRequest(DbConnection owningObject, DbConnectionOptions userOptions, DbConnectionInternal oldConnection)
    at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, UInt32 waitForMultipleObjectsTimeout, Boolean allowCreate, Boolean onlyOneCheckConnection, DbConnectionOptions userOptions, DbConnectionInternal&amp;amp; connection)
    at Microsoft.Data.ProviderBase.DbConnectionPool.TryGetConnection(DbConnection owningObject, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal&amp;amp; connection)
    at Microsoft.Data.ProviderBase.DbConnectionFactory.TryGetConnection(DbConnection owningConnection, TaskCompletionSource`1 retry, DbConnectionOptions userOptions, DbConnectionInternal oldConnection, DbConnectionInternal&amp;amp; connection)
    at Microsoft.Data.ProviderBase.DbConnectionInternal.TryOpenConnectionInternal(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
    at Microsoft.Data.ProviderBase.DbConnectionClosed.TryOpenConnection(DbConnection outerConnection, DbConnectionFactory connectionFactory, TaskCompletionSource`1 retry, DbConnectionOptions userOptions)
    at Microsoft.Data.SqlClient.SqlConnection.TryOpen(TaskCompletionSource`1 retry, SqlConnectionOverrides overrides)
    at Microsoft.Data.SqlClient.SqlConnection.Open(SqlConnectionOverrides overrides)
    at Microsoft.Data.SqlClient.SqlConnection.Open()
    at BBB.Identity.Configuration.IdentityServerConfigurationProvider.Load() in D:\a\1\s\BBB.Identity\Configuration\IdentityServerConfigurationProvider.cs:line 26
    at Microsoft.Extensions.Configuration.ConfigurationRoot..ctor(IList`1 providers)
    at Microsoft.Extensions.Configuration.ConfigurationBuilder.Build()
    at BBB.Identity.Configuration.IdentityServerConfigurationManager.SetIdentityConfigurationRoot() in D:\a\1\s\BBB.Identity\Configuration\IdentityServerConfigurationManager.cs:line 34
    at BBB.Identity.Configuration.IdentityServerConfigurationManager.InitializeIdentityServerConfiguration() in D:\a\1\s\BBB.Identity\Configuration\IdentityServerConfigurationManager.cs:line 17
    at Program.&amp;lt;Main&amp;gt;$(String[] args) in D:\a\1\s\BBB.Identity\Program.cs:line 15
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;To reproduce&lt;/h3&gt;
&lt;p&gt;Not sure how to provide reproducibility as it is a private project.
I myself can't reproduce the issue somewhere else: When deploying the app locally and connecting it to the Azure SQL db it works.&lt;/p&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;A working connection to the Azure SQL database.&lt;/p&gt;
&lt;h3&gt;Further technical details&lt;/h3&gt;
&lt;p&gt;Microsoft.Data.SqlClient version: 4.1.0
.NET target: .NET6(.0.301)
SQL Server version: Azure SQL database
Operating system: Azure App Service Plan Linux&lt;/p&gt;
&lt;p&gt;Both apps are on the same service plan, have the same connection string, the same configuration and the same software versions. I can not imagine where the difference lies, which could produce the connection error.&lt;/p&gt;
</description>
      <pubDate>Wed, 06 Jul 2022 12:32:19 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/SqlClient/issues/1664</guid>
      <link>https://github.com/dotnet/SqlClient/issues/1664</link>
      <title>Issue:  Microsoft.Data.SqlClient.SqlConnection.GetOpenTdsConnection throws random exception invalid operation, connection closed - @daxu7509</title>
      <description>&lt;h3&gt;Describe the bug&lt;/h3&gt;
&lt;p&gt;posted on stackoverflow as &lt;a href="https://stackoverflow.com/questions/72797229/mysterious-microsoft-data-sqlclient-sqlconnection-getopentdsconnection"&gt;well&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was using System.Data.Client and see above error, according to this &lt;a href="https://github.com/dotnet/SqlClient/issues/54"&gt;fix&lt;/a&gt;, I should upgrade to Microsoft.Data.Cient, so I did that (.net framework 4.8 windows running environment)&lt;/p&gt;
&lt;p&gt;However, from the log, I still see the same error, the only difference is it was  System.Data.SqlClient.SqlConnection.GetOpenTdsConnection, now it is  Microsoft.Data.SqlClient.SqlConnection.GetOpenTdsConnection.&lt;/p&gt;
&lt;p&gt;For the fix mentioned in the previous ticket, does it apply to .net framework 4.8 on an azure windows app service?&lt;/p&gt;
</description>
      <pubDate>Wed, 29 Jun 2022 07:47:17 Z</pubDate>
    </item>
  </channel>
</rss>