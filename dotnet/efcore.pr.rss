<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dotnet/efcore Pull Requests</title>
    <description>Pull Requests from https://github.com/dotnet/efcore, generated by https://github.com/meziantou/IssuesToRss/</description>
    <managingEditor>meziantousite@outlook.com</managingEditor>
    <ttl>60</ttl>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29181</guid>
      <link>https://github.com/dotnet/efcore/pull/29181</link>
      <title>PR: [release/7.0] Reset LocalView when returning context to the pool - @ajcvickers</title>
      <description>&lt;p&gt;Fixes #29164&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fix memory leak when using context pooling by not continually registering a listener every time a context is obtained from the pool and a &lt;code&gt;DbSet.Local&lt;/code&gt; is used.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Customer impact&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Fixes memory leak when using context pooling, which is becoming more common.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Customer reported.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regression&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;New testing added.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Risk&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Low; small change.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;This change treats the LocalView as one of the resettable services and resets it rather than severing when the context is returned to the pool. This fixes a memory leak because the view was previously recreated and re-registered with &lt;em&gt;the same StateManager&lt;/em&gt; every time the context was re-used, these registrations were never cleared. But since the StateManager is reused, the local views can also be reused, meaning that the registration is retained rather than repeated across uses of the context instance.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 12:31:26 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29178</guid>
      <link>https://github.com/dotnet/efcore/pull/29178</link>
      <title>PR: Update XML documentation for SQL query APIs - @roji</title>
      <description>&lt;p&gt;Part of https://github.com/dotnet/EntityFramework.Docs/issues/3971&lt;/p&gt;
&lt;p&gt;In draft as the Cosmos SQL query APIs need to be updated too, and we need to decide on #29177.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 15:20:13 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29160</guid>
      <link>https://github.com/dotnet/efcore/pull/29160</link>
      <title>PR: Update Readme - @smitpatel</title>
      <description>&lt;p&gt;We moved our public build definitions to different DevOps org so previous links were giving 404&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 22:55:57 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29159</guid>
      <link>https://github.com/dotnet/efcore/pull/29159</link>
      <title>PR: [release/7.0] Move to Ubuntu 22.04 - missed parts - @smitpatel</title>
      <description>&lt;p&gt;Part of #28739&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 22:47:22 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29158</guid>
      <link>https://github.com/dotnet/efcore/pull/29158</link>
      <title>PR: [release/6.0] Move to Ubuntu 22.04 - @smitpatel</title>
      <description>&lt;p&gt;Part of #28739&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 22:44:25 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29157</guid>
      <link>https://github.com/dotnet/efcore/pull/29157</link>
      <title>PR: [release/3.1] Move to Ubuntu 22.04 - @smitpatel</title>
      <description>&lt;p&gt;Part of #28739&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 22:42:19 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29155</guid>
      <link>https://github.com/dotnet/efcore/pull/29155</link>
      <title>PR: Reduce indentation in SqlTranslator - @smitpatel</title>
      <description>&lt;p&gt;Resolves #28098&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 20:52:57 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29154</guid>
      <link>https://github.com/dotnet/efcore/pull/29154</link>
      <title>PR: Cleanup in EF.Property - @smitpatel</title>
      <description>&lt;p&gt;Resolves #28783&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 20:40:00 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29145</guid>
      <link>https://github.com/dotnet/efcore/pull/29145</link>
      <title>PR: [release/7.0-rc2] Update to SQLitePCLRaw 2.1.2 - @bricelam</title>
      <description>&lt;p&gt;This is the stable version that contains the Wasm libraries for .NET 7.&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 16:41:10 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29139</guid>
      <link>https://github.com/dotnet/efcore/pull/29139</link>
      <title>PR: Allow specify property value without lambda in ExecuteUpdate  - @roji</title>
      <description>&lt;p&gt;Fixes #28968&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a non-breaking tweak to a new API introduced in EF7. It allows a simpler form to be used for &lt;code&gt;ExecuteUpdate&lt;/code&gt;. Specifcally,&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;.SetProperty(p =&amp;gt; p.Name, &amp;quot;Shay&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;can be used instead of&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-C#"&gt;.SetProperty(p =&amp;gt; p.Name, _ =&amp;gt; &amp;quot;Shay&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There may be many calls to &lt;code&gt;SetProperty&lt;/code&gt; and setting to a value that does not depend on any other values in the entity is a very common case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Customer impact&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Shorter, more readable code for a frequently used common case.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Customer suggestion.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regression&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No. New API, and this is non-breaking for existing use of that API in RC1.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;New tests added.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Risk&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Low; non-breaking tweak to new API.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;@smitpatel as discussed offline. Added various closure tests, funcletizer seems to be humming along with 100% efficiency.&lt;/p&gt;
&lt;p&gt;AFAICT, switching from Expression to regular non-Expression doesn't seem to create particular difficulties for dynamic expression construction. Here's a sample:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-c#"&gt;await ctx.Blogs.ExecuteUpdateAsync(sp =&amp;gt; sp
    .SetProperty(b =&amp;gt; b.Name, &amp;quot;Hello&amp;quot;));

// Same thing dynamically:
var setPropertyMethodInfo = typeof(SetPropertyCalls&amp;lt;&amp;gt;).MakeGenericType(typeof(Blog))
    .GetMethods()
    .Single(m =&amp;gt; m.Name == nameof(SetPropertyCalls&amp;lt;Blog&amp;gt;.SetProperty)
                 &amp;amp;&amp;amp; m.GetParameters()[0].ParameterType.IsGenericType
                 &amp;amp;&amp;amp; m.GetParameters()[0].ParameterType.GetGenericTypeDefinition() == typeof(Func&amp;lt;,&amp;gt;)
                 &amp;amp;&amp;amp; !m.GetParameters()[1].ParameterType.IsGenericType)
    .MakeGenericMethod(typeof(string));

var setPropertyCallsParam = Expression.Parameter(typeof(SetPropertyCalls&amp;lt;Blog&amp;gt;), &amp;quot;sp&amp;quot;);
var blogParam1 = Expression.Parameter(typeof(Blog), &amp;quot;b&amp;quot;);

Expression&amp;lt;Func&amp;lt;SetPropertyCalls&amp;lt;Blog&amp;gt;, SetPropertyCalls&amp;lt;Blog&amp;gt;&amp;gt;&amp;gt; setProperties =
    Expression.Lambda&amp;lt;Func&amp;lt;SetPropertyCalls&amp;lt;Blog&amp;gt;, SetPropertyCalls&amp;lt;Blog&amp;gt;&amp;gt;&amp;gt;(
        Expression.Call(
            setPropertyCallsParam,
            setPropertyMethodInfo,
            Expression.Lambda&amp;lt;Func&amp;lt;Blog, string&amp;gt;&amp;gt;(Expression.Property(blogParam1, nameof(Blog.Name)), blogParam1),
            Expression.Constant(&amp;quot;Hello&amp;quot;)),
        setPropertyCallsParam);

await ctx.Blogs.ExecuteUpdateAsync(setProperties);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What do you think?&lt;/p&gt;
&lt;p&gt;Closes #28968&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 10:39:35 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29138</guid>
      <link>https://github.com/dotnet/efcore/pull/29138</link>
      <title>PR: Sproc test fixes around concurrency tokens - @roji</title>
      <description>&lt;p&gt;Test-only fix for 7.0.&lt;/p&gt;
&lt;p&gt;Closes #29135&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 08:39:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29134</guid>
      <link>https://github.com/dotnet/efcore/pull/29134</link>
      <title>PR: Async fix for "Generate values for PK properties that are also self-referencing FK properties" - @ajcvickers</title>
      <description>&lt;p&gt;See #22585, #22573, #26448&lt;/p&gt;
&lt;p&gt;Async code pat was not fixed in original PR. However, this was not exposed until additional bug fix for #26448 in EF7 RC2&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using the async overload of &lt;code&gt;Add&lt;/code&gt; fails to generate a key value for TPT mappings where the primary keys of sub-tables are also foreign keys to the main table.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Customer impact&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Exception when using &lt;code&gt;AddAsync&lt;/code&gt; in many TPT scenarios.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Found while writing samples for EF7.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regression&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Yes; worked in EF Core 6.0.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Added more use of &lt;code&gt;AddAsync&lt;/code&gt; in tests.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Risk&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Low; async code path was missing a check that existed in the sync code path.&lt;/p&gt;
</description>
      <pubDate>Sun, 18 Sep 2022 21:11:37 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29133</guid>
      <link>https://github.com/dotnet/efcore/pull/29133</link>
      <title>PR: Don't fixup to deleted entities - @ajcvickers</title>
      <description>&lt;p&gt;The new nested entity was being fixed up to the deleted double-nested entities.&lt;/p&gt;
&lt;p&gt;Fixes #29085&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When a nested owned entity that itself has a nested owned entity is replaced and a navigation to the double-nested entity is set to null, then new nested entity is fixed up to the deleted double-nested entity.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Customer impact&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The double-nested entity is not deleted when it should be, leading to incorrect data in the database.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Customer reported.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regression&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No; same behavior in 6.0. We will consider porting to 6.0.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Significant testing added around double-nested owned entities.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Risk&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Low; bug fix for double-nested entities.&lt;/p&gt;
</description>
      <pubDate>Sun, 18 Sep 2022 11:17:52 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29126</guid>
      <link>https://github.com/dotnet/efcore/pull/29126</link>
      <title>PR: [release/7.0] Scaffolding: Don't scaffold HasColumnOrder - @bricelam</title>
      <description>&lt;p&gt;Fixes #29007&lt;/p&gt;
&lt;h3&gt;Customer impact&lt;/h3&gt;
&lt;p&gt;Without this, a lot of unncessary &lt;code&gt;HasColumnOrder&lt;/code&gt; calls are generated in the scaffolded code.&lt;/p&gt;
&lt;h3&gt;Regression?&lt;/h3&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;h3&gt;Risk&lt;/h3&gt;
&lt;p&gt;Low. This more closely resembles the code we had in EF Core 6.0.&lt;/p&gt;
&lt;h3&gt;Verification&lt;/h3&gt;
&lt;p&gt;Automated tests added.&lt;/p&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 21:10:00 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29122</guid>
      <link>https://github.com/dotnet/efcore/pull/29122</link>
      <title>PR: Reverse engineering of Dynamics CRM TDS endpoint and Synapse Serverless SQL Pool - @ErikEJ</title>
      <description>&lt;p&gt;…Synapse Serverless SQL Pool SKUs for query only operations&lt;/p&gt;
&lt;p&gt;Index query breaks on TDS endpoint, but we can just skip it&lt;/p&gt;
&lt;p&gt;sys.views does not exist on TDS endpoint&lt;/p&gt;
&lt;p&gt;No temporal, memory optimized or sequences in these engines&lt;/p&gt;
&lt;p&gt;Rephrase of FK query due to lack of schema functions on TDS endpoint&lt;/p&gt;
&lt;p&gt;Smoke tested against both engines with a CRM schema&lt;/p&gt;
&lt;p&gt;fixes #29121&lt;/p&gt;
</description>
      <pubDate>Fri, 16 Sep 2022 12:19:35 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29118</guid>
      <link>https://github.com/dotnet/efcore/pull/29118</link>
      <title>PR: Templates: Specify a groupIdentity for ef-templates - @bricelam</title>
      <description>&lt;p&gt;Needed for VB templates. https://github.com/efcore/EFCore.VisualBasic/pull/83? /cc @lorcQc&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;EF7 allows templates to be used for scaffolding a DbContext and model from an existing database. We implemented C# support and provided extension points for other languages. This change is needed for the in-progress community implementation of VB support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Customer impact&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Allows the community to add VB support for scaffolding templates.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How found&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Community work implementing VB support.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Regression&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No. New feature.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The VB implementation will be the primary testing of this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Risk&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Low; no impact on C# support.&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 21:45:43 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29114</guid>
      <link>https://github.com/dotnet/efcore/pull/29114</link>
      <title>PR: Override existing explicitly configured values when moving annotations on making owned type shared - @ajcvickers</title>
      <description>&lt;p&gt;Fixes #28091&lt;/p&gt;
&lt;p&gt;This is because property configuration done by pre-convention configuration is explicit, but if that has been changed before the type is made owned, then those changes are lost because the pre-convention configuration is not overwritten.&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 16:15:21 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29107</guid>
      <link>https://github.com/dotnet/efcore/pull/29107</link>
      <title>PR: Move to ubuntu22.04 - @smitpatel</title>
      <description>&lt;p&gt;Resolves #28739&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 01:52:45 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29105</guid>
      <link>https://github.com/dotnet/efcore/pull/29105</link>
      <title>PR: Scaffolding: Generate better navigation name when FK property ends wi… - @smitpatel</title>
      <description>&lt;p&gt;…th guid&lt;/p&gt;
&lt;p&gt;Resolves #26990&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 00:42:20 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29102</guid>
      <link>https://github.com/dotnet/efcore/pull/29102</link>
      <title>PR: Update versions for 7.0.0 RTM - @dougbu</title>
      <description />
      <pubDate>Wed, 14 Sep 2022 21:01:25 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29095</guid>
      <link>https://github.com/dotnet/efcore/pull/29095</link>
      <title>PR: First round of trimming annotation work - @roji</title>
      <description>&lt;p&gt;To make basic save/query scenarios work with aggressive trimming, as long as user types are properly preserved. This is a  conservative/safe wave of annotations that generally avoids risky suppressions; many warnings are still emitted by the linker, but basic scenarios still work. I've kept non-annotation code changes to a minimum, but I did some simple ones were done.&lt;/p&gt;
&lt;p&gt;Here are some details and numbers; all scenarios were executed with the modified &lt;a href="https://github.com/dotnet/efcore/blob/d747818c87bad71ebd08b81fb048f205e52f0088/test/EFCore.Trimming.Tests/Program.cs"&gt;trimming tests&lt;/a&gt; we run in CI.&lt;/p&gt;
&lt;p&gt;Trimming mode               | EF size | Total publish dir size | Notes
--------------------------- | ------- | ---------------------- | -----
No trimming                 | 4588kb  | 93MB                   |
Partial                     | 4588kb  | 54MB                   | Default before 7.0, ASP.NET default in 7.0
Aggressive (before this PR) | 380kb   | 34MB                   | Application fails.
Aggressive (after this PR)  | 3384kb  | 34MB                   | Console app default starting with 7.0. Application works.&lt;/p&gt;
&lt;p&gt;To summarize, aggressive trimming mode cuts down 1204kb of pure EF size, totalling a 26% reduction in size. Precise per-assembly sizes are listed below.&lt;/p&gt;
&lt;details&gt;
&lt;summary&gt;EF sizes without trimming&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;28      Microsoft.EntityFrameworkCore.Abstractions.dll
24      Microsoft.EntityFrameworkCore.Analyzers.dll
2144    Microsoft.EntityFrameworkCore.dll
1904    Microsoft.EntityFrameworkCore.Relational.dll
488     Microsoft.EntityFrameworkCore.SqlServer.dll
4588    total
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;EF sizes after aggressive trimming (before this PR)&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;8       Microsoft.EntityFrameworkCore.Abstractions.dll
220     Microsoft.EntityFrameworkCore.dll
116     Microsoft.EntityFrameworkCore.Relational.dll
36      Microsoft.EntityFrameworkCore.SqlServer.dll
380     total
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;details&gt;
&lt;summary&gt;EF sizes after aggressive trimming (after this PR)&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;12      Microsoft.EntityFrameworkCore.Abstractions.dll
1636    Microsoft.EntityFrameworkCore.dll
1432    Microsoft.EntityFrameworkCore.Relational.dll
304     Microsoft.EntityFrameworkCore.SqlServer.dll
3384    total
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;Closes #29092&lt;/p&gt;
&lt;p&gt;/cc @DamianEdwards after this, the TrimmedTodo console sample in https://github.com/DamianEdwards/TrimmedTodo works in .NET 7.0 even without specifying partial trimming.&lt;/p&gt;
</description>
      <pubDate>Wed, 14 Sep 2022 15:26:33 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/efcore/pull/29091</guid>
      <link>https://github.com/dotnet/efcore/pull/29091</link>
      <title>PR: Cosmos: Accept changes for root entities that were not modified but end up being changed due to ETag update - @ajcvickers</title>
      <description>&lt;p&gt;Fixes #26625&lt;/p&gt;
</description>
      <pubDate>Wed, 14 Sep 2022 14:04:07 Z</pubDate>
    </item>
  </channel>
</rss>