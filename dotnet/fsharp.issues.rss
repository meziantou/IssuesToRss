<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>dotnet/fsharp Issues</title>
    <description>Issues from https://github.com/dotnet/fsharp, generated by https://github.com/meziantou/IssuesToRss/</description>
    <managingEditor>meziantousite@outlook.com</managingEditor>
    <ttl>60</ttl>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13965</guid>
      <link>https://github.com/dotnet/fsharp/issues/13965</link>
      <title>Issue: Instance extension methods block legitimate unqualified name resolutions - @dsyme</title>
      <description>&lt;p&gt;From @NiklasGustafsson in TorchSharp repo&lt;/p&gt;
&lt;p&gt;If a C# type has both a nested type C.Name and there is an instance extension method called Name then the latter is always preferred, even for static unqualified resolution&lt;/p&gt;
&lt;p&gt;Repro is something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;
class C {
    class Name { 
        static public void Method() ... 
    }
}

class Extensions {
    static public T Name(T this) { ... }
}

C.Name.Method()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here the extension method is an instance extension method but is being used as a resolution for a static invocation.  It's being used only to report a later error - and instead we should filter on static v. instance in name resolution.&lt;/p&gt;
</description>
      <pubDate>Fri, 23 Sep 2022 11:43:22 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13961</guid>
      <link>https://github.com/dotnet/fsharp/issues/13961</link>
      <title>Issue: [Feature] Packaging FSX files as standalone application - @kant2002</title>
      <description>&lt;p&gt;&lt;strong&gt;Is your feature request related to a problem? Please describe.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;FSX as a scripts sometimes grow to size where they are neither programs, nor simple scripts. Something which you want to show to your manager, or even give you some other employees.
Because they are small, you really don't want to have overhead of project for managing these apps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Describe the solution you'd like&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Example usage&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet fsi myscript.fsx --publish --self-contained 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may even try NativeAOT this way&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet fsi myscript.fsx --publish --self-contained -r win-x64 /p:PublishAot=true 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Concidentally this is good way to test for stale FSX files which has broken paths to references here and there.&lt;/p&gt;
&lt;p&gt;I think this can fill some gap F# usage.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As prototype I have very simple tool&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet tool install --global FSharpPacker
fspack FSharpPacker.Tests\Samples\LoadFile.fsx --self-contained -o test
test\LoadFile.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;https://github.com/kant2002/FSharpPacker/&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 16:01:00 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13960</guid>
      <link>https://github.com/dotnet/fsharp/issues/13960</link>
      <title>Issue: fsc on .NET 6/7 is spawning `dotnet` process - @dsyme</title>
      <description>&lt;p&gt;We noticed that every invocation of &lt;code&gt;fsc&lt;/code&gt; on .NET 6/7 is causing a spawn of dotnet to find the installed .NET SDKs, in order to determine which assembly references are &amp;quot;system&amp;quot; assemblies.&lt;/p&gt;
&lt;p&gt;One attempt to fix that is here #13863&lt;/p&gt;
&lt;p&gt;We should also prioritise a simpler fix as this is causing unnecessary loss of compiler perf.&lt;/p&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 15:05:44 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13957</guid>
      <link>https://github.com/dotnet/fsharp/issues/13957</link>
      <title>Issue: [Automated] PRs inserted in VS build main-32922.71 - @allisonchou</title>
      <description>&lt;p&gt;&lt;a href="https://github.com/dotnet/fsharp/compare/da42031ad1cf0880768dfedac75c782b721cd175...de216eb65d741d01aff5d32a4bdc495ca730290a?w=1"&gt;View Complete Diff of Changes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13946"&gt;Fix 13944 (13946)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13941"&gt;Localized file check-in by OneLocBuild Task: Build definition ID 499: Build ID 1998941 (13941)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Thu, 22 Sep 2022 14:34:50 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13953</guid>
      <link>https://github.com/dotnet/fsharp/issues/13953</link>
      <title>Issue: [source-build] Bootstrapping the F# compiler fails with a "no entrypoint" warning - @crummel</title>
      <description>&lt;p&gt;In the complete source-built SDK, our Linux partners will follow this procedure:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Source-build the SDK using the Microsoft-built SDK, producing the &amp;quot;stage 1 SDK&amp;quot;.&lt;/li&gt;
&lt;li&gt;Source-build the SDK again using the stage 1 SDK, producing the &amp;quot;stage 2 SDK&amp;quot;, which is completely free of prebuilts and was not built using any prebuilt binaries.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this process, we are seeing an issue in F#.  The stage 1 SDK is produced as normal, but when attempting to compile the stage 2 SDK, the F# &lt;code&gt;Proto&lt;/code&gt; build fails with &lt;code&gt;warning: no entrypoint specified in executable binary&lt;/code&gt;.  This warning was removed temporarily in https://github.com/dotnet/installer/pull/14564 and https://github.com/dotnet/installer/pull/14565.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 20:45:49 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13951</guid>
      <link>https://github.com/dotnet/fsharp/issues/13951</link>
      <title>Issue: Move to MetadataAsSource as oppose of creating new project context - @vzarytovskii</title>
      <description>&lt;p&gt;Chatted with @tmat about an issue we are having navigating to metadata, we need to move to using &lt;a href="https://sourceroslyn.io/#Microsoft.CodeAnalysis.Features/MetadataAsSource/MetadataAsSourceWorkspace.cs,2bd16135ce2791d7,references"&gt;MetadataAsSource&lt;/a&gt; instead of creating an on-demand project context, as we do now.&lt;/p&gt;
&lt;p&gt;Project contexts have different purpose. We should move off of it.&lt;/p&gt;
&lt;p&gt;Additionally, we need to support Source Link go to definition in VS. @davidwengier may know more about the topic.&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 16:33:56 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13948</guid>
      <link>https://github.com/dotnet/fsharp/issues/13948</link>
      <title>Issue: F# folder order not displayed correctly in Solution Explorer - @vsfeedback</title>
      <description>&lt;p&gt;&lt;em&gt;This issue has been moved from &lt;a href="https://developercommunity.visualstudio.com/t/F-folder-order-not-displayed-correctly-/10149550"&gt;a ticket on Developer Community&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[severity:It's more difficult to complete my work]
I'm working in an F# project (using .NET 6 and VS 2022 17.3.4) and my files are randomly not showing up in the correct order. In this case, the F# files under a subfolder are displayed with all of the folders on top and all of the files in the folder underneath, despite the fact that in the *.fsproj file there are 4 files, two folders, then one file at the end.&lt;/p&gt;
&lt;p&gt;This appears to work in another subfolder under the same project that is showing 1 file, 2 folders, and 1 file at the end correctly.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Original Comments&lt;/h3&gt;
&lt;h4&gt;Joshua Marner on 9/15/2022, 09:15 PM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;h4&gt;Feedback Bot on 9/16/2022, 04:00 AM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Original Solutions&lt;/h3&gt;
&lt;p&gt;(no solutions)&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 13:43:42 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13947</guid>
      <link>https://github.com/dotnet/fsharp/issues/13947</link>
      <title>Issue: F# editor does not consider begin..end blocks when expanding selection - @vsfeedback</title>
      <description>&lt;p&gt;&lt;em&gt;This issue has been moved from &lt;a href="https://developercommunity.visualstudio.com/t/F-editor-does-not-consider-beginend-b/10138374"&gt;a ticket on Developer Community&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;[severity:It bothers me. A fix would be nice]
In the F# editor, when you invoke the Edit.ExpandSelection command, the selection should stop around the begin..end blocks.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Original Comments&lt;/h3&gt;
&lt;h4&gt;Feedback Bot on 9/5/2022, 03:35 AM:&lt;/h4&gt;
&lt;p&gt;(private comment, text removed)&lt;/p&gt;
&lt;hr /&gt;
&lt;h3&gt;Original Solutions&lt;/h3&gt;
&lt;p&gt;(no solutions)&lt;/p&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 13:43:13 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13945</guid>
      <link>https://github.com/dotnet/fsharp/issues/13945</link>
      <title>Issue: [Automated] PRs inserted in VS build main-32921.43 - @allisonchou</title>
      <description>&lt;p&gt;&lt;a href="https://github.com/dotnet/fsharp/compare/430d645d778ec0db10ad7ad0b02de9fab3ce5647...da42031ad1cf0880768dfedac75c782b721cd175?w=1"&gt;View Complete Diff of Changes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13935"&gt;Fix e2e tests for the combo provider (13935)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13930"&gt;Fix e2e tests for the combo provider (13930)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13924"&gt;&lt;code&gt;Cherry-Pick&lt;/code&gt; Fix 13805 (#13815) (13924)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13912"&gt;Shadowcopyduringdebug (13912)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13784"&gt;Consolidating code around process exiting (13784)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13856"&gt;Remove unnecessary .NET Standard 1.x packages. (13856)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13894"&gt;add a guard that checks if the lenght of fittedArgs is accesible by index (13894)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13904"&gt;Allow vsfsi to display output as partial lines. (13904)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13908"&gt;Localized file check-in by OneLocBuild Task: Build definition ID 499: Build ID 1994213 (13908)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13890"&gt;Print attributes of nested modules in signatures. (13890)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13891"&gt;Print properties of attribute in signatures. (13891)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13700"&gt;Print int[] as int array. (13700)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13899"&gt;&lt;code&gt;Cherry-pick for 6.x.x servicing&lt;/code&gt; Custom equality on ModuleOrNamespaceKind (#13693) (13899)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 11:49:27 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13944</guid>
      <link>https://github.com/dotnet/fsharp/issues/13944</link>
      <title>Issue: Ctrl+D / Ctrl+L do not work in fsi repl - @abonie</title>
      <description>&lt;p&gt;Ctrl+D and Ctrl+L do not work in &lt;code&gt;dotnet fsi&lt;/code&gt; repl&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repro steps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Press Ctrl+D or Ctrl+L in an interactive session of &lt;code&gt;dotnet fsi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Standard cli behavior:
Ctrl+D if pressed at the beginning of a line will exit the program
Ctrl+L will clear the screen&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Actual behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An EOT (^D) or Form Feed (^L) character is typed&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; dotnet fsi

Microsoft (R) F# Interactive version 12.0.5.0 for F# 7.0
Copyright (c) Microsoft Corporation. All Rights Reserved.

For help type #help;;

&amp;gt; ^D^L
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Known workarounds&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;#quit&lt;/code&gt; (or &lt;code&gt;exit&lt;/code&gt;) and &lt;code&gt;#clear&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related information&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Provide any related information (optional):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operating system: Windows 11&lt;/li&gt;
&lt;li&gt;.NET Runtime kind (.NET Core, .NET Framework, Mono): .NET Core, SDK version 7.0.100-rc.1.22431.12&lt;/li&gt;
&lt;li&gt;Works as expected on .NET Core, SDK version 7.0.100-preview.7.22377.5&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Wed, 21 Sep 2022 08:53:47 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13927</guid>
      <link>https://github.com/dotnet/fsharp/issues/13927</link>
      <title>Issue: VS2022 Colouring is broken when resetting "Fonts and Colors" to default values - @vzarytovskii</title>
      <description>&lt;p&gt;&lt;strong&gt;DISCLAIMER:&lt;/strong&gt; Please, don't try reproducing it on your VS 17.4+ instance, since you will likely have a broken colouring till the fix is released.&lt;/p&gt;
&lt;p&gt;When resetting fonts and colors to default values (Tools -&amp;gt; Options -&amp;gt; Environment -&amp;gt; Fonts and Colors), reloading VS and deleting &lt;code&gt;.vs&lt;/code&gt;, VS treats everything as plain text (except keywords):
&lt;img src="https://user-images.githubusercontent.com/1260985/191036298-8fcf4558-c6db-4ef8-bbad-9a8bfe35cee8.png" alt="image" /&gt;&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 14:05:27 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13926</guid>
      <link>https://github.com/dotnet/fsharp/issues/13926</link>
      <title>Issue: BadImageFormatException : Bad IL format when using `base` - @abelbraaksma</title>
      <description>&lt;p&gt;Using &lt;code&gt;base.XXX&lt;/code&gt; to call a base method causes a &lt;code&gt;BadImageFormatException&lt;/code&gt; to be raised.&lt;/p&gt;
&lt;p&gt;EDIT: it looks like F# allowing me to call an abstract method, as the &lt;code&gt;base&lt;/code&gt; class is abstract. This, I believe, should not be allowed and JIT therefore throws a &lt;code&gt;BadImageFormatException&lt;/code&gt;. If you try to write code in F# with an &lt;code&gt;AbstractClass&lt;/code&gt; and a derived class, you'd receive a normal compile-time error.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repro steps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following code (requires Giraffe and FsUnit to run the test) throws a &lt;code&gt;BadImageFormatException&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;namespace Test

open Giraffe
open Xunit
open FsUnit.Xunit

open System.Text.Json
open System.Text.Json.Serialization

type StringTrimJsonSerializer(o: JsonSerializerOptions) =
    inherit JsonConverter&amp;lt;string&amp;gt;()

    override this.Read(reader, _, _) =
        match reader.TokenType with
        | JsonTokenType.String -&amp;gt; reader.GetString().Trim()
        | _ -&amp;gt; JsonException(&amp;quot;Type is not a string&amp;quot;) |&amp;gt; raise

    /// This causes a BadImageFormatException
    override this.Write(writer, objectToWrite, options) = base.Write(writer, objectToWrite, options)


module SerializationTests =

    type SomeType = { Amount: decimal; Currency: string }

    let serialize item =
        let options = SystemTextJson.Serializer.DefaultOptions
        StringTrimJsonSerializer options |&amp;gt; options.Converters.Add
        JsonSerializer.Serialize(item, options)

    let deserialize&amp;lt;'T&amp;gt; (stringValue: string) =
        let options = SystemTextJson.Serializer.DefaultOptions
        StringTrimJsonSerializer options |&amp;gt; options.Converters.Add
        JsonSerializer.Deserialize&amp;lt;'T&amp;gt;(stringValue, options)

    [&amp;lt;Fact&amp;gt;]
    let ``Roundtip type should trim currency whitespace`` () =
        { Amount = 42.99M; Currency = &amp;quot;  USD   &amp;quot; }
        |&amp;gt; serialize
        |&amp;gt; deserialize&amp;lt;SomeType&amp;gt;
        |&amp;gt; should equal { Amount = 42.99M; Currency = &amp;quot;USD&amp;quot; }
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Expected behavior&lt;/h3&gt;
&lt;p&gt;Should call the base method or give compile error if such method doesn't exist.&lt;/p&gt;
&lt;h3&gt;Actual behavior&lt;/h3&gt;
&lt;p&gt;Throws:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;BadImageFormatException : Bad IL format.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;Known workarounds&lt;/h3&gt;
&lt;p&gt;Don't use &lt;code&gt;base&lt;/code&gt; in a derived method.&lt;/p&gt;
&lt;h3&gt;Related information&lt;/h3&gt;
&lt;p&gt;On dotnet 6, using &lt;code&gt;System.Text.Json&lt;/code&gt; serialization BCL classes, Windows 10/11.&lt;/p&gt;
&lt;p&gt;EDIT, the IL of the offending code looks as follows (Release build):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.method public hidebysig virtual 
	instance void Write (
		class [System.Text.Json]System.Text.Json.Utf8JsonWriter writer,
		string objectToWrite,
		class [System.Text.Json]System.Text.Json.JsonSerializerOptions options
	) cil managed 
{
	// Method begins at RVA 0x316c
	// Header size: 1
	// Code size: 10 (0xa)
	.maxstack 8

	// base.Write(writer, objectToWrite, options);
	IL_0000: ldarg.0
	IL_0001: ldarg.1
	IL_0002: ldarg.2
	IL_0003: ldarg.3
	IL_0004: call instance void class [System.Text.Json]System.Text.Json.Serialization.JsonConverter`1&amp;lt;string&amp;gt;::Write(class [System.Text.Json]System.Text.Json.Utf8JsonWriter, !0, class [System.Text.Json]System.Text.Json.JsonSerializerOptions)
	// }
	IL_0009: ret
} 
&lt;/code&gt;&lt;/pre&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 13:37:28 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13923</guid>
      <link>https://github.com/dotnet/fsharp/issues/13923</link>
      <title>Issue: Compiler error Constructor on type 'FSharp.DependencyManager.Nuget.FSharpDependencyManager' not found. - @roboz0r</title>
      <description>&lt;p&gt;I am building a tool to enable F# scripting within a native windows application. I've run into an issue with the ability to use &lt;code&gt;#r nuget&lt;/code&gt; directives.&lt;/p&gt;
&lt;p&gt;I have two different ways I am calling the compiler against the script files:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Producing a dynamic assembly&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;let tryCompile scriptPath = 
    let compilerArgs (scriptPath:string) = 
        [|
            &amp;quot;-a&amp;quot;; scriptPath
            &amp;quot;--targetprofile:netcore&amp;quot;
            &amp;quot;--target:module&amp;quot;
        |]
    async {
        let compilerArgs = compilerArgs scriptPath
        let! errors, retCode, maybeAssembly = 
            checker.CompileToDynamicAssembly(compilerArgs, None)

        return
            match maybeAssembly with
            | Some a -&amp;gt; 
                Ok (a, errors)
            | None -&amp;gt; 
                Error (retCode, scriptPath, errors)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Producing a dll (to enable debugging)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;let private compilerArgs (scriptPath:string) = 
    let dll = Path.Combine(Path.GetDirectoryName(scriptPath), &amp;quot;bin&amp;quot;, $&amp;quot;%O{Guid.NewGuid()}.dll&amp;quot;)
    [|
        &amp;quot;-a&amp;quot;; scriptPath
        $&amp;quot;-o:%s{dll}&amp;quot;
        &amp;quot;--targetprofile:netcore&amp;quot;
        &amp;quot;--target:library&amp;quot;
        &amp;quot;--debug:full&amp;quot;
    |], dll

let tryCompileCtx (loadCtx:AssemblyLoadContext) scriptPath = 
    async {
        let compilerArgs, dllPath = compilerArgs scriptPath

        let! errors, retCode = checker.Compile(compilerArgs)
        let maybeAssembly = 
            match retCode with
            | 0 -&amp;gt; loadCtx.LoadFromAssemblyPath(dllPath) |&amp;gt; Some
            | _ -&amp;gt; None

        return
            match maybeAssembly with
            | Some a -&amp;gt; 
                Ok (a, errors)
            | None -&amp;gt; 
                Error (retCode, scriptPath, errors)
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both of these versions of the code pass basic tests to compile and run the following script in the test environment (running with Visual Studio):&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;#r &amp;quot;nuget: FSharp.Data, 4.2.8&amp;quot; 

open FSharp.Data

let getSomeData() : string =
    let resp = Http.Request &amp;quot;https://en.wikipedia.org/wiki/F_Sharp_(programming_language)&amp;quot;
    match resp.Body with
    | Text text -&amp;gt; 
        text.[0..100]
    | Binary _ -&amp;gt; &amp;quot;Shouldn't be binary&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However, when attempting to compile the same script calling &lt;code&gt;tryCompileCtx&lt;/code&gt; in the native hosted environment I get the following errors (using &lt;code&gt;tryCompile&lt;/code&gt; works as expected):&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Using FSharp.Core 6.0.3, FSharp.Compiler.Service 41.0.3&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;18:45:08.2591: Compilation of ...\main.fsx failed with code: 1
18:45:08.2654: ...\main.fsx (1,1)-(1,31) parse error Constructor on type 'FSharp.DependencyManager.Nuget.FSharpDependencyManager' not found.

&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Using FSharp.Core 6.0.6, FSharp.Compiler.Service 41.0.6&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;18:55:10.5977: Compilation of ...\main.fsx failed with code: 1
18:55:10.6025: ...\main.fsx (1,1)-(1,31) parse error Constructor on type 'FSharp.DependencyManager.Nuget.FSharpDependencyManager' not found.
18:55:10.6030: ...\main.fsx (1,1)-(1,31) parse error Invalid directive. Expected '#r &amp;quot;&amp;lt;file-or-assembly&amp;gt;&amp;quot;'.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Based on the phrasing of the errors and the fact that it is different between 41.0.3 and 41.0.6 I'm fairly confident the error originates from an exception thrown in &lt;a href="https://github.com/dotnet/fsharp/blob/main/src/Compiler/DependencyManager/DependencyProvider.fs"&gt;DependencyProvider.fs&lt;/a&gt;. However I have no idea how to track it down further than that or what to do about it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```fsharp
let instance = Activator.CreateInstance(theType, [| outputDir :&amp;gt; obj |]) // on 41.0.3
let instance = // on 41.0.6
    if not(isNull (theType.GetConstructor([|typeof&amp;lt;string option&amp;gt;; typeof&amp;lt;bool&amp;gt;|]))) then
        Activator.CreateInstance(theType, [| outputDir :&amp;gt; obj; useResultsCache :&amp;gt; obj |])
    else
        Activator.CreateInstance(theType, [| outputDir :&amp;gt; obj |])
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compiling a simple script like &lt;code&gt;let hello name = $&amp;quot;Hello, %s{name}&amp;quot;&lt;/code&gt; works as expected in all cases.&lt;/p&gt;
&lt;p&gt;Is this a bug or is there some additional configuration I need to provide so that &lt;code&gt;#r nuget&lt;/code&gt; directives will work as expected?&lt;/p&gt;
&lt;p&gt;If it's relevant, I'm running:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 21H2 19044.2006&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dotnet --version 6.0.401&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 09:41:18 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13922</guid>
      <link>https://github.com/dotnet/fsharp/issues/13922</link>
      <title>Issue: Prohibit XML documentation with params for the primary constructor above the type - @DedSec256</title>
      <description>&lt;p&gt;Currently, for primary constructors, you can specify XML documentation with parameters in two ways&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-F#"&gt;/// &amp;lt;summary&amp;gt;A&amp;lt;/summary&amp;gt;
/// &amp;lt;param name='x'&amp;gt;x&amp;lt;/param&amp;gt;
type A(x) = ...
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-F#"&gt;type A
    /// &amp;lt;summary&amp;gt;A&amp;lt;/summary&amp;gt;
    /// &amp;lt;param name='x'&amp;gt;x&amp;lt;/param&amp;gt; 
    (x) = ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Consider some of the pros and cons of the first approach.&lt;/p&gt;
&lt;p&gt;Pros:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consistency with documentation for functions: since the primary constructor is also a kind of function, it is logical to be able to specify documentation for it as for function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Cons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When generating a documentation file during compilation, the documentation specified in this way is generated only for the type (and therefore is not available in parameter info in C#)&lt;/li&gt;
&lt;li&gt;Also, it doesn't work even in F# tooltips&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/26364714/190991529-578e0eee-5237-4c74-8181-a2b66e3fceda.png" alt="image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Constructor parameters are displayed in the type tooltip (especially unpleasant when the type has constructors in addition to the primary one); here the separation of documentation for the type and constructor occurs not at the syntax level, but at the level of thoughts of a programmer, who writes common documentation block for the type and primary constructor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/26364714/190992515-f55904aa-13cb-4841-92ed-50599a957c32.png" alt="image" /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the constructor has documentation in two places at once&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class="language-F#"&gt;/// &amp;lt;summary&amp;gt;A&amp;lt;/summary&amp;gt;
/// &amp;lt;param name='x'&amp;gt;x&amp;lt;/param&amp;gt; 
type A
    /// &amp;lt;param name='x'&amp;gt;x&amp;lt;/param&amp;gt; 
    (x) = ...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then there is no any warning&lt;/p&gt;
&lt;p&gt;So, I propose to discuss whether it is possible to prohibit writing documentation for the primary constructor above the type, or such behavior should be allowed, but it is necessary to fix XML-doc parameters analyzer and the documentation generator.
In any case, I can help with the implementation.&lt;/p&gt;
</description>
      <pubDate>Mon, 19 Sep 2022 09:06:55 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13921</guid>
      <link>https://github.com/dotnet/fsharp/issues/13921</link>
      <title>Issue: Inconsistent behavior with type inference and type aliases using `seq` - @bmitc</title>
      <description>&lt;p&gt;I'm having a lot of confusing issues with type inference when using type aliases with sequences. The behavior and errors reported differ between Visual Studio, .NET Interactive notebooks, and FSI.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Repro steps&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/fsharp/files/9595208/SequentialLogic.zip"&gt;SequentialLogic.zip&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;See the attached &lt;code&gt;SequentialLogic.ipynb&lt;/code&gt; notebook and note the error of&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Error: input.fsx (9,5)-(9,9) typecheck error Value restriction. The value 'Not'' has been inferred to have generic type
val Not': (Signal -&amp;gt; Signal)&lt;br /&gt;
Either make the arguments to 'Not'' explicit or, if you do not intend for it to be generic, add a type annotation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The error does not make any sense to me because &lt;code&gt;Signal -&amp;gt; Signal&lt;/code&gt; is exactly the intended type of &lt;code&gt;Not'&lt;/code&gt; and is not generic.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;See the attached &lt;code&gt;SequentialLogic&lt;/code&gt; solution and open &lt;code&gt;Signal.fs&lt;/code&gt; in the &lt;code&gt;CPUSimulator&lt;/code&gt; project in Visual Studio 2022. Note that &lt;code&gt;Not'&lt;/code&gt;, &lt;code&gt;And'&lt;/code&gt;, and so on have no error but &lt;code&gt;Xor'&lt;/code&gt; reports the error&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/65685447/190926846-5ccea771-ec33-49b4-b245-ecb19ca1bef2.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;I suppose this error may make a little sense to me given that &lt;code&gt;Signal&lt;/code&gt; is a type alias of &lt;code&gt;seq&amp;lt;bit&amp;gt;&lt;/code&gt; and that &lt;code&gt;seq&lt;/code&gt; can have subtypes (such as &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;array&lt;/code&gt;, is that correct?). But what doesn't make sense is that &lt;code&gt;Not'&lt;/code&gt;, &lt;code&gt;And'&lt;/code&gt;, and so on are defined identically but do not report the same error. Nor do they report the same error as the .NET Interactive notebook.&lt;/p&gt;
&lt;p&gt;Note: I just noticed that if I delete the code &lt;em&gt;after&lt;/em&gt; &lt;code&gt;Xor'&lt;/code&gt; in the project, the errors show up for all the &lt;code&gt;&amp;lt;operator&amp;gt;'&lt;/code&gt; definitions. This is strange to me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Enter the code into &lt;code&gt;FSI&lt;/code&gt;, and you'll get yet another distinct error case for &lt;code&gt;Not'&lt;/code&gt; as opposed to the .NET Interactive error and the Visual Studio non-error for &lt;code&gt;Not'&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;&amp;gt; let Not' = liftToSignal1 Not;;

  let Not' = liftToSignal1 Not;;
  ----^^^^

stdin(52,5): error FS0030: Value restriction. The value 'Not'' has been inferred to have generic type
    val Not': ('_a -&amp;gt; Signal) when '_a :&amp;gt; Signal
Either make the arguments to 'Not'' explicit or, if you do not intend for it to be generic, add a type annotation.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I would say the expected behavior is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Consistently reported errors&lt;/li&gt;
&lt;li&gt;Errors that make sense (in the case of the .NET Interactive error)&lt;/li&gt;
&lt;li&gt;Errors that do not adjust when code defined &lt;em&gt;after&lt;/em&gt; the problematic code is removed&lt;/li&gt;
&lt;li&gt;I expected the use of the &amp;quot;lift&amp;quot; functions to be straightforward to avoid having to explicitly define parameters and/or provide additional type annotations. Note that the &amp;quot;lift&amp;quot; functions themselves are explicitly typed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Actual behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Several inconsistent errors as described above.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Known workarounds&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Either explicitly type all functions and/or provide parameters. For example, if I define &lt;code&gt;Not'&lt;/code&gt; in the .NET Interactive notebook as&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;let Not' input = liftToSignal1 Not input
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the error goes away. This doesn't quite make sense to me given &lt;code&gt;liftToSignal1&lt;/code&gt; is explicitly type annotated, and I don't type annotate &lt;code&gt;input&lt;/code&gt; here. Defining &lt;code&gt;Not'&lt;/code&gt; as&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;let Not' : Signal -&amp;gt; Signal = liftToSignal1 Not
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;also gets rid of the confusing errors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related information&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Provide any related information (optional):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Operating system: Windows 11&lt;/li&gt;
&lt;li&gt;.NET Runtime kind (.NET Core, .NET Framework, Mono): .NET 6&lt;/li&gt;
&lt;li&gt;Editing Tools (e.g. Visual Studio Version, Visual Studio): Visual Studio Community 2022, Visual Studio Code with .NET Interactive Notebooks extension, and &lt;code&gt;dotnet fsi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Sun, 18 Sep 2022 20:43:20 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13919</guid>
      <link>https://github.com/dotnet/fsharp/issues/13919</link>
      <title>Issue: Expose "Parallel projects analysis" option in Visual Studio - @safesparrow</title>
      <description>&lt;p&gt;&lt;strong&gt;Is your feature request related to a problem? Please describe.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Describe the solution you'd like&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;I would like Visual Studio to expose an option in the UI to enable the &amp;quot;Parallel Projects Analysis&amp;quot; feature of the FCS.
That feature is being worked on in https://github.com/dotnet/fsharp/pull/13521 .
In its current form, enabling the feature in the FCS requires setting the &lt;code&gt;ParallelReferenceResolution=true&lt;/code&gt; when calling &lt;code&gt;FSharpChecker.Create&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The feature has most impact in the service, but can also be enabled for the standalone compiler.
To do that, one needs to either:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;set the environment variable &lt;code&gt;FCS_ParallelReferenceResolution=true&lt;/code&gt;, or&lt;/li&gt;
&lt;li&gt;pass in &lt;code&gt;--parallelreferenceresolution&lt;/code&gt; flag to the compiler.
I'm not entirely sure if this is needed, since it doesn't speedup standalone compilation massively (as the compiler works on projects in isolation and the only thing that's parallelised there is assembly resolution).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Describe alternatives you've considered&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Allowing end-users to set the &lt;code&gt;FCS_ParallelReferenceResolution&lt;/code&gt; environment variable themselves and this way enable the feature. This alternative is less user-friendly&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Additional context&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;@vzarytovskii mentioned that such a config item would be desirable for easier testing and gradual rollout of the feature.&lt;/p&gt;
</description>
      <pubDate>Sat, 17 Sep 2022 17:19:00 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13910</guid>
      <link>https://github.com/dotnet/fsharp/issues/13910</link>
      <title>Issue: [Automated] PRs inserted in VS build main-32915.33 - @allisonchou</title>
      <description>&lt;p&gt;&lt;a href="https://github.com/dotnet/fsharp/compare/23fd568d337d3d6492869ce09a6e69a91cf4dc17...430d645d778ec0db10ad7ad0b02de9fab3ce5647?w=1"&gt;View Complete Diff of Changes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13898"&gt;Introduce SynType.SignatureParameter. (#13879) (13898)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13853"&gt;Add trimming XML files to FSharp.Core. (13853)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13883"&gt;Only process EmptyModuleOrNamespaces when showHeader is true. (13883)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13879"&gt;Introduce SynType.SignatureParameter. (13879)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13892"&gt;Check expressions: safer init properties check (13892)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13870"&gt;Fix #13197 (13870)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13838"&gt;Don't ship the FSharp.Core XmlDocs as Content in the nuget package. (13838)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13881"&gt;Re-enable macOS CI legs on macos-11 (13881)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13873"&gt;More parser tweaks, to restore compatibility (13873)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13874"&gt;Mention the &lt;code&gt;DotnetFscCompilerPath&lt;/code&gt; property (13874)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 10:54:39 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13909</guid>
      <link>https://github.com/dotnet/fsharp/issues/13909</link>
      <title>Issue: Expose parallel typechecking option in VS options - @vzarytovskii</title>
      <description>&lt;p&gt;Once https://github.com/dotnet/fsharp/pull/13737 is merged, we need to expose an option in VS which will be enabling it internally.&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 10:44:53 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13906</guid>
      <link>https://github.com/dotnet/fsharp/issues/13906</link>
      <title>Issue: Go to definition on external dependency/metadata is broken in 17.4 - @vzarytovskii</title>
      <description>&lt;blockquote&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/5063478/190377387-09c72c71-b4bb-43f9-839a-653d4702b843.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;BCL/external dependency metadata navigation. I'm pressing F12 on this to no avail (it used to work). Perhaps it's a different use case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yep, doesn't work for me for &lt;code&gt;Newtonsoft.Json&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted by @vzarytovskii in https://github.com/dotnet/fsharp/issues/13882#issuecomment-1247893240&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 10:17:06 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13905</guid>
      <link>https://github.com/dotnet/fsharp/issues/13905</link>
      <title>Issue: 'do' statements in modules do not get evaluated ? - @goswinr</title>
      <description>&lt;p&gt;It seems that &lt;code&gt;do&lt;/code&gt; statements in modules do not get evaluated when the module is accessed from another assembly.&lt;/p&gt;
&lt;p&gt;Creating an empty project&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:\&amp;gt;md Test
D:\&amp;gt;cd Test
D:\Test&amp;gt;dotnet new classlib -lang F#
D:\Test&amp;gt;code Library.fs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;then changing the code to&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;namespace Test

module SayDll =
    let hello name =
        printfn &amp;quot;Hello %s&amp;quot; name
    
    do printfn &amp;quot;loaded-SayDll&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and calling it from fsi&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:\Test&amp;gt;dotnet build
D:\Test&amp;gt;cd bin/debug/net7.0
D:\Test\bin\Debug\net7.0&amp;gt;dotnet fsi

Microsoft (R) F# Interactive version 12.0.2.0 for F# 6.0
Copyright (c) Microsoft Corporation. All Rights Reserved.

For help type #help;;

&amp;gt; #r &amp;quot;Test.dll&amp;quot;
- Test.SayDll.hello &amp;quot;Goswin&amp;quot;;;

--&amp;gt; Referenced 'D:\Test\bin\Debug\net7.0\Test.dll' (file may be locked by F# Interactive process)

Binding session to 'D:\Test\bin\Debug\net7.0\Test.dll'...
Hello Goswin
val it: unit = ()

&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;do&lt;/code&gt; statement &lt;strong&gt;was not evaluated&lt;/strong&gt;.
Whereas putting it all in fsi&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;D:\&amp;gt;dotnet fsi

Microsoft (R) F# Interactive version 12.0.2.0 for F# 6.0
Copyright (c) Microsoft Corporation. All Rights Reserved.

For help type #help;;

&amp;gt; module SayFsx =
-     open System.Net
-     let hello name =
-         printfn &amp;quot;Hello %s&amp;quot; name
-
-     do printfn &amp;quot;loaded-SayFsx&amp;quot;
-
- SayFsx.hello &amp;quot;Goswin&amp;quot;;;
loaded-SayFsx
Hello Goswin
module SayFsx =
  val hello: name: string -&amp;gt; unit
val it: unit = ()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the &lt;code&gt;do&lt;/code&gt; statement evaluates as expected.&lt;/p&gt;
&lt;p&gt;Is this behavior intentional? Did I miss some documentation on this?
There is also a not really answered question related to this on &lt;a href="https://stackoverflow.com/questions/72819368/when-is-an-f-do-statement-in-a-module-evaluated"&gt;Stackoverflow&lt;/a&gt;.
What would make a &lt;code&gt;do&lt;/code&gt; statement in another assembly's module evaluate?&lt;/p&gt;
</description>
      <pubDate>Thu, 15 Sep 2022 10:16:45 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13897</guid>
      <link>https://github.com/dotnet/fsharp/issues/13897</link>
      <title>Issue: Error message FS3204 does not tell the truth, perhaps due to a compiler bug - @BentTranberg</title>
      <description>&lt;p&gt;This is the error message FS3204:&lt;/p&gt;
&lt;p&gt;&amp;quot;If a union type has more than one case and is a struct, then all fields within the union type must be given unique names.&amp;quot;&lt;/p&gt;
&lt;p&gt;This is an example of source that produce this error:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[&amp;lt;Struct&amp;gt;]
type A = B of int | C of float

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;According to the error message, all fields must be named. However, when naming only one of the two fields, the compiler will not emit the error message.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[&amp;lt;Struct&amp;gt;]
type A = B of x:int | C of float // Compiles just fine.

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another example that compiles just fine:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[&amp;lt;Struct&amp;gt;]
type AA =
    | B of b:int
    | C of c:int
    | D of int
    | E of e:int
    | F of f:int

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While the compiler complains about this again:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[&amp;lt;Struct&amp;gt;]
type AA =
    | B of b:int
    | C of int
    | D of d:int
    | E of int
    | F of f:int

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks like a off-by-one error. One of the fields can be nameless. Perhaps this is intentional by the compiler logic, though the error message doesn't tell the truth. I don't know.&lt;/p&gt;
&lt;p&gt;Perhaps the message should be &amp;quot;If a union type has more than one case and is a struct, then all but one field within the union type must be given unique names.&amp;quot;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related information&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;VS 17.3.4&lt;/p&gt;
&lt;p&gt;https://github.com/dotnet/fsharp/issues/3648&lt;/p&gt;
</description>
      <pubDate>Wed, 14 Sep 2022 06:10:45 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13887</guid>
      <link>https://github.com/dotnet/fsharp/issues/13887</link>
      <title>Issue: type resolution in script file doesn't work for type provider without qualified names - @smoothdeveloper</title>
      <description>&lt;p&gt;&lt;strong&gt;Repro steps&lt;/strong&gt;
Setting &amp;quot;Use .NET Core Scripting&amp;quot; to False:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/87944/189715105-a9d6088a-6f08-4c96-a652-037c6c02e5ec.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;I'm facing situation with a script such as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;#r &amp;quot;nuget: FSharp.Data&amp;quot;
open FSharp.Data
type J = JsonProvider&amp;lt; &amp;quot;&amp;quot;&amp;quot;{ &amp;quot;a&amp;quot;:&amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;: 1}&amp;quot;&amp;quot;&amp;quot;&amp;gt;
type JQualified = FSharp.Data.JsonProvider&amp;lt; &amp;quot;&amp;quot;&amp;quot;{ &amp;quot;a&amp;quot;:&amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;: 1}&amp;quot;&amp;quot;&amp;quot;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;the first &lt;code&gt;JsonProvider&lt;/code&gt; shows squiggles&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FS00039: The type &lt;code&gt;JsonProvider&lt;/code&gt; is not defined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It doesn't happen with &amp;quot;Use .NET Core Scripting&amp;quot; to True.&lt;/p&gt;
&lt;p&gt;It doesn't affect fsianycpu.exe evaluation but just the tooling.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Actual behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;the first &lt;code&gt;JsonProvider&lt;/code&gt; shows squiggles&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FS00039: The type &lt;code&gt;JsonProvider&lt;/code&gt; is not defined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/87944/189730089-12c93c9b-1ffb-4608-8af2-303117794cac.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Expected behavior&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;It should work disregarding the setting.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Known workarounds&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using qualified names, which is a bit problematic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Related information&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 11 Pro 22H2 22622.590&lt;/li&gt;
&lt;li&gt;VS 2022 17.2.6&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 18:34:49 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13886</guid>
      <link>https://github.com/dotnet/fsharp/issues/13886</link>
      <title>Issue: Broken rendering behavior for CodeLens - @psfinaki</title>
      <description>&lt;p&gt;Another quirk, definitely broken behavior:&lt;/p&gt;
&lt;p&gt;Create an ASP.NET Core app, modify the following method:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-fsharp"&gt;    [&amp;lt;HttpGet&amp;gt;]
    member _.Get() =
        let rng = System.Random()

        let x = 12
        let y = 13

        [|
            for index in 0..4 -&amp;gt;
                { Date = DateTime.Now.AddDays(float index)
                  TemperatureC = rng.Next(-20,55)
                  Summary = summaries.[rng.Next(summaries.Length)] }
        |]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Very, very slowly type out a new value binding &lt;code&gt;let x = &lt;/code&gt;.  At some point the textblock for the code lens will be empty, and any further typing will have it draw at the very top of the file.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/6309070/96389145-963d5080-1162-11eb-827e-3b518422accf.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;Another quirk that would need to get addressed: https://github.com/dotnet/fsharp/issues/11257&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Originally posted by @cartermp in https://github.com/dotnet/fsharp/issues/6964#issuecomment-711443032&lt;/em&gt;&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 16:45:33 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13882</guid>
      <link>https://github.com/dotnet/fsharp/issues/13882</link>
      <title>Issue: C# to F# go to definition navigates to metadata, and not the source code - @oleksandr-bilyk</title>
      <description>&lt;p&gt;Every year we have to buy Rider because Rider allows to navigate from C# code to F# method definition.
We had big expectations that VS2022 will support such a basic feature but not.
Our team decided to use F# in solution where we have many C# and F# projects calling each other.
This small feature is very important for future use of F# in our solutions.&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 13:53:03 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13880</guid>
      <link>https://github.com/dotnet/fsharp/issues/13880</link>
      <title>Issue: Investigate the options of migrating to some library for parsing cmd line args - @psfinaki</title>
      <description>&lt;p&gt;The original &lt;a href="https://github.com/dotnet/fsharp/blob/main/src/Compiler/Driver/CompilerOptions.fs#L259"&gt;parser&lt;/a&gt; was written long time ago, since then a bunch of libraries for arg parsing popped up, we can try switching to some.&lt;/p&gt;
&lt;p&gt;Some libs I know of: &lt;a href="https://github.com/fsprojects/Argu"&gt;Argu&lt;/a&gt;, &lt;a href="https://github.com/commandlineparser/commandline"&gt;CommandLineParser&lt;/a&gt;.&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 12:30:02 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13878</guid>
      <link>https://github.com/dotnet/fsharp/issues/13878</link>
      <title>Issue: Add extra tests for the compiler options parser - @psfinaki</title>
      <description>&lt;p&gt;We've recently spent quite some time on refactoring, breaking and fixing FSC options parser which means we should cover it with extra tests, ideally on the unit and component levels.&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 12:22:52 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13877</guid>
      <link>https://github.com/dotnet/fsharp/issues/13877</link>
      <title>Issue: [Automated] PRs inserted in VS build main-32912.06 - @allisonchou</title>
      <description>&lt;p&gt;&lt;a href="https://github.com/dotnet/fsharp/compare/548527d5b68c860d0f17e93348b1628795286ceb...23fd568d337d3d6492869ce09a6e69a91cf4dc17?w=1"&gt;View Complete Diff of Changes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13868"&gt;Add name and depth fo the stackguard threads (#13859) (13868)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13865"&gt;fix 12761 (13865)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13859"&gt;Add name and depth fo the stackguard threads (13859)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/fsharp/pull/13840"&gt;Correct range for struct tuples. (13840)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 11:06:36 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13876</guid>
      <link>https://github.com/dotnet/fsharp/issues/13876</link>
      <title>Issue: Inconsistent type incompatible error range - @auduchinok</title>
      <description>&lt;pre&gt;&lt;code class="language-fsharp"&gt;let f (i: System.IDisposable) = ()

let o = obj()
o |&amp;gt; f
f o
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The highlighted range is different between cases when using a prefix application and a pipe operator: in one case the argument is highlighted and in another cases it's the function:&lt;/p&gt;
&lt;img width="320" alt="Screenshot 2022-09-12 at 11 30 47" src="https://user-images.githubusercontent.com/3923587/189620584-aad31d76-9905-4810-a287-1127e5f2bf9f.png"&gt;
&lt;p&gt;Maybe it'd be better (and feasible?) to highlight the same thing in both cases?&lt;/p&gt;
</description>
      <pubDate>Mon, 12 Sep 2022 09:33:34 Z</pubDate>
    </item>
    <item>
      <guid isPermaLink="true">https://github.com/dotnet/fsharp/issues/13871</guid>
      <link>https://github.com/dotnet/fsharp/issues/13871</link>
      <title>Issue: `dotnet fsi --help` is not helpful, can't get the list of compiler flags from command line. - @smoothdeveloper</title>
      <description>&lt;p&gt;I'd expect &lt;code&gt;dotnet fsi --help&lt;/code&gt; to give the list of compiler flags that FSI understands, or maybe a link to https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/compiler-options#compiler-options-listed-alphabetically&lt;/p&gt;
&lt;p&gt;For example, it is possible to use &lt;code&gt;dotnet fsi /warnon:1182&lt;/code&gt; but I have to &amp;quot;discover&amp;quot; it, because the help output is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Description:

Usage:
  dotnet fsi [options]

Options:
  -?, -h, --help  Show command line help.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, it would make sense to be able to invoke the compiler to obtain the actual help (online documentation may not be accurate), maybe through &lt;code&gt;dotnet fsc --help&lt;/code&gt;
, but the compiler is not invokable this way, there are no clear ways to invoke the compiler out of the dotnet sdk.&lt;/p&gt;
</description>
      <pubDate>Sat, 10 Sep 2022 16:44:27 Z</pubDate>
    </item>
  </channel>
</rss>